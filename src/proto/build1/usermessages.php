<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: usermessages.proto
//   Date: 2012-04-27 16:14:33

namespace  {

  class EBaseUserMessages extends \DrSlump\Protobuf\Enum {
    const UM_AchievementEvent = 1;
    const UM_CloseCaption = 2;
    const UM_CloseCaptionDirect = 3;
    const UM_CurrentTimescale = 4;
    const UM_DesiredTimescale = 5;
    const UM_Fade = 6;
    const UM_GameTitle = 7;
    const UM_Geiger = 8;
    const UM_HintText = 9;
    const UM_HudMsg = 10;
    const UM_HudText = 11;
    const UM_KeyHintText = 12;
    const UM_MessageText = 13;
    const UM_RequestState = 14;
    const UM_ResetHUD = 15;
    const UM_Rumble = 16;
    const UM_SayText = 17;
    const UM_SayText2 = 18;
    const UM_SayTextChannel = 19;
    const UM_Shake = 20;
    const UM_ShakeDir = 21;
    const UM_StatsCrawlMsg = 22;
    const UM_StatsSkipState = 23;
    const UM_TextMsg = 24;
    const UM_Tilt = 25;
    const UM_Train = 26;
    const UM_VGUIMenu = 27;
    const UM_VoiceMask = 28;
    const UM_VoiceSubtitle = 29;
    const UM_SendAudio = 30;
    const UM_MAX_BASE = 63;
  }
}
namespace  {

  class CUserMsg_AchievementEvent extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $achievement = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CUserMsg_AchievementEvent');

      // OPTIONAL UINT32 achievement = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "achievement";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <achievement> has a value
     *
     * @return boolean
     */
    public function hasAchievement(){
      return $this->_has(1);
    }
    
    /**
     * Clear <achievement> value
     *
     * @return \CUserMsg_AchievementEvent
     */
    public function clearAchievement(){
      return $this->_clear(1);
    }
    
    /**
     * Get <achievement> value
     *
     * @return int
     */
    public function getAchievement(){
      return $this->_get(1);
    }
    
    /**
     * Set <achievement> value
     *
     * @param int $value
     * @return \CUserMsg_AchievementEvent
     */
    public function setAchievement( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace  {

  class CUserMsg_CloseCaption extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $hash = null;
    
    /**  @var float */
    public $duration = null;
    
    /**  @var boolean */
    public $from_player = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CUserMsg_CloseCaption');

      // OPTIONAL FIXED32 hash = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "hash";
      $f->type      = \DrSlump\Protobuf::TYPE_FIXED32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT duration = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "duration";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL from_player = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "from_player";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <hash> has a value
     *
     * @return boolean
     */
    public function hasHash(){
      return $this->_has(1);
    }
    
    /**
     * Clear <hash> value
     *
     * @return \CUserMsg_CloseCaption
     */
    public function clearHash(){
      return $this->_clear(1);
    }
    
    /**
     * Get <hash> value
     *
     * @return int
     */
    public function getHash(){
      return $this->_get(1);
    }
    
    /**
     * Set <hash> value
     *
     * @param int $value
     * @return \CUserMsg_CloseCaption
     */
    public function setHash( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <duration> has a value
     *
     * @return boolean
     */
    public function hasDuration(){
      return $this->_has(2);
    }
    
    /**
     * Clear <duration> value
     *
     * @return \CUserMsg_CloseCaption
     */
    public function clearDuration(){
      return $this->_clear(2);
    }
    
    /**
     * Get <duration> value
     *
     * @return float
     */
    public function getDuration(){
      return $this->_get(2);
    }
    
    /**
     * Set <duration> value
     *
     * @param float $value
     * @return \CUserMsg_CloseCaption
     */
    public function setDuration( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <from_player> has a value
     *
     * @return boolean
     */
    public function hasFromPlayer(){
      return $this->_has(3);
    }
    
    /**
     * Clear <from_player> value
     *
     * @return \CUserMsg_CloseCaption
     */
    public function clearFromPlayer(){
      return $this->_clear(3);
    }
    
    /**
     * Get <from_player> value
     *
     * @return boolean
     */
    public function getFromPlayer(){
      return $this->_get(3);
    }
    
    /**
     * Set <from_player> value
     *
     * @param boolean $value
     * @return \CUserMsg_CloseCaption
     */
    public function setFromPlayer( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace  {

  class CUserMsg_CurrentTimescale extends \DrSlump\Protobuf\Message {

    /**  @var float */
    public $current = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CUserMsg_CurrentTimescale');

      // OPTIONAL FLOAT current = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "current";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <current> has a value
     *
     * @return boolean
     */
    public function hasCurrent(){
      return $this->_has(1);
    }
    
    /**
     * Clear <current> value
     *
     * @return \CUserMsg_CurrentTimescale
     */
    public function clearCurrent(){
      return $this->_clear(1);
    }
    
    /**
     * Get <current> value
     *
     * @return float
     */
    public function getCurrent(){
      return $this->_get(1);
    }
    
    /**
     * Set <current> value
     *
     * @param float $value
     * @return \CUserMsg_CurrentTimescale
     */
    public function setCurrent( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace  {

  class CUserMsg_DesiredTimescale extends \DrSlump\Protobuf\Message {

    /**  @var float */
    public $desired = null;
    
    /**  @var float */
    public $duration = null;
    
    /**  @var int */
    public $interpolator = null;
    
    /**  @var float */
    public $start_blend_time = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CUserMsg_DesiredTimescale');

      // OPTIONAL FLOAT desired = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "desired";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT duration = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "duration";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 interpolator = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "interpolator";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT start_blend_time = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "start_blend_time";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <desired> has a value
     *
     * @return boolean
     */
    public function hasDesired(){
      return $this->_has(1);
    }
    
    /**
     * Clear <desired> value
     *
     * @return \CUserMsg_DesiredTimescale
     */
    public function clearDesired(){
      return $this->_clear(1);
    }
    
    /**
     * Get <desired> value
     *
     * @return float
     */
    public function getDesired(){
      return $this->_get(1);
    }
    
    /**
     * Set <desired> value
     *
     * @param float $value
     * @return \CUserMsg_DesiredTimescale
     */
    public function setDesired( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <duration> has a value
     *
     * @return boolean
     */
    public function hasDuration(){
      return $this->_has(2);
    }
    
    /**
     * Clear <duration> value
     *
     * @return \CUserMsg_DesiredTimescale
     */
    public function clearDuration(){
      return $this->_clear(2);
    }
    
    /**
     * Get <duration> value
     *
     * @return float
     */
    public function getDuration(){
      return $this->_get(2);
    }
    
    /**
     * Set <duration> value
     *
     * @param float $value
     * @return \CUserMsg_DesiredTimescale
     */
    public function setDuration( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <interpolator> has a value
     *
     * @return boolean
     */
    public function hasInterpolator(){
      return $this->_has(3);
    }
    
    /**
     * Clear <interpolator> value
     *
     * @return \CUserMsg_DesiredTimescale
     */
    public function clearInterpolator(){
      return $this->_clear(3);
    }
    
    /**
     * Get <interpolator> value
     *
     * @return int
     */
    public function getInterpolator(){
      return $this->_get(3);
    }
    
    /**
     * Set <interpolator> value
     *
     * @param int $value
     * @return \CUserMsg_DesiredTimescale
     */
    public function setInterpolator( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <start_blend_time> has a value
     *
     * @return boolean
     */
    public function hasStartBlendTime(){
      return $this->_has(4);
    }
    
    /**
     * Clear <start_blend_time> value
     *
     * @return \CUserMsg_DesiredTimescale
     */
    public function clearStartBlendTime(){
      return $this->_clear(4);
    }
    
    /**
     * Get <start_blend_time> value
     *
     * @return float
     */
    public function getStartBlendTime(){
      return $this->_get(4);
    }
    
    /**
     * Set <start_blend_time> value
     *
     * @param float $value
     * @return \CUserMsg_DesiredTimescale
     */
    public function setStartBlendTime( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace  {

  class CUserMsg_Fade extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $duration = null;
    
    /**  @var int */
    public $hold_time = null;
    
    /**  @var int */
    public $flags = null;
    
    /**  @var int */
    public $color = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CUserMsg_Fade');

      // OPTIONAL UINT32 duration = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "duration";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 hold_time = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "hold_time";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 flags = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "flags";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FIXED32 color = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "color";
      $f->type      = \DrSlump\Protobuf::TYPE_FIXED32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <duration> has a value
     *
     * @return boolean
     */
    public function hasDuration(){
      return $this->_has(1);
    }
    
    /**
     * Clear <duration> value
     *
     * @return \CUserMsg_Fade
     */
    public function clearDuration(){
      return $this->_clear(1);
    }
    
    /**
     * Get <duration> value
     *
     * @return int
     */
    public function getDuration(){
      return $this->_get(1);
    }
    
    /**
     * Set <duration> value
     *
     * @param int $value
     * @return \CUserMsg_Fade
     */
    public function setDuration( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <hold_time> has a value
     *
     * @return boolean
     */
    public function hasHoldTime(){
      return $this->_has(2);
    }
    
    /**
     * Clear <hold_time> value
     *
     * @return \CUserMsg_Fade
     */
    public function clearHoldTime(){
      return $this->_clear(2);
    }
    
    /**
     * Get <hold_time> value
     *
     * @return int
     */
    public function getHoldTime(){
      return $this->_get(2);
    }
    
    /**
     * Set <hold_time> value
     *
     * @param int $value
     * @return \CUserMsg_Fade
     */
    public function setHoldTime( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <flags> has a value
     *
     * @return boolean
     */
    public function hasFlags(){
      return $this->_has(3);
    }
    
    /**
     * Clear <flags> value
     *
     * @return \CUserMsg_Fade
     */
    public function clearFlags(){
      return $this->_clear(3);
    }
    
    /**
     * Get <flags> value
     *
     * @return int
     */
    public function getFlags(){
      return $this->_get(3);
    }
    
    /**
     * Set <flags> value
     *
     * @param int $value
     * @return \CUserMsg_Fade
     */
    public function setFlags( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <color> has a value
     *
     * @return boolean
     */
    public function hasColor(){
      return $this->_has(4);
    }
    
    /**
     * Clear <color> value
     *
     * @return \CUserMsg_Fade
     */
    public function clearColor(){
      return $this->_clear(4);
    }
    
    /**
     * Get <color> value
     *
     * @return int
     */
    public function getColor(){
      return $this->_get(4);
    }
    
    /**
     * Set <color> value
     *
     * @param int $value
     * @return \CUserMsg_Fade
     */
    public function setColor( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace  {

  class CUserMsg_Shake extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $command = null;
    
    /**  @var float */
    public $amplitude = null;
    
    /**  @var float */
    public $frequency = null;
    
    /**  @var float */
    public $duration = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CUserMsg_Shake');

      // OPTIONAL UINT32 command = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "command";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT amplitude = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "amplitude";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT frequency = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "frequency";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT duration = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "duration";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <command> has a value
     *
     * @return boolean
     */
    public function hasCommand(){
      return $this->_has(1);
    }
    
    /**
     * Clear <command> value
     *
     * @return \CUserMsg_Shake
     */
    public function clearCommand(){
      return $this->_clear(1);
    }
    
    /**
     * Get <command> value
     *
     * @return int
     */
    public function getCommand(){
      return $this->_get(1);
    }
    
    /**
     * Set <command> value
     *
     * @param int $value
     * @return \CUserMsg_Shake
     */
    public function setCommand( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <amplitude> has a value
     *
     * @return boolean
     */
    public function hasAmplitude(){
      return $this->_has(2);
    }
    
    /**
     * Clear <amplitude> value
     *
     * @return \CUserMsg_Shake
     */
    public function clearAmplitude(){
      return $this->_clear(2);
    }
    
    /**
     * Get <amplitude> value
     *
     * @return float
     */
    public function getAmplitude(){
      return $this->_get(2);
    }
    
    /**
     * Set <amplitude> value
     *
     * @param float $value
     * @return \CUserMsg_Shake
     */
    public function setAmplitude( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <frequency> has a value
     *
     * @return boolean
     */
    public function hasFrequency(){
      return $this->_has(3);
    }
    
    /**
     * Clear <frequency> value
     *
     * @return \CUserMsg_Shake
     */
    public function clearFrequency(){
      return $this->_clear(3);
    }
    
    /**
     * Get <frequency> value
     *
     * @return float
     */
    public function getFrequency(){
      return $this->_get(3);
    }
    
    /**
     * Set <frequency> value
     *
     * @param float $value
     * @return \CUserMsg_Shake
     */
    public function setFrequency( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <duration> has a value
     *
     * @return boolean
     */
    public function hasDuration(){
      return $this->_has(4);
    }
    
    /**
     * Clear <duration> value
     *
     * @return \CUserMsg_Shake
     */
    public function clearDuration(){
      return $this->_clear(4);
    }
    
    /**
     * Get <duration> value
     *
     * @return float
     */
    public function getDuration(){
      return $this->_get(4);
    }
    
    /**
     * Set <duration> value
     *
     * @param float $value
     * @return \CUserMsg_Shake
     */
    public function setDuration( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace  {

  class CUserMsg_ShakeDir extends \DrSlump\Protobuf\Message {

    /**  @var \CUserMsg_Shake */
    public $shake = null;
    
    /**  @var \CMsgVector */
    public $direction = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CUserMsg_ShakeDir');

      // OPTIONAL MESSAGE shake = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "shake";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\CUserMsg_Shake';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE direction = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "direction";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\CMsgVector';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <shake> has a value
     *
     * @return boolean
     */
    public function hasShake(){
      return $this->_has(1);
    }
    
    /**
     * Clear <shake> value
     *
     * @return \CUserMsg_ShakeDir
     */
    public function clearShake(){
      return $this->_clear(1);
    }
    
    /**
     * Get <shake> value
     *
     * @return \CUserMsg_Shake
     */
    public function getShake(){
      return $this->_get(1);
    }
    
    /**
     * Set <shake> value
     *
     * @param \CUserMsg_Shake $value
     * @return \CUserMsg_ShakeDir
     */
    public function setShake(\CUserMsg_Shake $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <direction> has a value
     *
     * @return boolean
     */
    public function hasDirection(){
      return $this->_has(2);
    }
    
    /**
     * Clear <direction> value
     *
     * @return \CUserMsg_ShakeDir
     */
    public function clearDirection(){
      return $this->_clear(2);
    }
    
    /**
     * Get <direction> value
     *
     * @return \CMsgVector
     */
    public function getDirection(){
      return $this->_get(2);
    }
    
    /**
     * Set <direction> value
     *
     * @param \CMsgVector $value
     * @return \CUserMsg_ShakeDir
     */
    public function setDirection(\CMsgVector $value){
      return $this->_set(2, $value);
    }
  }
}

namespace  {

  class CUserMsg_Tilt extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $command = null;
    
    /**  @var boolean */
    public $ease_in_out = null;
    
    /**  @var \CMsgVector */
    public $angle = null;
    
    /**  @var float */
    public $duration = null;
    
    /**  @var float */
    public $time = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CUserMsg_Tilt');

      // OPTIONAL UINT32 command = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "command";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL ease_in_out = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "ease_in_out";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE angle = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "angle";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\CMsgVector';
      $descriptor->addField($f);

      // OPTIONAL FLOAT duration = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "duration";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT time = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "time";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <command> has a value
     *
     * @return boolean
     */
    public function hasCommand(){
      return $this->_has(1);
    }
    
    /**
     * Clear <command> value
     *
     * @return \CUserMsg_Tilt
     */
    public function clearCommand(){
      return $this->_clear(1);
    }
    
    /**
     * Get <command> value
     *
     * @return int
     */
    public function getCommand(){
      return $this->_get(1);
    }
    
    /**
     * Set <command> value
     *
     * @param int $value
     * @return \CUserMsg_Tilt
     */
    public function setCommand( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <ease_in_out> has a value
     *
     * @return boolean
     */
    public function hasEaseInOut(){
      return $this->_has(2);
    }
    
    /**
     * Clear <ease_in_out> value
     *
     * @return \CUserMsg_Tilt
     */
    public function clearEaseInOut(){
      return $this->_clear(2);
    }
    
    /**
     * Get <ease_in_out> value
     *
     * @return boolean
     */
    public function getEaseInOut(){
      return $this->_get(2);
    }
    
    /**
     * Set <ease_in_out> value
     *
     * @param boolean $value
     * @return \CUserMsg_Tilt
     */
    public function setEaseInOut( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <angle> has a value
     *
     * @return boolean
     */
    public function hasAngle(){
      return $this->_has(3);
    }
    
    /**
     * Clear <angle> value
     *
     * @return \CUserMsg_Tilt
     */
    public function clearAngle(){
      return $this->_clear(3);
    }
    
    /**
     * Get <angle> value
     *
     * @return \CMsgVector
     */
    public function getAngle(){
      return $this->_get(3);
    }
    
    /**
     * Set <angle> value
     *
     * @param \CMsgVector $value
     * @return \CUserMsg_Tilt
     */
    public function setAngle(\CMsgVector $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <duration> has a value
     *
     * @return boolean
     */
    public function hasDuration(){
      return $this->_has(4);
    }
    
    /**
     * Clear <duration> value
     *
     * @return \CUserMsg_Tilt
     */
    public function clearDuration(){
      return $this->_clear(4);
    }
    
    /**
     * Get <duration> value
     *
     * @return float
     */
    public function getDuration(){
      return $this->_get(4);
    }
    
    /**
     * Set <duration> value
     *
     * @param float $value
     * @return \CUserMsg_Tilt
     */
    public function setDuration( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <time> has a value
     *
     * @return boolean
     */
    public function hasTime(){
      return $this->_has(5);
    }
    
    /**
     * Clear <time> value
     *
     * @return \CUserMsg_Tilt
     */
    public function clearTime(){
      return $this->_clear(5);
    }
    
    /**
     * Get <time> value
     *
     * @return float
     */
    public function getTime(){
      return $this->_get(5);
    }
    
    /**
     * Set <time> value
     *
     * @param float $value
     * @return \CUserMsg_Tilt
     */
    public function setTime( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace  {

  class CUserMsg_SayText extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $client = null;
    
    /**  @var string */
    public $text = null;
    
    /**  @var boolean */
    public $chat = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CUserMsg_SayText');

      // OPTIONAL UINT32 client = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "client";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING text = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "text";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL chat = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "chat";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <client> has a value
     *
     * @return boolean
     */
    public function hasClient(){
      return $this->_has(1);
    }
    
    /**
     * Clear <client> value
     *
     * @return \CUserMsg_SayText
     */
    public function clearClient(){
      return $this->_clear(1);
    }
    
    /**
     * Get <client> value
     *
     * @return int
     */
    public function getClient(){
      return $this->_get(1);
    }
    
    /**
     * Set <client> value
     *
     * @param int $value
     * @return \CUserMsg_SayText
     */
    public function setClient( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <text> has a value
     *
     * @return boolean
     */
    public function hasText(){
      return $this->_has(2);
    }
    
    /**
     * Clear <text> value
     *
     * @return \CUserMsg_SayText
     */
    public function clearText(){
      return $this->_clear(2);
    }
    
    /**
     * Get <text> value
     *
     * @return string
     */
    public function getText(){
      return $this->_get(2);
    }
    
    /**
     * Set <text> value
     *
     * @param string $value
     * @return \CUserMsg_SayText
     */
    public function setText( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <chat> has a value
     *
     * @return boolean
     */
    public function hasChat(){
      return $this->_has(3);
    }
    
    /**
     * Clear <chat> value
     *
     * @return \CUserMsg_SayText
     */
    public function clearChat(){
      return $this->_clear(3);
    }
    
    /**
     * Get <chat> value
     *
     * @return boolean
     */
    public function getChat(){
      return $this->_get(3);
    }
    
    /**
     * Set <chat> value
     *
     * @param boolean $value
     * @return \CUserMsg_SayText
     */
    public function setChat( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace  {

  class CUserMsg_SayText2 extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $client = null;
    
    /**  @var boolean */
    public $chat = null;
    
    /**  @var string */
    public $format = null;
    
    /**  @var string */
    public $prefix = null;
    
    /**  @var string */
    public $text = null;
    
    /**  @var string */
    public $location = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CUserMsg_SayText2');

      // OPTIONAL UINT32 client = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "client";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL chat = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "chat";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING format = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "format";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING prefix = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "prefix";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING text = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "text";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING location = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "location";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <client> has a value
     *
     * @return boolean
     */
    public function hasClient(){
      return $this->_has(1);
    }
    
    /**
     * Clear <client> value
     *
     * @return \CUserMsg_SayText2
     */
    public function clearClient(){
      return $this->_clear(1);
    }
    
    /**
     * Get <client> value
     *
     * @return int
     */
    public function getClient(){
      return $this->_get(1);
    }
    
    /**
     * Set <client> value
     *
     * @param int $value
     * @return \CUserMsg_SayText2
     */
    public function setClient( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <chat> has a value
     *
     * @return boolean
     */
    public function hasChat(){
      return $this->_has(2);
    }
    
    /**
     * Clear <chat> value
     *
     * @return \CUserMsg_SayText2
     */
    public function clearChat(){
      return $this->_clear(2);
    }
    
    /**
     * Get <chat> value
     *
     * @return boolean
     */
    public function getChat(){
      return $this->_get(2);
    }
    
    /**
     * Set <chat> value
     *
     * @param boolean $value
     * @return \CUserMsg_SayText2
     */
    public function setChat( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <format> has a value
     *
     * @return boolean
     */
    public function hasFormat(){
      return $this->_has(3);
    }
    
    /**
     * Clear <format> value
     *
     * @return \CUserMsg_SayText2
     */
    public function clearFormat(){
      return $this->_clear(3);
    }
    
    /**
     * Get <format> value
     *
     * @return string
     */
    public function getFormat(){
      return $this->_get(3);
    }
    
    /**
     * Set <format> value
     *
     * @param string $value
     * @return \CUserMsg_SayText2
     */
    public function setFormat( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <prefix> has a value
     *
     * @return boolean
     */
    public function hasPrefix(){
      return $this->_has(4);
    }
    
    /**
     * Clear <prefix> value
     *
     * @return \CUserMsg_SayText2
     */
    public function clearPrefix(){
      return $this->_clear(4);
    }
    
    /**
     * Get <prefix> value
     *
     * @return string
     */
    public function getPrefix(){
      return $this->_get(4);
    }
    
    /**
     * Set <prefix> value
     *
     * @param string $value
     * @return \CUserMsg_SayText2
     */
    public function setPrefix( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <text> has a value
     *
     * @return boolean
     */
    public function hasText(){
      return $this->_has(5);
    }
    
    /**
     * Clear <text> value
     *
     * @return \CUserMsg_SayText2
     */
    public function clearText(){
      return $this->_clear(5);
    }
    
    /**
     * Get <text> value
     *
     * @return string
     */
    public function getText(){
      return $this->_get(5);
    }
    
    /**
     * Set <text> value
     *
     * @param string $value
     * @return \CUserMsg_SayText2
     */
    public function setText( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <location> has a value
     *
     * @return boolean
     */
    public function hasLocation(){
      return $this->_has(6);
    }
    
    /**
     * Clear <location> value
     *
     * @return \CUserMsg_SayText2
     */
    public function clearLocation(){
      return $this->_clear(6);
    }
    
    /**
     * Get <location> value
     *
     * @return string
     */
    public function getLocation(){
      return $this->_get(6);
    }
    
    /**
     * Set <location> value
     *
     * @param string $value
     * @return \CUserMsg_SayText2
     */
    public function setLocation( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace  {

  class CUserMsg_HudMsg extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $channel = null;
    
    /**  @var float */
    public $x = null;
    
    /**  @var float */
    public $y = null;
    
    /**  @var int */
    public $color1 = null;
    
    /**  @var int */
    public $color2 = null;
    
    /**  @var int */
    public $effect = null;
    
    /**  @var float */
    public $fade_in_time = null;
    
    /**  @var float */
    public $fade_out_time = null;
    
    /**  @var float */
    public $hold_time = null;
    
    /**  @var float */
    public $fx_time = null;
    
    /**  @var string */
    public $message = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CUserMsg_HudMsg');

      // OPTIONAL UINT32 channel = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "channel";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT x = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "x";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT y = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "y";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 color1 = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "color1";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 color2 = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "color2";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 effect = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "effect";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT fade_in_time = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "fade_in_time";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT fade_out_time = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "fade_out_time";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT hold_time = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "hold_time";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT fx_time = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "fx_time";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING message = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "message";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <channel> has a value
     *
     * @return boolean
     */
    public function hasChannel(){
      return $this->_has(1);
    }
    
    /**
     * Clear <channel> value
     *
     * @return \CUserMsg_HudMsg
     */
    public function clearChannel(){
      return $this->_clear(1);
    }
    
    /**
     * Get <channel> value
     *
     * @return int
     */
    public function getChannel(){
      return $this->_get(1);
    }
    
    /**
     * Set <channel> value
     *
     * @param int $value
     * @return \CUserMsg_HudMsg
     */
    public function setChannel( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <x> has a value
     *
     * @return boolean
     */
    public function hasX(){
      return $this->_has(2);
    }
    
    /**
     * Clear <x> value
     *
     * @return \CUserMsg_HudMsg
     */
    public function clearX(){
      return $this->_clear(2);
    }
    
    /**
     * Get <x> value
     *
     * @return float
     */
    public function getX(){
      return $this->_get(2);
    }
    
    /**
     * Set <x> value
     *
     * @param float $value
     * @return \CUserMsg_HudMsg
     */
    public function setX( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <y> has a value
     *
     * @return boolean
     */
    public function hasY(){
      return $this->_has(3);
    }
    
    /**
     * Clear <y> value
     *
     * @return \CUserMsg_HudMsg
     */
    public function clearY(){
      return $this->_clear(3);
    }
    
    /**
     * Get <y> value
     *
     * @return float
     */
    public function getY(){
      return $this->_get(3);
    }
    
    /**
     * Set <y> value
     *
     * @param float $value
     * @return \CUserMsg_HudMsg
     */
    public function setY( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <color1> has a value
     *
     * @return boolean
     */
    public function hasColor1(){
      return $this->_has(4);
    }
    
    /**
     * Clear <color1> value
     *
     * @return \CUserMsg_HudMsg
     */
    public function clearColor1(){
      return $this->_clear(4);
    }
    
    /**
     * Get <color1> value
     *
     * @return int
     */
    public function getColor1(){
      return $this->_get(4);
    }
    
    /**
     * Set <color1> value
     *
     * @param int $value
     * @return \CUserMsg_HudMsg
     */
    public function setColor1( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <color2> has a value
     *
     * @return boolean
     */
    public function hasColor2(){
      return $this->_has(5);
    }
    
    /**
     * Clear <color2> value
     *
     * @return \CUserMsg_HudMsg
     */
    public function clearColor2(){
      return $this->_clear(5);
    }
    
    /**
     * Get <color2> value
     *
     * @return int
     */
    public function getColor2(){
      return $this->_get(5);
    }
    
    /**
     * Set <color2> value
     *
     * @param int $value
     * @return \CUserMsg_HudMsg
     */
    public function setColor2( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <effect> has a value
     *
     * @return boolean
     */
    public function hasEffect(){
      return $this->_has(6);
    }
    
    /**
     * Clear <effect> value
     *
     * @return \CUserMsg_HudMsg
     */
    public function clearEffect(){
      return $this->_clear(6);
    }
    
    /**
     * Get <effect> value
     *
     * @return int
     */
    public function getEffect(){
      return $this->_get(6);
    }
    
    /**
     * Set <effect> value
     *
     * @param int $value
     * @return \CUserMsg_HudMsg
     */
    public function setEffect( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <fade_in_time> has a value
     *
     * @return boolean
     */
    public function hasFadeInTime(){
      return $this->_has(7);
    }
    
    /**
     * Clear <fade_in_time> value
     *
     * @return \CUserMsg_HudMsg
     */
    public function clearFadeInTime(){
      return $this->_clear(7);
    }
    
    /**
     * Get <fade_in_time> value
     *
     * @return float
     */
    public function getFadeInTime(){
      return $this->_get(7);
    }
    
    /**
     * Set <fade_in_time> value
     *
     * @param float $value
     * @return \CUserMsg_HudMsg
     */
    public function setFadeInTime( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <fade_out_time> has a value
     *
     * @return boolean
     */
    public function hasFadeOutTime(){
      return $this->_has(8);
    }
    
    /**
     * Clear <fade_out_time> value
     *
     * @return \CUserMsg_HudMsg
     */
    public function clearFadeOutTime(){
      return $this->_clear(8);
    }
    
    /**
     * Get <fade_out_time> value
     *
     * @return float
     */
    public function getFadeOutTime(){
      return $this->_get(8);
    }
    
    /**
     * Set <fade_out_time> value
     *
     * @param float $value
     * @return \CUserMsg_HudMsg
     */
    public function setFadeOutTime( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <hold_time> has a value
     *
     * @return boolean
     */
    public function hasHoldTime(){
      return $this->_has(9);
    }
    
    /**
     * Clear <hold_time> value
     *
     * @return \CUserMsg_HudMsg
     */
    public function clearHoldTime(){
      return $this->_clear(9);
    }
    
    /**
     * Get <hold_time> value
     *
     * @return float
     */
    public function getHoldTime(){
      return $this->_get(9);
    }
    
    /**
     * Set <hold_time> value
     *
     * @param float $value
     * @return \CUserMsg_HudMsg
     */
    public function setHoldTime( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <fx_time> has a value
     *
     * @return boolean
     */
    public function hasFxTime(){
      return $this->_has(10);
    }
    
    /**
     * Clear <fx_time> value
     *
     * @return \CUserMsg_HudMsg
     */
    public function clearFxTime(){
      return $this->_clear(10);
    }
    
    /**
     * Get <fx_time> value
     *
     * @return float
     */
    public function getFxTime(){
      return $this->_get(10);
    }
    
    /**
     * Set <fx_time> value
     *
     * @param float $value
     * @return \CUserMsg_HudMsg
     */
    public function setFxTime( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <message> has a value
     *
     * @return boolean
     */
    public function hasMessage(){
      return $this->_has(11);
    }
    
    /**
     * Clear <message> value
     *
     * @return \CUserMsg_HudMsg
     */
    public function clearMessage(){
      return $this->_clear(11);
    }
    
    /**
     * Get <message> value
     *
     * @return string
     */
    public function getMessage(){
      return $this->_get(11);
    }
    
    /**
     * Set <message> value
     *
     * @param string $value
     * @return \CUserMsg_HudMsg
     */
    public function setMessage( $value){
      return $this->_set(11, $value);
    }
  }
}

namespace  {

  class CUserMsg_HudText extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $message = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CUserMsg_HudText');

      // OPTIONAL STRING message = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "message";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <message> has a value
     *
     * @return boolean
     */
    public function hasMessage(){
      return $this->_has(1);
    }
    
    /**
     * Clear <message> value
     *
     * @return \CUserMsg_HudText
     */
    public function clearMessage(){
      return $this->_clear(1);
    }
    
    /**
     * Get <message> value
     *
     * @return string
     */
    public function getMessage(){
      return $this->_get(1);
    }
    
    /**
     * Set <message> value
     *
     * @param string $value
     * @return \CUserMsg_HudText
     */
    public function setMessage( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace  {

  class CUserMsg_TextMsg extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $dest = null;
    
    /**  @var string[]  */
    public $param = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CUserMsg_TextMsg');

      // OPTIONAL UINT32 dest = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "dest";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <dest> has a value
     *
     * @return boolean
     */
    public function hasDest(){
      return $this->_has(1);
    }
    
    /**
     * Clear <dest> value
     *
     * @return \CUserMsg_TextMsg
     */
    public function clearDest(){
      return $this->_clear(1);
    }
    
    /**
     * Get <dest> value
     *
     * @return int
     */
    public function getDest(){
      return $this->_get(1);
    }
    
    /**
     * Set <dest> value
     *
     * @param int $value
     * @return \CUserMsg_TextMsg
     */
    public function setDest( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \CUserMsg_TextMsg
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @param int $idx
     * @return string
     */
    public function getParam($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <param> value
     *
     * @param string $value
     * @return \CUserMsg_TextMsg
     */
    public function setParam( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <param>
     *
     * @return string[]
     */
    public function getParamList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <param>
     *
     * @param string $value
     * @return \CUserMsg_TextMsg
     */
    public function addParam( $value){
     return $this->_add(2, $value);
    }
  }
}

namespace  {

  class CUserMsg_GameTitle extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CUserMsg_GameTitle');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace  {

  class CUserMsg_ResetHUD extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CUserMsg_ResetHUD');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace  {

  class CUserMsg_SendAudio extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $stop = null;
    
    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CUserMsg_SendAudio');

      // OPTIONAL BOOL stop = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "stop";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <stop> has a value
     *
     * @return boolean
     */
    public function hasStop(){
      return $this->_has(2);
    }
    
    /**
     * Clear <stop> value
     *
     * @return \CUserMsg_SendAudio
     */
    public function clearStop(){
      return $this->_clear(2);
    }
    
    /**
     * Get <stop> value
     *
     * @return boolean
     */
    public function getStop(){
      return $this->_get(2);
    }
    
    /**
     * Set <stop> value
     *
     * @param boolean $value
     * @return \CUserMsg_SendAudio
     */
    public function setStop( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <name> value
     *
     * @return \CUserMsg_SendAudio
     */
    public function clearName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(3);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \CUserMsg_SendAudio
     */
    public function setName( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace  {

  class CUserMsg_VoiceMask extends \DrSlump\Protobuf\Message {

    /**  @var int[]  */
    public $audible_players_mask = array();
    
    /**  @var boolean */
    public $player_mod_enabled = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CUserMsg_VoiceMask');

      // REPEATED INT32 audible_players_mask = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "audible_players_mask";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL BOOL player_mod_enabled = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "player_mod_enabled";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <audible_players_mask> has a value
     *
     * @return boolean
     */
    public function hasAudiblePlayersMask(){
      return $this->_has(1);
    }
    
    /**
     * Clear <audible_players_mask> value
     *
     * @return \CUserMsg_VoiceMask
     */
    public function clearAudiblePlayersMask(){
      return $this->_clear(1);
    }
    
    /**
     * Get <audible_players_mask> value
     *
     * @param int $idx
     * @return int
     */
    public function getAudiblePlayersMask($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <audible_players_mask> value
     *
     * @param int $value
     * @return \CUserMsg_VoiceMask
     */
    public function setAudiblePlayersMask( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <audible_players_mask>
     *
     * @return int[]
     */
    public function getAudiblePlayersMaskList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <audible_players_mask>
     *
     * @param int $value
     * @return \CUserMsg_VoiceMask
     */
    public function addAudiblePlayersMask( $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <player_mod_enabled> has a value
     *
     * @return boolean
     */
    public function hasPlayerModEnabled(){
      return $this->_has(2);
    }
    
    /**
     * Clear <player_mod_enabled> value
     *
     * @return \CUserMsg_VoiceMask
     */
    public function clearPlayerModEnabled(){
      return $this->_clear(2);
    }
    
    /**
     * Get <player_mod_enabled> value
     *
     * @return boolean
     */
    public function getPlayerModEnabled(){
      return $this->_get(2);
    }
    
    /**
     * Set <player_mod_enabled> value
     *
     * @param boolean $value
     * @return \CUserMsg_VoiceMask
     */
    public function setPlayerModEnabled( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace  {

  class CUserMsg_RequestState extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CUserMsg_RequestState');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace  {

  class CUserMsg_HintText extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $message = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CUserMsg_HintText');

      // OPTIONAL STRING message = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "message";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <message> has a value
     *
     * @return boolean
     */
    public function hasMessage(){
      return $this->_has(1);
    }
    
    /**
     * Clear <message> value
     *
     * @return \CUserMsg_HintText
     */
    public function clearMessage(){
      return $this->_clear(1);
    }
    
    /**
     * Get <message> value
     *
     * @return string
     */
    public function getMessage(){
      return $this->_get(1);
    }
    
    /**
     * Set <message> value
     *
     * @param string $value
     * @return \CUserMsg_HintText
     */
    public function setMessage( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace  {

  class CUserMsg_KeyHintText extends \DrSlump\Protobuf\Message {

    /**  @var string[]  */
    public $messages = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CUserMsg_KeyHintText');

      // REPEATED STRING messages = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "messages";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <messages> has a value
     *
     * @return boolean
     */
    public function hasMessages(){
      return $this->_has(1);
    }
    
    /**
     * Clear <messages> value
     *
     * @return \CUserMsg_KeyHintText
     */
    public function clearMessages(){
      return $this->_clear(1);
    }
    
    /**
     * Get <messages> value
     *
     * @param int $idx
     * @return string
     */
    public function getMessages($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <messages> value
     *
     * @param string $value
     * @return \CUserMsg_KeyHintText
     */
    public function setMessages( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <messages>
     *
     * @return string[]
     */
    public function getMessagesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <messages>
     *
     * @param string $value
     * @return \CUserMsg_KeyHintText
     */
    public function addMessages( $value){
     return $this->_add(1, $value);
    }
  }
}

namespace  {

  class CUserMsg_StatsCrawlMsg extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CUserMsg_StatsCrawlMsg');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace  {

  class CUserMsg_StatsSkipState extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $num_skips = null;
    
    /**  @var int */
    public $num_players = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CUserMsg_StatsSkipState');

      // OPTIONAL INT32 num_skips = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "num_skips";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 num_players = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "num_players";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <num_skips> has a value
     *
     * @return boolean
     */
    public function hasNumSkips(){
      return $this->_has(1);
    }
    
    /**
     * Clear <num_skips> value
     *
     * @return \CUserMsg_StatsSkipState
     */
    public function clearNumSkips(){
      return $this->_clear(1);
    }
    
    /**
     * Get <num_skips> value
     *
     * @return int
     */
    public function getNumSkips(){
      return $this->_get(1);
    }
    
    /**
     * Set <num_skips> value
     *
     * @param int $value
     * @return \CUserMsg_StatsSkipState
     */
    public function setNumSkips( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <num_players> has a value
     *
     * @return boolean
     */
    public function hasNumPlayers(){
      return $this->_has(2);
    }
    
    /**
     * Clear <num_players> value
     *
     * @return \CUserMsg_StatsSkipState
     */
    public function clearNumPlayers(){
      return $this->_clear(2);
    }
    
    /**
     * Get <num_players> value
     *
     * @return int
     */
    public function getNumPlayers(){
      return $this->_get(2);
    }
    
    /**
     * Set <num_players> value
     *
     * @param int $value
     * @return \CUserMsg_StatsSkipState
     */
    public function setNumPlayers( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace  {

  class CUserMsg_VoiceSubtitle extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $ent_index = null;
    
    /**  @var int */
    public $menu = null;
    
    /**  @var int */
    public $item = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CUserMsg_VoiceSubtitle');

      // OPTIONAL INT32 ent_index = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "ent_index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 menu = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "menu";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 item = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "item";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <ent_index> has a value
     *
     * @return boolean
     */
    public function hasEntIndex(){
      return $this->_has(1);
    }
    
    /**
     * Clear <ent_index> value
     *
     * @return \CUserMsg_VoiceSubtitle
     */
    public function clearEntIndex(){
      return $this->_clear(1);
    }
    
    /**
     * Get <ent_index> value
     *
     * @return int
     */
    public function getEntIndex(){
      return $this->_get(1);
    }
    
    /**
     * Set <ent_index> value
     *
     * @param int $value
     * @return \CUserMsg_VoiceSubtitle
     */
    public function setEntIndex( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <menu> has a value
     *
     * @return boolean
     */
    public function hasMenu(){
      return $this->_has(2);
    }
    
    /**
     * Clear <menu> value
     *
     * @return \CUserMsg_VoiceSubtitle
     */
    public function clearMenu(){
      return $this->_clear(2);
    }
    
    /**
     * Get <menu> value
     *
     * @return int
     */
    public function getMenu(){
      return $this->_get(2);
    }
    
    /**
     * Set <menu> value
     *
     * @param int $value
     * @return \CUserMsg_VoiceSubtitle
     */
    public function setMenu( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <item> has a value
     *
     * @return boolean
     */
    public function hasItem(){
      return $this->_has(3);
    }
    
    /**
     * Clear <item> value
     *
     * @return \CUserMsg_VoiceSubtitle
     */
    public function clearItem(){
      return $this->_clear(3);
    }
    
    /**
     * Get <item> value
     *
     * @return int
     */
    public function getItem(){
      return $this->_get(3);
    }
    
    /**
     * Set <item> value
     *
     * @param int $value
     * @return \CUserMsg_VoiceSubtitle
     */
    public function setItem( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace CUserMsg_VGUIMenu {

  class Keys extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CUserMsg_VGUIMenu.Keys');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \CUserMsg_VGUIMenu\Keys
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \CUserMsg_VGUIMenu\Keys
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \CUserMsg_VGUIMenu\Keys
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \CUserMsg_VGUIMenu\Keys
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace  {

  class CUserMsg_VGUIMenu extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var boolean */
    public $show = null;
    
    /**  @var \CUserMsg_VGUIMenu\Keys[]  */
    public $keys = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CUserMsg_VGUIMenu');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL show = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "show";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE keys = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "keys";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\CUserMsg_VGUIMenu\Keys';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \CUserMsg_VGUIMenu
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \CUserMsg_VGUIMenu
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <show> has a value
     *
     * @return boolean
     */
    public function hasShow(){
      return $this->_has(2);
    }
    
    /**
     * Clear <show> value
     *
     * @return \CUserMsg_VGUIMenu
     */
    public function clearShow(){
      return $this->_clear(2);
    }
    
    /**
     * Get <show> value
     *
     * @return boolean
     */
    public function getShow(){
      return $this->_get(2);
    }
    
    /**
     * Set <show> value
     *
     * @param boolean $value
     * @return \CUserMsg_VGUIMenu
     */
    public function setShow( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <keys> has a value
     *
     * @return boolean
     */
    public function hasKeys(){
      return $this->_has(3);
    }
    
    /**
     * Clear <keys> value
     *
     * @return \CUserMsg_VGUIMenu
     */
    public function clearKeys(){
      return $this->_clear(3);
    }
    
    /**
     * Get <keys> value
     *
     * @param int $idx
     * @return \CUserMsg_VGUIMenu\Keys
     */
    public function getKeys($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <keys> value
     *
     * @param \CUserMsg_VGUIMenu\Keys $value
     * @return \CUserMsg_VGUIMenu
     */
    public function setKeys(\CUserMsg_VGUIMenu\Keys $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <keys>
     *
     * @return \CUserMsg_VGUIMenu\Keys[]
     */
    public function getKeysList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <keys>
     *
     * @param \CUserMsg_VGUIMenu\Keys $value
     * @return \CUserMsg_VGUIMenu
     */
    public function addKeys(\CUserMsg_VGUIMenu\Keys $value){
     return $this->_add(3, $value);
    }
  }
}

namespace  {

  class CUserMsg_Geiger extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $range = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CUserMsg_Geiger');

      // OPTIONAL INT32 range = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "range";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <range> has a value
     *
     * @return boolean
     */
    public function hasRange(){
      return $this->_has(1);
    }
    
    /**
     * Clear <range> value
     *
     * @return \CUserMsg_Geiger
     */
    public function clearRange(){
      return $this->_clear(1);
    }
    
    /**
     * Get <range> value
     *
     * @return int
     */
    public function getRange(){
      return $this->_get(1);
    }
    
    /**
     * Set <range> value
     *
     * @param int $value
     * @return \CUserMsg_Geiger
     */
    public function setRange( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace  {

  class CUserMsg_Rumble extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $index = null;
    
    /**  @var int */
    public $data = null;
    
    /**  @var int */
    public $flags = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CUserMsg_Rumble');

      // OPTIONAL INT32 index = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 data = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "data";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 flags = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "flags";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(1);
    }
    
    /**
     * Clear <index> value
     *
     * @return \CUserMsg_Rumble
     */
    public function clearIndex(){
      return $this->_clear(1);
    }
    
    /**
     * Get <index> value
     *
     * @return int
     */
    public function getIndex(){
      return $this->_get(1);
    }
    
    /**
     * Set <index> value
     *
     * @param int $value
     * @return \CUserMsg_Rumble
     */
    public function setIndex( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <data> has a value
     *
     * @return boolean
     */
    public function hasData(){
      return $this->_has(2);
    }
    
    /**
     * Clear <data> value
     *
     * @return \CUserMsg_Rumble
     */
    public function clearData(){
      return $this->_clear(2);
    }
    
    /**
     * Get <data> value
     *
     * @return int
     */
    public function getData(){
      return $this->_get(2);
    }
    
    /**
     * Set <data> value
     *
     * @param int $value
     * @return \CUserMsg_Rumble
     */
    public function setData( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <flags> has a value
     *
     * @return boolean
     */
    public function hasFlags(){
      return $this->_has(3);
    }
    
    /**
     * Clear <flags> value
     *
     * @return \CUserMsg_Rumble
     */
    public function clearFlags(){
      return $this->_clear(3);
    }
    
    /**
     * Get <flags> value
     *
     * @return int
     */
    public function getFlags(){
      return $this->_get(3);
    }
    
    /**
     * Set <flags> value
     *
     * @param int $value
     * @return \CUserMsg_Rumble
     */
    public function setFlags( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace  {

  class CUserMsg_Train extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $train = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CUserMsg_Train');

      // OPTIONAL INT32 train = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "train";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <train> has a value
     *
     * @return boolean
     */
    public function hasTrain(){
      return $this->_has(1);
    }
    
    /**
     * Clear <train> value
     *
     * @return \CUserMsg_Train
     */
    public function clearTrain(){
      return $this->_clear(1);
    }
    
    /**
     * Get <train> value
     *
     * @return int
     */
    public function getTrain(){
      return $this->_get(1);
    }
    
    /**
     * Set <train> value
     *
     * @param int $value
     * @return \CUserMsg_Train
     */
    public function setTrain( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace  {

  class CUserMsg_SayTextChannel extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $player = null;
    
    /**  @var int */
    public $channel = null;
    
    /**  @var string */
    public $text = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CUserMsg_SayTextChannel');

      // OPTIONAL INT32 player = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "player";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 channel = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "channel";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING text = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "text";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <player> has a value
     *
     * @return boolean
     */
    public function hasPlayer(){
      return $this->_has(1);
    }
    
    /**
     * Clear <player> value
     *
     * @return \CUserMsg_SayTextChannel
     */
    public function clearPlayer(){
      return $this->_clear(1);
    }
    
    /**
     * Get <player> value
     *
     * @return int
     */
    public function getPlayer(){
      return $this->_get(1);
    }
    
    /**
     * Set <player> value
     *
     * @param int $value
     * @return \CUserMsg_SayTextChannel
     */
    public function setPlayer( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <channel> has a value
     *
     * @return boolean
     */
    public function hasChannel(){
      return $this->_has(2);
    }
    
    /**
     * Clear <channel> value
     *
     * @return \CUserMsg_SayTextChannel
     */
    public function clearChannel(){
      return $this->_clear(2);
    }
    
    /**
     * Get <channel> value
     *
     * @return int
     */
    public function getChannel(){
      return $this->_get(2);
    }
    
    /**
     * Set <channel> value
     *
     * @param int $value
     * @return \CUserMsg_SayTextChannel
     */
    public function setChannel( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <text> has a value
     *
     * @return boolean
     */
    public function hasText(){
      return $this->_has(3);
    }
    
    /**
     * Clear <text> value
     *
     * @return \CUserMsg_SayTextChannel
     */
    public function clearText(){
      return $this->_clear(3);
    }
    
    /**
     * Get <text> value
     *
     * @return string
     */
    public function getText(){
      return $this->_get(3);
    }
    
    /**
     * Set <text> value
     *
     * @param string $value
     * @return \CUserMsg_SayTextChannel
     */
    public function setText( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace  {

  class CUserMsg_MessageText extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $color = null;
    
    /**  @var string */
    public $text = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CUserMsg_MessageText');

      // OPTIONAL UINT32 color = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "color";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING text = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "text";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <color> has a value
     *
     * @return boolean
     */
    public function hasColor(){
      return $this->_has(1);
    }
    
    /**
     * Clear <color> value
     *
     * @return \CUserMsg_MessageText
     */
    public function clearColor(){
      return $this->_clear(1);
    }
    
    /**
     * Get <color> value
     *
     * @return int
     */
    public function getColor(){
      return $this->_get(1);
    }
    
    /**
     * Set <color> value
     *
     * @param int $value
     * @return \CUserMsg_MessageText
     */
    public function setColor( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <text> has a value
     *
     * @return boolean
     */
    public function hasText(){
      return $this->_has(2);
    }
    
    /**
     * Clear <text> value
     *
     * @return \CUserMsg_MessageText
     */
    public function clearText(){
      return $this->_clear(2);
    }
    
    /**
     * Get <text> value
     *
     * @return string
     */
    public function getText(){
      return $this->_get(2);
    }
    
    /**
     * Set <text> value
     *
     * @param string $value
     * @return \CUserMsg_MessageText
     */
    public function setText( $value){
      return $this->_set(2, $value);
    }
  }
}

