<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: google/protobuf/descriptor.proto
//   Date: 2012-04-27 16:14:33

namespace google\protobuf {

  class FileDescriptorProto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $package = null;
    
    /**  @var string[]  */
    public $dependency = array();
    
    /**  @var \google\protobuf\DescriptorProto[]  */
    public $message_type = array();
    
    /**  @var \google\protobuf\EnumDescriptorProto[]  */
    public $enum_type = array();
    
    /**  @var \google\protobuf\ServiceDescriptorProto[]  */
    public $service = array();
    
    /**  @var \google\protobuf\FieldDescriptorProto[]  */
    public $extension = array();
    
    /**  @var \google\protobuf\FileOptions */
    public $options = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.FileDescriptorProto');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING package = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "package";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING dependency = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "dependency";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE message_type = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "message_type";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\protobuf\DescriptorProto';
      $descriptor->addField($f);

      // REPEATED MESSAGE enum_type = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "enum_type";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\protobuf\EnumDescriptorProto';
      $descriptor->addField($f);

      // REPEATED MESSAGE service = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "service";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\protobuf\ServiceDescriptorProto';
      $descriptor->addField($f);

      // REPEATED MESSAGE extension = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "extension";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\protobuf\FieldDescriptorProto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE options = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "options";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\FileOptions';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\protobuf\FileDescriptorProto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\protobuf\FileDescriptorProto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <package> has a value
     *
     * @return boolean
     */
    public function hasPackage(){
      return $this->_has(2);
    }
    
    /**
     * Clear <package> value
     *
     * @return \google\protobuf\FileDescriptorProto
     */
    public function clearPackage(){
      return $this->_clear(2);
    }
    
    /**
     * Get <package> value
     *
     * @return string
     */
    public function getPackage(){
      return $this->_get(2);
    }
    
    /**
     * Set <package> value
     *
     * @param string $value
     * @return \google\protobuf\FileDescriptorProto
     */
    public function setPackage( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <dependency> has a value
     *
     * @return boolean
     */
    public function hasDependency(){
      return $this->_has(3);
    }
    
    /**
     * Clear <dependency> value
     *
     * @return \google\protobuf\FileDescriptorProto
     */
    public function clearDependency(){
      return $this->_clear(3);
    }
    
    /**
     * Get <dependency> value
     *
     * @param int $idx
     * @return string
     */
    public function getDependency($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <dependency> value
     *
     * @param string $value
     * @return \google\protobuf\FileDescriptorProto
     */
    public function setDependency( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <dependency>
     *
     * @return string[]
     */
    public function getDependencyList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <dependency>
     *
     * @param string $value
     * @return \google\protobuf\FileDescriptorProto
     */
    public function addDependency( $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <message_type> has a value
     *
     * @return boolean
     */
    public function hasMessageType(){
      return $this->_has(4);
    }
    
    /**
     * Clear <message_type> value
     *
     * @return \google\protobuf\FileDescriptorProto
     */
    public function clearMessageType(){
      return $this->_clear(4);
    }
    
    /**
     * Get <message_type> value
     *
     * @param int $idx
     * @return \google\protobuf\DescriptorProto
     */
    public function getMessageType($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <message_type> value
     *
     * @param \google\protobuf\DescriptorProto $value
     * @return \google\protobuf\FileDescriptorProto
     */
    public function setMessageType(\google\protobuf\DescriptorProto $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <message_type>
     *
     * @return \google\protobuf\DescriptorProto[]
     */
    public function getMessageTypeList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <message_type>
     *
     * @param \google\protobuf\DescriptorProto $value
     * @return \google\protobuf\FileDescriptorProto
     */
    public function addMessageType(\google\protobuf\DescriptorProto $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <enum_type> has a value
     *
     * @return boolean
     */
    public function hasEnumType(){
      return $this->_has(5);
    }
    
    /**
     * Clear <enum_type> value
     *
     * @return \google\protobuf\FileDescriptorProto
     */
    public function clearEnumType(){
      return $this->_clear(5);
    }
    
    /**
     * Get <enum_type> value
     *
     * @param int $idx
     * @return \google\protobuf\EnumDescriptorProto
     */
    public function getEnumType($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <enum_type> value
     *
     * @param \google\protobuf\EnumDescriptorProto $value
     * @return \google\protobuf\FileDescriptorProto
     */
    public function setEnumType(\google\protobuf\EnumDescriptorProto $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <enum_type>
     *
     * @return \google\protobuf\EnumDescriptorProto[]
     */
    public function getEnumTypeList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <enum_type>
     *
     * @param \google\protobuf\EnumDescriptorProto $value
     * @return \google\protobuf\FileDescriptorProto
     */
    public function addEnumType(\google\protobuf\EnumDescriptorProto $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <service> has a value
     *
     * @return boolean
     */
    public function hasService(){
      return $this->_has(6);
    }
    
    /**
     * Clear <service> value
     *
     * @return \google\protobuf\FileDescriptorProto
     */
    public function clearService(){
      return $this->_clear(6);
    }
    
    /**
     * Get <service> value
     *
     * @param int $idx
     * @return \google\protobuf\ServiceDescriptorProto
     */
    public function getService($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <service> value
     *
     * @param \google\protobuf\ServiceDescriptorProto $value
     * @return \google\protobuf\FileDescriptorProto
     */
    public function setService(\google\protobuf\ServiceDescriptorProto $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <service>
     *
     * @return \google\protobuf\ServiceDescriptorProto[]
     */
    public function getServiceList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <service>
     *
     * @param \google\protobuf\ServiceDescriptorProto $value
     * @return \google\protobuf\FileDescriptorProto
     */
    public function addService(\google\protobuf\ServiceDescriptorProto $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <extension> has a value
     *
     * @return boolean
     */
    public function hasExtension(){
      return $this->_has(7);
    }
    
    /**
     * Clear <extension> value
     *
     * @return \google\protobuf\FileDescriptorProto
     */
    public function clearExtension(){
      return $this->_clear(7);
    }
    
    /**
     * Get <extension> value
     *
     * @param int $idx
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function getExtension($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <extension> value
     *
     * @param \google\protobuf\FieldDescriptorProto $value
     * @return \google\protobuf\FileDescriptorProto
     */
    public function setExtension(\google\protobuf\FieldDescriptorProto $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <extension>
     *
     * @return \google\protobuf\FieldDescriptorProto[]
     */
    public function getExtensionList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <extension>
     *
     * @param \google\protobuf\FieldDescriptorProto $value
     * @return \google\protobuf\FileDescriptorProto
     */
    public function addExtension(\google\protobuf\FieldDescriptorProto $value){
     return $this->_add(7, $value);
    }
    
    /**
     * Check if <options> has a value
     *
     * @return boolean
     */
    public function hasOptions(){
      return $this->_has(8);
    }
    
    /**
     * Clear <options> value
     *
     * @return \google\protobuf\FileDescriptorProto
     */
    public function clearOptions(){
      return $this->_clear(8);
    }
    
    /**
     * Get <options> value
     *
     * @return \google\protobuf\FileOptions
     */
    public function getOptions(){
      return $this->_get(8);
    }
    
    /**
     * Set <options> value
     *
     * @param \google\protobuf\FileOptions $value
     * @return \google\protobuf\FileDescriptorProto
     */
    public function setOptions(\google\protobuf\FileOptions $value){
      return $this->_set(8, $value);
    }
  }
}

namespace google\protobuf\DescriptorProto {

  class ExtensionRange extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $start = null;
    
    /**  @var int */
    public $end = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.DescriptorProto.ExtensionRange');

      // OPTIONAL INT32 start = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "start";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 end = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "end";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <start> has a value
     *
     * @return boolean
     */
    public function hasStart(){
      return $this->_has(1);
    }
    
    /**
     * Clear <start> value
     *
     * @return \google\protobuf\DescriptorProto\ExtensionRange
     */
    public function clearStart(){
      return $this->_clear(1);
    }
    
    /**
     * Get <start> value
     *
     * @return int
     */
    public function getStart(){
      return $this->_get(1);
    }
    
    /**
     * Set <start> value
     *
     * @param int $value
     * @return \google\protobuf\DescriptorProto\ExtensionRange
     */
    public function setStart( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <end> has a value
     *
     * @return boolean
     */
    public function hasEnd(){
      return $this->_has(2);
    }
    
    /**
     * Clear <end> value
     *
     * @return \google\protobuf\DescriptorProto\ExtensionRange
     */
    public function clearEnd(){
      return $this->_clear(2);
    }
    
    /**
     * Get <end> value
     *
     * @return int
     */
    public function getEnd(){
      return $this->_get(2);
    }
    
    /**
     * Set <end> value
     *
     * @param int $value
     * @return \google\protobuf\DescriptorProto\ExtensionRange
     */
    public function setEnd( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\protobuf {

  class DescriptorProto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var \google\protobuf\FieldDescriptorProto[]  */
    public $field = array();
    
    /**  @var \google\protobuf\FieldDescriptorProto[]  */
    public $extension = array();
    
    /**  @var \google\protobuf\DescriptorProto[]  */
    public $nested_type = array();
    
    /**  @var \google\protobuf\EnumDescriptorProto[]  */
    public $enum_type = array();
    
    /**  @var \google\protobuf\DescriptorProto\ExtensionRange[]  */
    public $extension_range = array();
    
    /**  @var \google\protobuf\MessageOptions */
    public $options = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.DescriptorProto');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE field = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "field";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\protobuf\FieldDescriptorProto';
      $descriptor->addField($f);

      // REPEATED MESSAGE extension = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "extension";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\protobuf\FieldDescriptorProto';
      $descriptor->addField($f);

      // REPEATED MESSAGE nested_type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "nested_type";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\protobuf\DescriptorProto';
      $descriptor->addField($f);

      // REPEATED MESSAGE enum_type = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "enum_type";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\protobuf\EnumDescriptorProto';
      $descriptor->addField($f);

      // REPEATED MESSAGE extension_range = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "extension_range";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\protobuf\DescriptorProto\ExtensionRange';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE options = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "options";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\MessageOptions';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\protobuf\DescriptorProto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\protobuf\DescriptorProto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <field> has a value
     *
     * @return boolean
     */
    public function hasField(){
      return $this->_has(2);
    }
    
    /**
     * Clear <field> value
     *
     * @return \google\protobuf\DescriptorProto
     */
    public function clearField(){
      return $this->_clear(2);
    }
    
    /**
     * Get <field> value
     *
     * @param int $idx
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function getField($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <field> value
     *
     * @param \google\protobuf\FieldDescriptorProto $value
     * @return \google\protobuf\DescriptorProto
     */
    public function setField(\google\protobuf\FieldDescriptorProto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <field>
     *
     * @return \google\protobuf\FieldDescriptorProto[]
     */
    public function getFieldList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <field>
     *
     * @param \google\protobuf\FieldDescriptorProto $value
     * @return \google\protobuf\DescriptorProto
     */
    public function addField(\google\protobuf\FieldDescriptorProto $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <extension> has a value
     *
     * @return boolean
     */
    public function hasExtension(){
      return $this->_has(6);
    }
    
    /**
     * Clear <extension> value
     *
     * @return \google\protobuf\DescriptorProto
     */
    public function clearExtension(){
      return $this->_clear(6);
    }
    
    /**
     * Get <extension> value
     *
     * @param int $idx
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function getExtension($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <extension> value
     *
     * @param \google\protobuf\FieldDescriptorProto $value
     * @return \google\protobuf\DescriptorProto
     */
    public function setExtension(\google\protobuf\FieldDescriptorProto $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <extension>
     *
     * @return \google\protobuf\FieldDescriptorProto[]
     */
    public function getExtensionList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <extension>
     *
     * @param \google\protobuf\FieldDescriptorProto $value
     * @return \google\protobuf\DescriptorProto
     */
    public function addExtension(\google\protobuf\FieldDescriptorProto $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <nested_type> has a value
     *
     * @return boolean
     */
    public function hasNestedType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <nested_type> value
     *
     * @return \google\protobuf\DescriptorProto
     */
    public function clearNestedType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <nested_type> value
     *
     * @param int $idx
     * @return \google\protobuf\DescriptorProto
     */
    public function getNestedType($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <nested_type> value
     *
     * @param \google\protobuf\DescriptorProto $value
     * @return \google\protobuf\DescriptorProto
     */
    public function setNestedType(\google\protobuf\DescriptorProto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <nested_type>
     *
     * @return \google\protobuf\DescriptorProto[]
     */
    public function getNestedTypeList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <nested_type>
     *
     * @param \google\protobuf\DescriptorProto $value
     * @return \google\protobuf\DescriptorProto
     */
    public function addNestedType(\google\protobuf\DescriptorProto $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <enum_type> has a value
     *
     * @return boolean
     */
    public function hasEnumType(){
      return $this->_has(4);
    }
    
    /**
     * Clear <enum_type> value
     *
     * @return \google\protobuf\DescriptorProto
     */
    public function clearEnumType(){
      return $this->_clear(4);
    }
    
    /**
     * Get <enum_type> value
     *
     * @param int $idx
     * @return \google\protobuf\EnumDescriptorProto
     */
    public function getEnumType($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <enum_type> value
     *
     * @param \google\protobuf\EnumDescriptorProto $value
     * @return \google\protobuf\DescriptorProto
     */
    public function setEnumType(\google\protobuf\EnumDescriptorProto $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <enum_type>
     *
     * @return \google\protobuf\EnumDescriptorProto[]
     */
    public function getEnumTypeList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <enum_type>
     *
     * @param \google\protobuf\EnumDescriptorProto $value
     * @return \google\protobuf\DescriptorProto
     */
    public function addEnumType(\google\protobuf\EnumDescriptorProto $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <extension_range> has a value
     *
     * @return boolean
     */
    public function hasExtensionRange(){
      return $this->_has(5);
    }
    
    /**
     * Clear <extension_range> value
     *
     * @return \google\protobuf\DescriptorProto
     */
    public function clearExtensionRange(){
      return $this->_clear(5);
    }
    
    /**
     * Get <extension_range> value
     *
     * @param int $idx
     * @return \google\protobuf\DescriptorProto\ExtensionRange
     */
    public function getExtensionRange($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <extension_range> value
     *
     * @param \google\protobuf\DescriptorProto\ExtensionRange $value
     * @return \google\protobuf\DescriptorProto
     */
    public function setExtensionRange(\google\protobuf\DescriptorProto\ExtensionRange $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <extension_range>
     *
     * @return \google\protobuf\DescriptorProto\ExtensionRange[]
     */
    public function getExtensionRangeList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <extension_range>
     *
     * @param \google\protobuf\DescriptorProto\ExtensionRange $value
     * @return \google\protobuf\DescriptorProto
     */
    public function addExtensionRange(\google\protobuf\DescriptorProto\ExtensionRange $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <options> has a value
     *
     * @return boolean
     */
    public function hasOptions(){
      return $this->_has(7);
    }
    
    /**
     * Clear <options> value
     *
     * @return \google\protobuf\DescriptorProto
     */
    public function clearOptions(){
      return $this->_clear(7);
    }
    
    /**
     * Get <options> value
     *
     * @return \google\protobuf\MessageOptions
     */
    public function getOptions(){
      return $this->_get(7);
    }
    
    /**
     * Set <options> value
     *
     * @param \google\protobuf\MessageOptions $value
     * @return \google\protobuf\DescriptorProto
     */
    public function setOptions(\google\protobuf\MessageOptions $value){
      return $this->_set(7, $value);
    }
  }
}

namespace google\protobuf\FieldDescriptorProto {

  class Type extends \DrSlump\Protobuf\Enum {
    const TYPE_DOUBLE = 1;
    const TYPE_FLOAT = 2;
    const TYPE_INT64 = 3;
    const TYPE_UINT64 = 4;
    const TYPE_INT32 = 5;
    const TYPE_FIXED64 = 6;
    const TYPE_FIXED32 = 7;
    const TYPE_BOOL = 8;
    const TYPE_STRING = 9;
    const TYPE_GROUP = 10;
    const TYPE_MESSAGE = 11;
    const TYPE_BYTES = 12;
    const TYPE_UINT32 = 13;
    const TYPE_ENUM = 14;
    const TYPE_SFIXED32 = 15;
    const TYPE_SFIXED64 = 16;
    const TYPE_SINT32 = 17;
    const TYPE_SINT64 = 18;
  }
}
namespace google\protobuf\FieldDescriptorProto {

  class Label extends \DrSlump\Protobuf\Enum {
    const LABEL_OPTIONAL = 1;
    const LABEL_REQUIRED = 2;
    const LABEL_REPEATED = 3;
  }
}
namespace google\protobuf {

  class FieldDescriptorProto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $number = null;
    
    /**  @var int - \google\protobuf\FieldDescriptorProto\Label */
    public $label = null;
    
    /**  @var int - \google\protobuf\FieldDescriptorProto\Type */
    public $type = null;
    
    /**  @var string */
    public $type_name = null;
    
    /**  @var string */
    public $extendee = null;
    
    /**  @var string */
    public $default_value = null;
    
    /**  @var \google\protobuf\FieldOptions */
    public $options = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.FieldDescriptorProto');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 number = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "number";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM label = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "label";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\FieldDescriptorProto\Label';
      $descriptor->addField($f);

      // OPTIONAL ENUM type = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\FieldDescriptorProto\Type';
      $descriptor->addField($f);

      // OPTIONAL STRING type_name = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "type_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING extendee = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "extendee";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING default_value = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "default_value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE options = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "options";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\FieldOptions';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <number> has a value
     *
     * @return boolean
     */
    public function hasNumber(){
      return $this->_has(3);
    }
    
    /**
     * Clear <number> value
     *
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function clearNumber(){
      return $this->_clear(3);
    }
    
    /**
     * Get <number> value
     *
     * @return int
     */
    public function getNumber(){
      return $this->_get(3);
    }
    
    /**
     * Set <number> value
     *
     * @param int $value
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function setNumber( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <label> has a value
     *
     * @return boolean
     */
    public function hasLabel(){
      return $this->_has(4);
    }
    
    /**
     * Clear <label> value
     *
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function clearLabel(){
      return $this->_clear(4);
    }
    
    /**
     * Get <label> value
     *
     * @return int - \google\protobuf\FieldDescriptorProto\Label
     */
    public function getLabel(){
      return $this->_get(4);
    }
    
    /**
     * Set <label> value
     *
     * @param int - \google\protobuf\FieldDescriptorProto\Label $value
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function setLabel( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(5);
    }
    
    /**
     * Clear <type> value
     *
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function clearType(){
      return $this->_clear(5);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \google\protobuf\FieldDescriptorProto\Type
     */
    public function getType(){
      return $this->_get(5);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \google\protobuf\FieldDescriptorProto\Type $value
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function setType( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <type_name> has a value
     *
     * @return boolean
     */
    public function hasTypeName(){
      return $this->_has(6);
    }
    
    /**
     * Clear <type_name> value
     *
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function clearTypeName(){
      return $this->_clear(6);
    }
    
    /**
     * Get <type_name> value
     *
     * @return string
     */
    public function getTypeName(){
      return $this->_get(6);
    }
    
    /**
     * Set <type_name> value
     *
     * @param string $value
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function setTypeName( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <extendee> has a value
     *
     * @return boolean
     */
    public function hasExtendee(){
      return $this->_has(2);
    }
    
    /**
     * Clear <extendee> value
     *
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function clearExtendee(){
      return $this->_clear(2);
    }
    
    /**
     * Get <extendee> value
     *
     * @return string
     */
    public function getExtendee(){
      return $this->_get(2);
    }
    
    /**
     * Set <extendee> value
     *
     * @param string $value
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function setExtendee( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <default_value> has a value
     *
     * @return boolean
     */
    public function hasDefaultValue(){
      return $this->_has(7);
    }
    
    /**
     * Clear <default_value> value
     *
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function clearDefaultValue(){
      return $this->_clear(7);
    }
    
    /**
     * Get <default_value> value
     *
     * @return string
     */
    public function getDefaultValue(){
      return $this->_get(7);
    }
    
    /**
     * Set <default_value> value
     *
     * @param string $value
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function setDefaultValue( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <options> has a value
     *
     * @return boolean
     */
    public function hasOptions(){
      return $this->_has(8);
    }
    
    /**
     * Clear <options> value
     *
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function clearOptions(){
      return $this->_clear(8);
    }
    
    /**
     * Get <options> value
     *
     * @return \google\protobuf\FieldOptions
     */
    public function getOptions(){
      return $this->_get(8);
    }
    
    /**
     * Set <options> value
     *
     * @param \google\protobuf\FieldOptions $value
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function setOptions(\google\protobuf\FieldOptions $value){
      return $this->_set(8, $value);
    }
  }
}

namespace google\protobuf {

  class EnumDescriptorProto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var \google\protobuf\EnumValueDescriptorProto[]  */
    public $value = array();
    
    /**  @var \google\protobuf\EnumOptions */
    public $options = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.EnumDescriptorProto');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\protobuf\EnumValueDescriptorProto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE options = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "options";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\EnumOptions';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\protobuf\EnumDescriptorProto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\protobuf\EnumDescriptorProto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\protobuf\EnumDescriptorProto
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @param int $idx
     * @return \google\protobuf\EnumValueDescriptorProto
     */
    public function getValue($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <value> value
     *
     * @param \google\protobuf\EnumValueDescriptorProto $value
     * @return \google\protobuf\EnumDescriptorProto
     */
    public function setValue(\google\protobuf\EnumValueDescriptorProto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <value>
     *
     * @return \google\protobuf\EnumValueDescriptorProto[]
     */
    public function getValueList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <value>
     *
     * @param \google\protobuf\EnumValueDescriptorProto $value
     * @return \google\protobuf\EnumDescriptorProto
     */
    public function addValue(\google\protobuf\EnumValueDescriptorProto $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <options> has a value
     *
     * @return boolean
     */
    public function hasOptions(){
      return $this->_has(3);
    }
    
    /**
     * Clear <options> value
     *
     * @return \google\protobuf\EnumDescriptorProto
     */
    public function clearOptions(){
      return $this->_clear(3);
    }
    
    /**
     * Get <options> value
     *
     * @return \google\protobuf\EnumOptions
     */
    public function getOptions(){
      return $this->_get(3);
    }
    
    /**
     * Set <options> value
     *
     * @param \google\protobuf\EnumOptions $value
     * @return \google\protobuf\EnumDescriptorProto
     */
    public function setOptions(\google\protobuf\EnumOptions $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\protobuf {

  class EnumValueDescriptorProto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $number = null;
    
    /**  @var \google\protobuf\EnumValueOptions */
    public $options = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.EnumValueDescriptorProto');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 number = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "number";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE options = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "options";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\EnumValueOptions';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\protobuf\EnumValueDescriptorProto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\protobuf\EnumValueDescriptorProto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <number> has a value
     *
     * @return boolean
     */
    public function hasNumber(){
      return $this->_has(2);
    }
    
    /**
     * Clear <number> value
     *
     * @return \google\protobuf\EnumValueDescriptorProto
     */
    public function clearNumber(){
      return $this->_clear(2);
    }
    
    /**
     * Get <number> value
     *
     * @return int
     */
    public function getNumber(){
      return $this->_get(2);
    }
    
    /**
     * Set <number> value
     *
     * @param int $value
     * @return \google\protobuf\EnumValueDescriptorProto
     */
    public function setNumber( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <options> has a value
     *
     * @return boolean
     */
    public function hasOptions(){
      return $this->_has(3);
    }
    
    /**
     * Clear <options> value
     *
     * @return \google\protobuf\EnumValueDescriptorProto
     */
    public function clearOptions(){
      return $this->_clear(3);
    }
    
    /**
     * Get <options> value
     *
     * @return \google\protobuf\EnumValueOptions
     */
    public function getOptions(){
      return $this->_get(3);
    }
    
    /**
     * Set <options> value
     *
     * @param \google\protobuf\EnumValueOptions $value
     * @return \google\protobuf\EnumValueDescriptorProto
     */
    public function setOptions(\google\protobuf\EnumValueOptions $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\protobuf {

  class ServiceDescriptorProto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var \google\protobuf\MethodDescriptorProto[]  */
    public $method = array();
    
    /**  @var \google\protobuf\ServiceOptions */
    public $options = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.ServiceDescriptorProto');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE method = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "method";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\protobuf\MethodDescriptorProto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE options = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "options";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\ServiceOptions';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\protobuf\ServiceDescriptorProto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\protobuf\ServiceDescriptorProto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <method> has a value
     *
     * @return boolean
     */
    public function hasMethod(){
      return $this->_has(2);
    }
    
    /**
     * Clear <method> value
     *
     * @return \google\protobuf\ServiceDescriptorProto
     */
    public function clearMethod(){
      return $this->_clear(2);
    }
    
    /**
     * Get <method> value
     *
     * @param int $idx
     * @return \google\protobuf\MethodDescriptorProto
     */
    public function getMethod($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <method> value
     *
     * @param \google\protobuf\MethodDescriptorProto $value
     * @return \google\protobuf\ServiceDescriptorProto
     */
    public function setMethod(\google\protobuf\MethodDescriptorProto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <method>
     *
     * @return \google\protobuf\MethodDescriptorProto[]
     */
    public function getMethodList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <method>
     *
     * @param \google\protobuf\MethodDescriptorProto $value
     * @return \google\protobuf\ServiceDescriptorProto
     */
    public function addMethod(\google\protobuf\MethodDescriptorProto $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <options> has a value
     *
     * @return boolean
     */
    public function hasOptions(){
      return $this->_has(3);
    }
    
    /**
     * Clear <options> value
     *
     * @return \google\protobuf\ServiceDescriptorProto
     */
    public function clearOptions(){
      return $this->_clear(3);
    }
    
    /**
     * Get <options> value
     *
     * @return \google\protobuf\ServiceOptions
     */
    public function getOptions(){
      return $this->_get(3);
    }
    
    /**
     * Set <options> value
     *
     * @param \google\protobuf\ServiceOptions $value
     * @return \google\protobuf\ServiceDescriptorProto
     */
    public function setOptions(\google\protobuf\ServiceOptions $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\protobuf {

  class MethodDescriptorProto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $input_type = null;
    
    /**  @var string */
    public $output_type = null;
    
    /**  @var \google\protobuf\MethodOptions */
    public $options = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.MethodDescriptorProto');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING input_type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "input_type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING output_type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "output_type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE options = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "options";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\MethodOptions';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\protobuf\MethodDescriptorProto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\protobuf\MethodDescriptorProto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <input_type> has a value
     *
     * @return boolean
     */
    public function hasInputType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <input_type> value
     *
     * @return \google\protobuf\MethodDescriptorProto
     */
    public function clearInputType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <input_type> value
     *
     * @return string
     */
    public function getInputType(){
      return $this->_get(2);
    }
    
    /**
     * Set <input_type> value
     *
     * @param string $value
     * @return \google\protobuf\MethodDescriptorProto
     */
    public function setInputType( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <output_type> has a value
     *
     * @return boolean
     */
    public function hasOutputType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <output_type> value
     *
     * @return \google\protobuf\MethodDescriptorProto
     */
    public function clearOutputType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <output_type> value
     *
     * @return string
     */
    public function getOutputType(){
      return $this->_get(3);
    }
    
    /**
     * Set <output_type> value
     *
     * @param string $value
     * @return \google\protobuf\MethodDescriptorProto
     */
    public function setOutputType( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <options> has a value
     *
     * @return boolean
     */
    public function hasOptions(){
      return $this->_has(4);
    }
    
    /**
     * Clear <options> value
     *
     * @return \google\protobuf\MethodDescriptorProto
     */
    public function clearOptions(){
      return $this->_clear(4);
    }
    
    /**
     * Get <options> value
     *
     * @return \google\protobuf\MethodOptions
     */
    public function getOptions(){
      return $this->_get(4);
    }
    
    /**
     * Set <options> value
     *
     * @param \google\protobuf\MethodOptions $value
     * @return \google\protobuf\MethodDescriptorProto
     */
    public function setOptions(\google\protobuf\MethodOptions $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\protobuf\FileOptions {

  class OptimizeMode extends \DrSlump\Protobuf\Enum {
    const SPEED = 1;
    const CODE_SIZE = 2;
  }
}
namespace google\protobuf {

  class FileOptions extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $java_package = null;
    
    /**  @var string */
    public $java_outer_classname = null;
    
    /**  @var boolean */
    public $java_multiple_files = true;
    
    /**  @var string */
    public $perl_file_package = null;
    
    /**  @var string */
    public $perl_message_package = null;
    
    /**  @var int - \google\protobuf\FileOptions\OptimizeMode */
    public $optimize_for = \google\protobuf\FileOptions\OptimizeMode::CODE_SIZE;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.FileOptions');

      // OPTIONAL STRING java_package = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "java_package";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING java_outer_classname = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "java_outer_classname";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL java_multiple_files = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "java_multiple_files";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL STRING perl_file_package = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "perl_file_package";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING perl_message_package = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "perl_message_package";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM optimize_for = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "optimize_for";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\FileOptions\OptimizeMode';
      $f->default   = \google\protobuf\FileOptions\OptimizeMode::CODE_SIZE;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <java_package> has a value
     *
     * @return boolean
     */
    public function hasJavaPackage(){
      return $this->_has(1);
    }
    
    /**
     * Clear <java_package> value
     *
     * @return \google\protobuf\FileOptions
     */
    public function clearJavaPackage(){
      return $this->_clear(1);
    }
    
    /**
     * Get <java_package> value
     *
     * @return string
     */
    public function getJavaPackage(){
      return $this->_get(1);
    }
    
    /**
     * Set <java_package> value
     *
     * @param string $value
     * @return \google\protobuf\FileOptions
     */
    public function setJavaPackage( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <java_outer_classname> has a value
     *
     * @return boolean
     */
    public function hasJavaOuterClassname(){
      return $this->_has(8);
    }
    
    /**
     * Clear <java_outer_classname> value
     *
     * @return \google\protobuf\FileOptions
     */
    public function clearJavaOuterClassname(){
      return $this->_clear(8);
    }
    
    /**
     * Get <java_outer_classname> value
     *
     * @return string
     */
    public function getJavaOuterClassname(){
      return $this->_get(8);
    }
    
    /**
     * Set <java_outer_classname> value
     *
     * @param string $value
     * @return \google\protobuf\FileOptions
     */
    public function setJavaOuterClassname( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <java_multiple_files> has a value
     *
     * @return boolean
     */
    public function hasJavaMultipleFiles(){
      return $this->_has(10);
    }
    
    /**
     * Clear <java_multiple_files> value
     *
     * @return \google\protobuf\FileOptions
     */
    public function clearJavaMultipleFiles(){
      return $this->_clear(10);
    }
    
    /**
     * Get <java_multiple_files> value
     *
     * @return boolean
     */
    public function getJavaMultipleFiles(){
      return $this->_get(10);
    }
    
    /**
     * Set <java_multiple_files> value
     *
     * @param boolean $value
     * @return \google\protobuf\FileOptions
     */
    public function setJavaMultipleFiles( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <perl_file_package> has a value
     *
     * @return boolean
     */
    public function hasPerlFilePackage(){
      return $this->_has(11);
    }
    
    /**
     * Clear <perl_file_package> value
     *
     * @return \google\protobuf\FileOptions
     */
    public function clearPerlFilePackage(){
      return $this->_clear(11);
    }
    
    /**
     * Get <perl_file_package> value
     *
     * @return string
     */
    public function getPerlFilePackage(){
      return $this->_get(11);
    }
    
    /**
     * Set <perl_file_package> value
     *
     * @param string $value
     * @return \google\protobuf\FileOptions
     */
    public function setPerlFilePackage( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <perl_message_package> has a value
     *
     * @return boolean
     */
    public function hasPerlMessagePackage(){
      return $this->_has(12);
    }
    
    /**
     * Clear <perl_message_package> value
     *
     * @return \google\protobuf\FileOptions
     */
    public function clearPerlMessagePackage(){
      return $this->_clear(12);
    }
    
    /**
     * Get <perl_message_package> value
     *
     * @return string
     */
    public function getPerlMessagePackage(){
      return $this->_get(12);
    }
    
    /**
     * Set <perl_message_package> value
     *
     * @param string $value
     * @return \google\protobuf\FileOptions
     */
    public function setPerlMessagePackage( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <optimize_for> has a value
     *
     * @return boolean
     */
    public function hasOptimizeFor(){
      return $this->_has(9);
    }
    
    /**
     * Clear <optimize_for> value
     *
     * @return \google\protobuf\FileOptions
     */
    public function clearOptimizeFor(){
      return $this->_clear(9);
    }
    
    /**
     * Get <optimize_for> value
     *
     * @return int - \google\protobuf\FileOptions\OptimizeMode
     */
    public function getOptimizeFor(){
      return $this->_get(9);
    }
    
    /**
     * Set <optimize_for> value
     *
     * @param int - \google\protobuf\FileOptions\OptimizeMode $value
     * @return \google\protobuf\FileOptions
     */
    public function setOptimizeFor( $value){
      return $this->_set(9, $value);
    }
  }
}

namespace google\protobuf {

  class MessageOptions extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $message_set_wire_format = true;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.MessageOptions');

      // OPTIONAL BOOL message_set_wire_format = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "message_set_wire_format";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <message_set_wire_format> has a value
     *
     * @return boolean
     */
    public function hasMessageSetWireFormat(){
      return $this->_has(1);
    }
    
    /**
     * Clear <message_set_wire_format> value
     *
     * @return \google\protobuf\MessageOptions
     */
    public function clearMessageSetWireFormat(){
      return $this->_clear(1);
    }
    
    /**
     * Get <message_set_wire_format> value
     *
     * @return boolean
     */
    public function getMessageSetWireFormat(){
      return $this->_get(1);
    }
    
    /**
     * Set <message_set_wire_format> value
     *
     * @param boolean $value
     * @return \google\protobuf\MessageOptions
     */
    public function setMessageSetWireFormat( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\protobuf\FieldOptions {

  class CType extends \DrSlump\Protobuf\Enum {
    const CORD = 1;
    const STRING_PIECE = 2;
  }
}
namespace google\protobuf {

  class FieldOptions extends \DrSlump\Protobuf\Message {

    /**  @var int - \google\protobuf\FieldOptions\CType */
    public $ctype = null;
    
    /**  @var string */
    public $experimental_map_key = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.FieldOptions');

      // OPTIONAL ENUM ctype = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "ctype";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\FieldOptions\CType';
      $descriptor->addField($f);

      // OPTIONAL STRING experimental_map_key = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "experimental_map_key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <ctype> has a value
     *
     * @return boolean
     */
    public function hasCtype(){
      return $this->_has(1);
    }
    
    /**
     * Clear <ctype> value
     *
     * @return \google\protobuf\FieldOptions
     */
    public function clearCtype(){
      return $this->_clear(1);
    }
    
    /**
     * Get <ctype> value
     *
     * @return int - \google\protobuf\FieldOptions\CType
     */
    public function getCtype(){
      return $this->_get(1);
    }
    
    /**
     * Set <ctype> value
     *
     * @param int - \google\protobuf\FieldOptions\CType $value
     * @return \google\protobuf\FieldOptions
     */
    public function setCtype( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <experimental_map_key> has a value
     *
     * @return boolean
     */
    public function hasExperimentalMapKey(){
      return $this->_has(9);
    }
    
    /**
     * Clear <experimental_map_key> value
     *
     * @return \google\protobuf\FieldOptions
     */
    public function clearExperimentalMapKey(){
      return $this->_clear(9);
    }
    
    /**
     * Get <experimental_map_key> value
     *
     * @return string
     */
    public function getExperimentalMapKey(){
      return $this->_get(9);
    }
    
    /**
     * Set <experimental_map_key> value
     *
     * @param string $value
     * @return \google\protobuf\FieldOptions
     */
    public function setExperimentalMapKey( $value){
      return $this->_set(9, $value);
    }
  }
}

namespace google\protobuf {

  class EnumOptions extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.EnumOptions');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace google\protobuf {

  class EnumValueOptions extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.EnumValueOptions');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace google\protobuf {

  class ServiceOptions extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.ServiceOptions');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace google\protobuf {

  class MethodOptions extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.MethodOptions');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

