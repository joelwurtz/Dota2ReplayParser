<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: netmessages.proto
//   Date: 2012-04-27 16:14:33

namespace  {

  class NET_Messages extends \DrSlump\Protobuf\Enum {
    const net_NOP = 0;
    const net_Disconnect = 1;
    const net_File = 2;
    const net_SplitScreenUser = 3;
    const net_Tick = 4;
    const net_StringCmd = 5;
    const net_SetConVar = 6;
    const net_SignonState = 7;
  }
}
namespace  {

  class SIGNONSTATE extends \DrSlump\Protobuf\Enum {
    const SIGNONSTATE_NONE = 0;
    const SIGNONSTATE_CHALLENGE = 1;
    const SIGNONSTATE_CONNECTED = 2;
    const SIGNONSTATE_NEW = 3;
    const SIGNONSTATE_PRESPAWN = 4;
    const SIGNONSTATE_SPAWN = 5;
    const SIGNONSTATE_FULL = 6;
    const SIGNONSTATE_CHANGELEVEL = 7;
  }
}
namespace  {

  class CLC_Messages extends \DrSlump\Protobuf\Enum {
    const clc_ClientInfo = 8;
    const clc_Move = 9;
    const clc_VoiceData = 10;
    const clc_BaselineAck = 11;
    const clc_ListenEvents = 12;
    const clc_RespondCvarValue = 13;
    const clc_FileCRCCheck = 14;
    const clc_LoadingProgress = 15;
    const clc_SplitPlayerConnect = 16;
    const clc_ClientMessage = 17;
  }
}
namespace  {

  class SVC_Messages extends \DrSlump\Protobuf\Enum {
    const svc_ServerInfo = 8;
    const svc_SendTable = 9;
    const svc_ClassInfo = 10;
    const svc_SetPause = 11;
    const svc_CreateStringTable = 12;
    const svc_UpdateStringTable = 13;
    const svc_VoiceInit = 14;
    const svc_VoiceData = 15;
    const svc_Print = 16;
    const svc_Sounds = 17;
    const svc_SetView = 18;
    const svc_FixAngle = 19;
    const svc_CrosshairAngle = 20;
    const svc_BSPDecal = 21;
    const svc_SplitScreen = 22;
    const svc_UserMessage = 23;
    const svc_EntityMessage = 24;
    const svc_GameEvent = 25;
    const svc_PacketEntities = 26;
    const svc_TempEntities = 27;
    const svc_Prefetch = 28;
    const svc_Menu = 29;
    const svc_GameEventList = 30;
    const svc_GetCvarValue = 31;
  }
}
namespace  {

  class ESplitScreenMessageType extends \DrSlump\Protobuf\Enum {
    const MSG_SPLITSCREEN_ADDUSER = 0;
    const MSG_SPLITSCREEN_REMOVEUSER = 1;
    const MSG_SPLITSCREEN_TYPE_BITS = 1;
  }
}
namespace  {

  class CMsgVector extends \DrSlump\Protobuf\Message {

    /**  @var float */
    public $x = null;
    
    /**  @var float */
    public $y = null;
    
    /**  @var float */
    public $z = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CMsgVector');

      // OPTIONAL FLOAT x = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "x";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT y = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "y";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT z = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "z";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <x> has a value
     *
     * @return boolean
     */
    public function hasX(){
      return $this->_has(1);
    }
    
    /**
     * Clear <x> value
     *
     * @return \CMsgVector
     */
    public function clearX(){
      return $this->_clear(1);
    }
    
    /**
     * Get <x> value
     *
     * @return float
     */
    public function getX(){
      return $this->_get(1);
    }
    
    /**
     * Set <x> value
     *
     * @param float $value
     * @return \CMsgVector
     */
    public function setX( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <y> has a value
     *
     * @return boolean
     */
    public function hasY(){
      return $this->_has(2);
    }
    
    /**
     * Clear <y> value
     *
     * @return \CMsgVector
     */
    public function clearY(){
      return $this->_clear(2);
    }
    
    /**
     * Get <y> value
     *
     * @return float
     */
    public function getY(){
      return $this->_get(2);
    }
    
    /**
     * Set <y> value
     *
     * @param float $value
     * @return \CMsgVector
     */
    public function setY( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <z> has a value
     *
     * @return boolean
     */
    public function hasZ(){
      return $this->_has(3);
    }
    
    /**
     * Clear <z> value
     *
     * @return \CMsgVector
     */
    public function clearZ(){
      return $this->_clear(3);
    }
    
    /**
     * Get <z> value
     *
     * @return float
     */
    public function getZ(){
      return $this->_get(3);
    }
    
    /**
     * Set <z> value
     *
     * @param float $value
     * @return \CMsgVector
     */
    public function setZ( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace  {

  class CMsgVector2D extends \DrSlump\Protobuf\Message {

    /**  @var float */
    public $x = null;
    
    /**  @var float */
    public $y = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CMsgVector2D');

      // OPTIONAL FLOAT x = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "x";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT y = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "y";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <x> has a value
     *
     * @return boolean
     */
    public function hasX(){
      return $this->_has(1);
    }
    
    /**
     * Clear <x> value
     *
     * @return \CMsgVector2D
     */
    public function clearX(){
      return $this->_clear(1);
    }
    
    /**
     * Get <x> value
     *
     * @return float
     */
    public function getX(){
      return $this->_get(1);
    }
    
    /**
     * Set <x> value
     *
     * @param float $value
     * @return \CMsgVector2D
     */
    public function setX( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <y> has a value
     *
     * @return boolean
     */
    public function hasY(){
      return $this->_has(2);
    }
    
    /**
     * Clear <y> value
     *
     * @return \CMsgVector2D
     */
    public function clearY(){
      return $this->_clear(2);
    }
    
    /**
     * Get <y> value
     *
     * @return float
     */
    public function getY(){
      return $this->_get(2);
    }
    
    /**
     * Set <y> value
     *
     * @param float $value
     * @return \CMsgVector2D
     */
    public function setY( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace  {

  class CMsgQAngle extends \DrSlump\Protobuf\Message {

    /**  @var float */
    public $x = null;
    
    /**  @var float */
    public $y = null;
    
    /**  @var float */
    public $z = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CMsgQAngle');

      // OPTIONAL FLOAT x = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "x";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT y = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "y";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT z = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "z";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <x> has a value
     *
     * @return boolean
     */
    public function hasX(){
      return $this->_has(1);
    }
    
    /**
     * Clear <x> value
     *
     * @return \CMsgQAngle
     */
    public function clearX(){
      return $this->_clear(1);
    }
    
    /**
     * Get <x> value
     *
     * @return float
     */
    public function getX(){
      return $this->_get(1);
    }
    
    /**
     * Set <x> value
     *
     * @param float $value
     * @return \CMsgQAngle
     */
    public function setX( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <y> has a value
     *
     * @return boolean
     */
    public function hasY(){
      return $this->_has(2);
    }
    
    /**
     * Clear <y> value
     *
     * @return \CMsgQAngle
     */
    public function clearY(){
      return $this->_clear(2);
    }
    
    /**
     * Get <y> value
     *
     * @return float
     */
    public function getY(){
      return $this->_get(2);
    }
    
    /**
     * Set <y> value
     *
     * @param float $value
     * @return \CMsgQAngle
     */
    public function setY( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <z> has a value
     *
     * @return boolean
     */
    public function hasZ(){
      return $this->_has(3);
    }
    
    /**
     * Clear <z> value
     *
     * @return \CMsgQAngle
     */
    public function clearZ(){
      return $this->_clear(3);
    }
    
    /**
     * Get <z> value
     *
     * @return float
     */
    public function getZ(){
      return $this->_get(3);
    }
    
    /**
     * Set <z> value
     *
     * @param float $value
     * @return \CMsgQAngle
     */
    public function setZ( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace CMsg_CVars {

  class CVar extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CMsg_CVars.CVar');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \CMsg_CVars\CVar
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \CMsg_CVars\CVar
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \CMsg_CVars\CVar
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \CMsg_CVars\CVar
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace  {

  class CMsg_CVars extends \DrSlump\Protobuf\Message {

    /**  @var \CMsg_CVars\CVar[]  */
    public $cvars = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CMsg_CVars');

      // REPEATED MESSAGE cvars = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cvars";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\CMsg_CVars\CVar';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cvars> has a value
     *
     * @return boolean
     */
    public function hasCvars(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cvars> value
     *
     * @return \CMsg_CVars
     */
    public function clearCvars(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cvars> value
     *
     * @param int $idx
     * @return \CMsg_CVars\CVar
     */
    public function getCvars($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <cvars> value
     *
     * @param \CMsg_CVars\CVar $value
     * @return \CMsg_CVars
     */
    public function setCvars(\CMsg_CVars\CVar $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <cvars>
     *
     * @return \CMsg_CVars\CVar[]
     */
    public function getCvarsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <cvars>
     *
     * @param \CMsg_CVars\CVar $value
     * @return \CMsg_CVars
     */
    public function addCvars(\CMsg_CVars\CVar $value){
     return $this->_add(1, $value);
    }
  }
}

namespace  {

  class CNETMsg_NOP extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CNETMsg_NOP');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace  {

  class CNETMsg_Disconnect extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $text = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CNETMsg_Disconnect');

      // OPTIONAL STRING text = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "text";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <text> has a value
     *
     * @return boolean
     */
    public function hasText(){
      return $this->_has(1);
    }
    
    /**
     * Clear <text> value
     *
     * @return \CNETMsg_Disconnect
     */
    public function clearText(){
      return $this->_clear(1);
    }
    
    /**
     * Get <text> value
     *
     * @return string
     */
    public function getText(){
      return $this->_get(1);
    }
    
    /**
     * Set <text> value
     *
     * @param string $value
     * @return \CNETMsg_Disconnect
     */
    public function setText( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace  {

  class CNETMsg_File extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $transfer_id = null;
    
    /**  @var string */
    public $file_name = null;
    
    /**  @var boolean */
    public $is_replay_demo_file = null;
    
    /**  @var boolean */
    public $deny = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CNETMsg_File');

      // OPTIONAL INT32 transfer_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "transfer_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING file_name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "file_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL is_replay_demo_file = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "is_replay_demo_file";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL deny = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "deny";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <transfer_id> has a value
     *
     * @return boolean
     */
    public function hasTransferId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <transfer_id> value
     *
     * @return \CNETMsg_File
     */
    public function clearTransferId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <transfer_id> value
     *
     * @return int
     */
    public function getTransferId(){
      return $this->_get(1);
    }
    
    /**
     * Set <transfer_id> value
     *
     * @param int $value
     * @return \CNETMsg_File
     */
    public function setTransferId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <file_name> has a value
     *
     * @return boolean
     */
    public function hasFileName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <file_name> value
     *
     * @return \CNETMsg_File
     */
    public function clearFileName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <file_name> value
     *
     * @return string
     */
    public function getFileName(){
      return $this->_get(2);
    }
    
    /**
     * Set <file_name> value
     *
     * @param string $value
     * @return \CNETMsg_File
     */
    public function setFileName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <is_replay_demo_file> has a value
     *
     * @return boolean
     */
    public function hasIsReplayDemoFile(){
      return $this->_has(3);
    }
    
    /**
     * Clear <is_replay_demo_file> value
     *
     * @return \CNETMsg_File
     */
    public function clearIsReplayDemoFile(){
      return $this->_clear(3);
    }
    
    /**
     * Get <is_replay_demo_file> value
     *
     * @return boolean
     */
    public function getIsReplayDemoFile(){
      return $this->_get(3);
    }
    
    /**
     * Set <is_replay_demo_file> value
     *
     * @param boolean $value
     * @return \CNETMsg_File
     */
    public function setIsReplayDemoFile( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <deny> has a value
     *
     * @return boolean
     */
    public function hasDeny(){
      return $this->_has(4);
    }
    
    /**
     * Clear <deny> value
     *
     * @return \CNETMsg_File
     */
    public function clearDeny(){
      return $this->_clear(4);
    }
    
    /**
     * Get <deny> value
     *
     * @return boolean
     */
    public function getDeny(){
      return $this->_get(4);
    }
    
    /**
     * Set <deny> value
     *
     * @param boolean $value
     * @return \CNETMsg_File
     */
    public function setDeny( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace  {

  class CNETMsg_SplitScreenUser extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $slot = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CNETMsg_SplitScreenUser');

      // OPTIONAL INT32 slot = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "slot";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <slot> has a value
     *
     * @return boolean
     */
    public function hasSlot(){
      return $this->_has(1);
    }
    
    /**
     * Clear <slot> value
     *
     * @return \CNETMsg_SplitScreenUser
     */
    public function clearSlot(){
      return $this->_clear(1);
    }
    
    /**
     * Get <slot> value
     *
     * @return int
     */
    public function getSlot(){
      return $this->_get(1);
    }
    
    /**
     * Set <slot> value
     *
     * @param int $value
     * @return \CNETMsg_SplitScreenUser
     */
    public function setSlot( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace  {

  class CNETMsg_Tick extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $tick = null;
    
    /**  @var int */
    public $host_frametime = null;
    
    /**  @var int */
    public $host_frametime_std_deviation = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CNETMsg_Tick');

      // OPTIONAL UINT32 tick = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "tick";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 host_frametime = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "host_frametime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 host_frametime_std_deviation = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "host_frametime_std_deviation";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <tick> has a value
     *
     * @return boolean
     */
    public function hasTick(){
      return $this->_has(1);
    }
    
    /**
     * Clear <tick> value
     *
     * @return \CNETMsg_Tick
     */
    public function clearTick(){
      return $this->_clear(1);
    }
    
    /**
     * Get <tick> value
     *
     * @return int
     */
    public function getTick(){
      return $this->_get(1);
    }
    
    /**
     * Set <tick> value
     *
     * @param int $value
     * @return \CNETMsg_Tick
     */
    public function setTick( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <host_frametime> has a value
     *
     * @return boolean
     */
    public function hasHostFrametime(){
      return $this->_has(2);
    }
    
    /**
     * Clear <host_frametime> value
     *
     * @return \CNETMsg_Tick
     */
    public function clearHostFrametime(){
      return $this->_clear(2);
    }
    
    /**
     * Get <host_frametime> value
     *
     * @return int
     */
    public function getHostFrametime(){
      return $this->_get(2);
    }
    
    /**
     * Set <host_frametime> value
     *
     * @param int $value
     * @return \CNETMsg_Tick
     */
    public function setHostFrametime( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <host_frametime_std_deviation> has a value
     *
     * @return boolean
     */
    public function hasHostFrametimeStdDeviation(){
      return $this->_has(3);
    }
    
    /**
     * Clear <host_frametime_std_deviation> value
     *
     * @return \CNETMsg_Tick
     */
    public function clearHostFrametimeStdDeviation(){
      return $this->_clear(3);
    }
    
    /**
     * Get <host_frametime_std_deviation> value
     *
     * @return int
     */
    public function getHostFrametimeStdDeviation(){
      return $this->_get(3);
    }
    
    /**
     * Set <host_frametime_std_deviation> value
     *
     * @param int $value
     * @return \CNETMsg_Tick
     */
    public function setHostFrametimeStdDeviation( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace  {

  class CNETMsg_StringCmd extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $command = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CNETMsg_StringCmd');

      // OPTIONAL STRING command = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "command";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <command> has a value
     *
     * @return boolean
     */
    public function hasCommand(){
      return $this->_has(1);
    }
    
    /**
     * Clear <command> value
     *
     * @return \CNETMsg_StringCmd
     */
    public function clearCommand(){
      return $this->_clear(1);
    }
    
    /**
     * Get <command> value
     *
     * @return string
     */
    public function getCommand(){
      return $this->_get(1);
    }
    
    /**
     * Set <command> value
     *
     * @param string $value
     * @return \CNETMsg_StringCmd
     */
    public function setCommand( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace  {

  class CNETMsg_SetConVar extends \DrSlump\Protobuf\Message {

    /**  @var \CMsg_CVars */
    public $convars = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CNETMsg_SetConVar');

      // OPTIONAL MESSAGE convars = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "convars";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\CMsg_CVars';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <convars> has a value
     *
     * @return boolean
     */
    public function hasConvars(){
      return $this->_has(1);
    }
    
    /**
     * Clear <convars> value
     *
     * @return \CNETMsg_SetConVar
     */
    public function clearConvars(){
      return $this->_clear(1);
    }
    
    /**
     * Get <convars> value
     *
     * @return \CMsg_CVars
     */
    public function getConvars(){
      return $this->_get(1);
    }
    
    /**
     * Set <convars> value
     *
     * @param \CMsg_CVars $value
     * @return \CNETMsg_SetConVar
     */
    public function setConvars(\CMsg_CVars $value){
      return $this->_set(1, $value);
    }
  }
}

namespace  {

  class CNETMsg_SignonState extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $signon_state = null;
    
    /**  @var int */
    public $spawn_count = null;
    
    /**  @var int */
    public $num_server_players = null;
    
    /**  @var string[]  */
    public $players_networkids = array();
    
    /**  @var string */
    public $map_name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CNETMsg_SignonState');

      // OPTIONAL UINT32 signon_state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "signon_state";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 spawn_count = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "spawn_count";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 num_server_players = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "num_server_players";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING players_networkids = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "players_networkids";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING map_name = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "map_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <signon_state> has a value
     *
     * @return boolean
     */
    public function hasSignonState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <signon_state> value
     *
     * @return \CNETMsg_SignonState
     */
    public function clearSignonState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <signon_state> value
     *
     * @return int
     */
    public function getSignonState(){
      return $this->_get(1);
    }
    
    /**
     * Set <signon_state> value
     *
     * @param int $value
     * @return \CNETMsg_SignonState
     */
    public function setSignonState( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <spawn_count> has a value
     *
     * @return boolean
     */
    public function hasSpawnCount(){
      return $this->_has(2);
    }
    
    /**
     * Clear <spawn_count> value
     *
     * @return \CNETMsg_SignonState
     */
    public function clearSpawnCount(){
      return $this->_clear(2);
    }
    
    /**
     * Get <spawn_count> value
     *
     * @return int
     */
    public function getSpawnCount(){
      return $this->_get(2);
    }
    
    /**
     * Set <spawn_count> value
     *
     * @param int $value
     * @return \CNETMsg_SignonState
     */
    public function setSpawnCount( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <num_server_players> has a value
     *
     * @return boolean
     */
    public function hasNumServerPlayers(){
      return $this->_has(3);
    }
    
    /**
     * Clear <num_server_players> value
     *
     * @return \CNETMsg_SignonState
     */
    public function clearNumServerPlayers(){
      return $this->_clear(3);
    }
    
    /**
     * Get <num_server_players> value
     *
     * @return int
     */
    public function getNumServerPlayers(){
      return $this->_get(3);
    }
    
    /**
     * Set <num_server_players> value
     *
     * @param int $value
     * @return \CNETMsg_SignonState
     */
    public function setNumServerPlayers( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <players_networkids> has a value
     *
     * @return boolean
     */
    public function hasPlayersNetworkids(){
      return $this->_has(4);
    }
    
    /**
     * Clear <players_networkids> value
     *
     * @return \CNETMsg_SignonState
     */
    public function clearPlayersNetworkids(){
      return $this->_clear(4);
    }
    
    /**
     * Get <players_networkids> value
     *
     * @param int $idx
     * @return string
     */
    public function getPlayersNetworkids($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <players_networkids> value
     *
     * @param string $value
     * @return \CNETMsg_SignonState
     */
    public function setPlayersNetworkids( $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <players_networkids>
     *
     * @return string[]
     */
    public function getPlayersNetworkidsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <players_networkids>
     *
     * @param string $value
     * @return \CNETMsg_SignonState
     */
    public function addPlayersNetworkids( $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <map_name> has a value
     *
     * @return boolean
     */
    public function hasMapName(){
      return $this->_has(5);
    }
    
    /**
     * Clear <map_name> value
     *
     * @return \CNETMsg_SignonState
     */
    public function clearMapName(){
      return $this->_clear(5);
    }
    
    /**
     * Get <map_name> value
     *
     * @return string
     */
    public function getMapName(){
      return $this->_get(5);
    }
    
    /**
     * Set <map_name> value
     *
     * @param string $value
     * @return \CNETMsg_SignonState
     */
    public function setMapName( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace  {

  class CCLCMsg_ClientInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $send_table_crc = null;
    
    /**  @var int */
    public $server_count = null;
    
    /**  @var boolean */
    public $is_hltv = null;
    
    /**  @var boolean */
    public $is_replay = null;
    
    /**  @var int */
    public $friends_id = null;
    
    /**  @var string */
    public $friends_name = null;
    
    /**  @var int[]  */
    public $custom_files = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CCLCMsg_ClientInfo');

      // OPTIONAL FIXED32 send_table_crc = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "send_table_crc";
      $f->type      = \DrSlump\Protobuf::TYPE_FIXED32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 server_count = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "server_count";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL is_hltv = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "is_hltv";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL is_replay = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "is_replay";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 friends_id = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "friends_id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING friends_name = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "friends_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED FIXED32 custom_files = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "custom_files";
      $f->type      = \DrSlump\Protobuf::TYPE_FIXED32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <send_table_crc> has a value
     *
     * @return boolean
     */
    public function hasSendTableCrc(){
      return $this->_has(1);
    }
    
    /**
     * Clear <send_table_crc> value
     *
     * @return \CCLCMsg_ClientInfo
     */
    public function clearSendTableCrc(){
      return $this->_clear(1);
    }
    
    /**
     * Get <send_table_crc> value
     *
     * @return int
     */
    public function getSendTableCrc(){
      return $this->_get(1);
    }
    
    /**
     * Set <send_table_crc> value
     *
     * @param int $value
     * @return \CCLCMsg_ClientInfo
     */
    public function setSendTableCrc( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <server_count> has a value
     *
     * @return boolean
     */
    public function hasServerCount(){
      return $this->_has(2);
    }
    
    /**
     * Clear <server_count> value
     *
     * @return \CCLCMsg_ClientInfo
     */
    public function clearServerCount(){
      return $this->_clear(2);
    }
    
    /**
     * Get <server_count> value
     *
     * @return int
     */
    public function getServerCount(){
      return $this->_get(2);
    }
    
    /**
     * Set <server_count> value
     *
     * @param int $value
     * @return \CCLCMsg_ClientInfo
     */
    public function setServerCount( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <is_hltv> has a value
     *
     * @return boolean
     */
    public function hasIsHltv(){
      return $this->_has(3);
    }
    
    /**
     * Clear <is_hltv> value
     *
     * @return \CCLCMsg_ClientInfo
     */
    public function clearIsHltv(){
      return $this->_clear(3);
    }
    
    /**
     * Get <is_hltv> value
     *
     * @return boolean
     */
    public function getIsHltv(){
      return $this->_get(3);
    }
    
    /**
     * Set <is_hltv> value
     *
     * @param boolean $value
     * @return \CCLCMsg_ClientInfo
     */
    public function setIsHltv( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <is_replay> has a value
     *
     * @return boolean
     */
    public function hasIsReplay(){
      return $this->_has(4);
    }
    
    /**
     * Clear <is_replay> value
     *
     * @return \CCLCMsg_ClientInfo
     */
    public function clearIsReplay(){
      return $this->_clear(4);
    }
    
    /**
     * Get <is_replay> value
     *
     * @return boolean
     */
    public function getIsReplay(){
      return $this->_get(4);
    }
    
    /**
     * Set <is_replay> value
     *
     * @param boolean $value
     * @return \CCLCMsg_ClientInfo
     */
    public function setIsReplay( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <friends_id> has a value
     *
     * @return boolean
     */
    public function hasFriendsId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <friends_id> value
     *
     * @return \CCLCMsg_ClientInfo
     */
    public function clearFriendsId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <friends_id> value
     *
     * @return int
     */
    public function getFriendsId(){
      return $this->_get(5);
    }
    
    /**
     * Set <friends_id> value
     *
     * @param int $value
     * @return \CCLCMsg_ClientInfo
     */
    public function setFriendsId( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <friends_name> has a value
     *
     * @return boolean
     */
    public function hasFriendsName(){
      return $this->_has(6);
    }
    
    /**
     * Clear <friends_name> value
     *
     * @return \CCLCMsg_ClientInfo
     */
    public function clearFriendsName(){
      return $this->_clear(6);
    }
    
    /**
     * Get <friends_name> value
     *
     * @return string
     */
    public function getFriendsName(){
      return $this->_get(6);
    }
    
    /**
     * Set <friends_name> value
     *
     * @param string $value
     * @return \CCLCMsg_ClientInfo
     */
    public function setFriendsName( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <custom_files> has a value
     *
     * @return boolean
     */
    public function hasCustomFiles(){
      return $this->_has(7);
    }
    
    /**
     * Clear <custom_files> value
     *
     * @return \CCLCMsg_ClientInfo
     */
    public function clearCustomFiles(){
      return $this->_clear(7);
    }
    
    /**
     * Get <custom_files> value
     *
     * @param int $idx
     * @return int
     */
    public function getCustomFiles($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <custom_files> value
     *
     * @param int $value
     * @return \CCLCMsg_ClientInfo
     */
    public function setCustomFiles( $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <custom_files>
     *
     * @return int[]
     */
    public function getCustomFilesList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <custom_files>
     *
     * @param int $value
     * @return \CCLCMsg_ClientInfo
     */
    public function addCustomFiles( $value){
     return $this->_add(7, $value);
    }
  }
}

namespace  {

  class CCLCMsg_Move extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $num_backup_commands = null;
    
    /**  @var int */
    public $num_new_commands = null;
    
    /**  @var string */
    public $data = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CCLCMsg_Move');

      // OPTIONAL UINT32 num_backup_commands = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "num_backup_commands";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 num_new_commands = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "num_new_commands";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES data = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "data";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <num_backup_commands> has a value
     *
     * @return boolean
     */
    public function hasNumBackupCommands(){
      return $this->_has(1);
    }
    
    /**
     * Clear <num_backup_commands> value
     *
     * @return \CCLCMsg_Move
     */
    public function clearNumBackupCommands(){
      return $this->_clear(1);
    }
    
    /**
     * Get <num_backup_commands> value
     *
     * @return int
     */
    public function getNumBackupCommands(){
      return $this->_get(1);
    }
    
    /**
     * Set <num_backup_commands> value
     *
     * @param int $value
     * @return \CCLCMsg_Move
     */
    public function setNumBackupCommands( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <num_new_commands> has a value
     *
     * @return boolean
     */
    public function hasNumNewCommands(){
      return $this->_has(2);
    }
    
    /**
     * Clear <num_new_commands> value
     *
     * @return \CCLCMsg_Move
     */
    public function clearNumNewCommands(){
      return $this->_clear(2);
    }
    
    /**
     * Get <num_new_commands> value
     *
     * @return int
     */
    public function getNumNewCommands(){
      return $this->_get(2);
    }
    
    /**
     * Set <num_new_commands> value
     *
     * @param int $value
     * @return \CCLCMsg_Move
     */
    public function setNumNewCommands( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <data> has a value
     *
     * @return boolean
     */
    public function hasData(){
      return $this->_has(3);
    }
    
    /**
     * Clear <data> value
     *
     * @return \CCLCMsg_Move
     */
    public function clearData(){
      return $this->_clear(3);
    }
    
    /**
     * Get <data> value
     *
     * @return string
     */
    public function getData(){
      return $this->_get(3);
    }
    
    /**
     * Set <data> value
     *
     * @param string $value
     * @return \CCLCMsg_Move
     */
    public function setData( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace  {

  class CCLCMsg_VoiceData extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $data = null;
    
    /**  @var int */
    public $xuid = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CCLCMsg_VoiceData');

      // OPTIONAL BYTES data = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "data";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FIXED64 xuid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "xuid";
      $f->type      = \DrSlump\Protobuf::TYPE_FIXED64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <data> has a value
     *
     * @return boolean
     */
    public function hasData(){
      return $this->_has(1);
    }
    
    /**
     * Clear <data> value
     *
     * @return \CCLCMsg_VoiceData
     */
    public function clearData(){
      return $this->_clear(1);
    }
    
    /**
     * Get <data> value
     *
     * @return string
     */
    public function getData(){
      return $this->_get(1);
    }
    
    /**
     * Set <data> value
     *
     * @param string $value
     * @return \CCLCMsg_VoiceData
     */
    public function setData( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <xuid> has a value
     *
     * @return boolean
     */
    public function hasXuid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <xuid> value
     *
     * @return \CCLCMsg_VoiceData
     */
    public function clearXuid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <xuid> value
     *
     * @return int
     */
    public function getXuid(){
      return $this->_get(2);
    }
    
    /**
     * Set <xuid> value
     *
     * @param int $value
     * @return \CCLCMsg_VoiceData
     */
    public function setXuid( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace  {

  class CCLCMsg_BaselineAck extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $baseline_tick = null;
    
    /**  @var int */
    public $baseline_nr = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CCLCMsg_BaselineAck');

      // OPTIONAL INT32 baseline_tick = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "baseline_tick";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 baseline_nr = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "baseline_nr";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <baseline_tick> has a value
     *
     * @return boolean
     */
    public function hasBaselineTick(){
      return $this->_has(1);
    }
    
    /**
     * Clear <baseline_tick> value
     *
     * @return \CCLCMsg_BaselineAck
     */
    public function clearBaselineTick(){
      return $this->_clear(1);
    }
    
    /**
     * Get <baseline_tick> value
     *
     * @return int
     */
    public function getBaselineTick(){
      return $this->_get(1);
    }
    
    /**
     * Set <baseline_tick> value
     *
     * @param int $value
     * @return \CCLCMsg_BaselineAck
     */
    public function setBaselineTick( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <baseline_nr> has a value
     *
     * @return boolean
     */
    public function hasBaselineNr(){
      return $this->_has(2);
    }
    
    /**
     * Clear <baseline_nr> value
     *
     * @return \CCLCMsg_BaselineAck
     */
    public function clearBaselineNr(){
      return $this->_clear(2);
    }
    
    /**
     * Get <baseline_nr> value
     *
     * @return int
     */
    public function getBaselineNr(){
      return $this->_get(2);
    }
    
    /**
     * Set <baseline_nr> value
     *
     * @param int $value
     * @return \CCLCMsg_BaselineAck
     */
    public function setBaselineNr( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace  {

  class CCLCMsg_ListenEvents extends \DrSlump\Protobuf\Message {

    /**  @var int[]  */
    public $event_mask = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CCLCMsg_ListenEvents');

      // REPEATED FIXED32 event_mask = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "event_mask";
      $f->type      = \DrSlump\Protobuf::TYPE_FIXED32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <event_mask> has a value
     *
     * @return boolean
     */
    public function hasEventMask(){
      return $this->_has(1);
    }
    
    /**
     * Clear <event_mask> value
     *
     * @return \CCLCMsg_ListenEvents
     */
    public function clearEventMask(){
      return $this->_clear(1);
    }
    
    /**
     * Get <event_mask> value
     *
     * @param int $idx
     * @return int
     */
    public function getEventMask($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <event_mask> value
     *
     * @param int $value
     * @return \CCLCMsg_ListenEvents
     */
    public function setEventMask( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <event_mask>
     *
     * @return int[]
     */
    public function getEventMaskList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <event_mask>
     *
     * @param int $value
     * @return \CCLCMsg_ListenEvents
     */
    public function addEventMask( $value){
     return $this->_add(1, $value);
    }
  }
}

namespace  {

  class CCLCMsg_RespondCvarValue extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $cookie = null;
    
    /**  @var int */
    public $status_code = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CCLCMsg_RespondCvarValue');

      // OPTIONAL INT32 cookie = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cookie";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 status_code = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "status_code";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cookie> has a value
     *
     * @return boolean
     */
    public function hasCookie(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cookie> value
     *
     * @return \CCLCMsg_RespondCvarValue
     */
    public function clearCookie(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cookie> value
     *
     * @return int
     */
    public function getCookie(){
      return $this->_get(1);
    }
    
    /**
     * Set <cookie> value
     *
     * @param int $value
     * @return \CCLCMsg_RespondCvarValue
     */
    public function setCookie( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <status_code> has a value
     *
     * @return boolean
     */
    public function hasStatusCode(){
      return $this->_has(2);
    }
    
    /**
     * Clear <status_code> value
     *
     * @return \CCLCMsg_RespondCvarValue
     */
    public function clearStatusCode(){
      return $this->_clear(2);
    }
    
    /**
     * Get <status_code> value
     *
     * @return int
     */
    public function getStatusCode(){
      return $this->_get(2);
    }
    
    /**
     * Set <status_code> value
     *
     * @param int $value
     * @return \CCLCMsg_RespondCvarValue
     */
    public function setStatusCode( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <name> value
     *
     * @return \CCLCMsg_RespondCvarValue
     */
    public function clearName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(3);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \CCLCMsg_RespondCvarValue
     */
    public function setName( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(4);
    }
    
    /**
     * Clear <value> value
     *
     * @return \CCLCMsg_RespondCvarValue
     */
    public function clearValue(){
      return $this->_clear(4);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(4);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \CCLCMsg_RespondCvarValue
     */
    public function setValue( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace  {

  class CCLCMsg_FileCRCCheck extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $code_path = null;
    
    /**  @var string */
    public $path = null;
    
    /**  @var int */
    public $code_filename = null;
    
    /**  @var string */
    public $filename = null;
    
    /**  @var int */
    public $crc = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CCLCMsg_FileCRCCheck');

      // OPTIONAL INT32 code_path = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "code_path";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING path = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "path";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 code_filename = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "code_filename";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING filename = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "filename";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FIXED32 crc = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "crc";
      $f->type      = \DrSlump\Protobuf::TYPE_FIXED32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <code_path> has a value
     *
     * @return boolean
     */
    public function hasCodePath(){
      return $this->_has(1);
    }
    
    /**
     * Clear <code_path> value
     *
     * @return \CCLCMsg_FileCRCCheck
     */
    public function clearCodePath(){
      return $this->_clear(1);
    }
    
    /**
     * Get <code_path> value
     *
     * @return int
     */
    public function getCodePath(){
      return $this->_get(1);
    }
    
    /**
     * Set <code_path> value
     *
     * @param int $value
     * @return \CCLCMsg_FileCRCCheck
     */
    public function setCodePath( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <path> has a value
     *
     * @return boolean
     */
    public function hasPath(){
      return $this->_has(2);
    }
    
    /**
     * Clear <path> value
     *
     * @return \CCLCMsg_FileCRCCheck
     */
    public function clearPath(){
      return $this->_clear(2);
    }
    
    /**
     * Get <path> value
     *
     * @return string
     */
    public function getPath(){
      return $this->_get(2);
    }
    
    /**
     * Set <path> value
     *
     * @param string $value
     * @return \CCLCMsg_FileCRCCheck
     */
    public function setPath( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <code_filename> has a value
     *
     * @return boolean
     */
    public function hasCodeFilename(){
      return $this->_has(3);
    }
    
    /**
     * Clear <code_filename> value
     *
     * @return \CCLCMsg_FileCRCCheck
     */
    public function clearCodeFilename(){
      return $this->_clear(3);
    }
    
    /**
     * Get <code_filename> value
     *
     * @return int
     */
    public function getCodeFilename(){
      return $this->_get(3);
    }
    
    /**
     * Set <code_filename> value
     *
     * @param int $value
     * @return \CCLCMsg_FileCRCCheck
     */
    public function setCodeFilename( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <filename> has a value
     *
     * @return boolean
     */
    public function hasFilename(){
      return $this->_has(4);
    }
    
    /**
     * Clear <filename> value
     *
     * @return \CCLCMsg_FileCRCCheck
     */
    public function clearFilename(){
      return $this->_clear(4);
    }
    
    /**
     * Get <filename> value
     *
     * @return string
     */
    public function getFilename(){
      return $this->_get(4);
    }
    
    /**
     * Set <filename> value
     *
     * @param string $value
     * @return \CCLCMsg_FileCRCCheck
     */
    public function setFilename( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <crc> has a value
     *
     * @return boolean
     */
    public function hasCrc(){
      return $this->_has(5);
    }
    
    /**
     * Clear <crc> value
     *
     * @return \CCLCMsg_FileCRCCheck
     */
    public function clearCrc(){
      return $this->_clear(5);
    }
    
    /**
     * Get <crc> value
     *
     * @return int
     */
    public function getCrc(){
      return $this->_get(5);
    }
    
    /**
     * Set <crc> value
     *
     * @param int $value
     * @return \CCLCMsg_FileCRCCheck
     */
    public function setCrc( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace  {

  class CCLCMsg_LoadingProgress extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $progress = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CCLCMsg_LoadingProgress');

      // OPTIONAL INT32 progress = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "progress";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <progress> has a value
     *
     * @return boolean
     */
    public function hasProgress(){
      return $this->_has(1);
    }
    
    /**
     * Clear <progress> value
     *
     * @return \CCLCMsg_LoadingProgress
     */
    public function clearProgress(){
      return $this->_clear(1);
    }
    
    /**
     * Get <progress> value
     *
     * @return int
     */
    public function getProgress(){
      return $this->_get(1);
    }
    
    /**
     * Set <progress> value
     *
     * @param int $value
     * @return \CCLCMsg_LoadingProgress
     */
    public function setProgress( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace  {

  class CCLCMsg_SplitPlayerConnect extends \DrSlump\Protobuf\Message {

    /**  @var \CMsg_CVars */
    public $convars = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CCLCMsg_SplitPlayerConnect');

      // OPTIONAL MESSAGE convars = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "convars";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\CMsg_CVars';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <convars> has a value
     *
     * @return boolean
     */
    public function hasConvars(){
      return $this->_has(1);
    }
    
    /**
     * Clear <convars> value
     *
     * @return \CCLCMsg_SplitPlayerConnect
     */
    public function clearConvars(){
      return $this->_clear(1);
    }
    
    /**
     * Get <convars> value
     *
     * @return \CMsg_CVars
     */
    public function getConvars(){
      return $this->_get(1);
    }
    
    /**
     * Set <convars> value
     *
     * @param \CMsg_CVars $value
     * @return \CCLCMsg_SplitPlayerConnect
     */
    public function setConvars(\CMsg_CVars $value){
      return $this->_set(1, $value);
    }
  }
}

namespace  {

  class CCLCMsg_ClientMessage extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $msg_type = null;
    
    /**  @var string */
    public $data = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CCLCMsg_ClientMessage');

      // OPTIONAL INT32 msg_type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "msg_type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES data = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "data";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <msg_type> has a value
     *
     * @return boolean
     */
    public function hasMsgType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <msg_type> value
     *
     * @return \CCLCMsg_ClientMessage
     */
    public function clearMsgType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <msg_type> value
     *
     * @return int
     */
    public function getMsgType(){
      return $this->_get(1);
    }
    
    /**
     * Set <msg_type> value
     *
     * @param int $value
     * @return \CCLCMsg_ClientMessage
     */
    public function setMsgType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <data> has a value
     *
     * @return boolean
     */
    public function hasData(){
      return $this->_has(2);
    }
    
    /**
     * Clear <data> value
     *
     * @return \CCLCMsg_ClientMessage
     */
    public function clearData(){
      return $this->_clear(2);
    }
    
    /**
     * Get <data> value
     *
     * @return string
     */
    public function getData(){
      return $this->_get(2);
    }
    
    /**
     * Set <data> value
     *
     * @param string $value
     * @return \CCLCMsg_ClientMessage
     */
    public function setData( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace  {

  class CSVCMsg_ServerInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $protocol = null;
    
    /**  @var int */
    public $server_count = null;
    
    /**  @var boolean */
    public $is_dedicated = null;
    
    /**  @var boolean */
    public $is_hltv = null;
    
    /**  @var boolean */
    public $is_replay = null;
    
    /**  @var int */
    public $c_os = null;
    
    /**  @var int */
    public $map_crc = null;
    
    /**  @var int */
    public $client_crc = null;
    
    /**  @var int */
    public $string_table_crc = null;
    
    /**  @var int */
    public $max_clients = null;
    
    /**  @var int */
    public $max_classes = null;
    
    /**  @var int */
    public $player_slot = null;
    
    /**  @var float */
    public $tick_interval = null;
    
    /**  @var string */
    public $game_dir = null;
    
    /**  @var string */
    public $map_name = null;
    
    /**  @var string */
    public $sky_name = null;
    
    /**  @var string */
    public $host_name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CSVCMsg_ServerInfo');

      // OPTIONAL INT32 protocol = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "protocol";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 server_count = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "server_count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL is_dedicated = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "is_dedicated";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL is_hltv = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "is_hltv";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL is_replay = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "is_replay";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 c_os = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "c_os";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FIXED32 map_crc = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "map_crc";
      $f->type      = \DrSlump\Protobuf::TYPE_FIXED32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FIXED32 client_crc = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "client_crc";
      $f->type      = \DrSlump\Protobuf::TYPE_FIXED32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FIXED32 string_table_crc = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "string_table_crc";
      $f->type      = \DrSlump\Protobuf::TYPE_FIXED32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 max_clients = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "max_clients";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 max_classes = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "max_classes";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 player_slot = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "player_slot";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT tick_interval = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "tick_interval";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING game_dir = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "game_dir";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING map_name = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "map_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING sky_name = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "sky_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING host_name = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "host_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <protocol> has a value
     *
     * @return boolean
     */
    public function hasProtocol(){
      return $this->_has(1);
    }
    
    /**
     * Clear <protocol> value
     *
     * @return \CSVCMsg_ServerInfo
     */
    public function clearProtocol(){
      return $this->_clear(1);
    }
    
    /**
     * Get <protocol> value
     *
     * @return int
     */
    public function getProtocol(){
      return $this->_get(1);
    }
    
    /**
     * Set <protocol> value
     *
     * @param int $value
     * @return \CSVCMsg_ServerInfo
     */
    public function setProtocol( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <server_count> has a value
     *
     * @return boolean
     */
    public function hasServerCount(){
      return $this->_has(2);
    }
    
    /**
     * Clear <server_count> value
     *
     * @return \CSVCMsg_ServerInfo
     */
    public function clearServerCount(){
      return $this->_clear(2);
    }
    
    /**
     * Get <server_count> value
     *
     * @return int
     */
    public function getServerCount(){
      return $this->_get(2);
    }
    
    /**
     * Set <server_count> value
     *
     * @param int $value
     * @return \CSVCMsg_ServerInfo
     */
    public function setServerCount( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <is_dedicated> has a value
     *
     * @return boolean
     */
    public function hasIsDedicated(){
      return $this->_has(3);
    }
    
    /**
     * Clear <is_dedicated> value
     *
     * @return \CSVCMsg_ServerInfo
     */
    public function clearIsDedicated(){
      return $this->_clear(3);
    }
    
    /**
     * Get <is_dedicated> value
     *
     * @return boolean
     */
    public function getIsDedicated(){
      return $this->_get(3);
    }
    
    /**
     * Set <is_dedicated> value
     *
     * @param boolean $value
     * @return \CSVCMsg_ServerInfo
     */
    public function setIsDedicated( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <is_hltv> has a value
     *
     * @return boolean
     */
    public function hasIsHltv(){
      return $this->_has(4);
    }
    
    /**
     * Clear <is_hltv> value
     *
     * @return \CSVCMsg_ServerInfo
     */
    public function clearIsHltv(){
      return $this->_clear(4);
    }
    
    /**
     * Get <is_hltv> value
     *
     * @return boolean
     */
    public function getIsHltv(){
      return $this->_get(4);
    }
    
    /**
     * Set <is_hltv> value
     *
     * @param boolean $value
     * @return \CSVCMsg_ServerInfo
     */
    public function setIsHltv( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <is_replay> has a value
     *
     * @return boolean
     */
    public function hasIsReplay(){
      return $this->_has(5);
    }
    
    /**
     * Clear <is_replay> value
     *
     * @return \CSVCMsg_ServerInfo
     */
    public function clearIsReplay(){
      return $this->_clear(5);
    }
    
    /**
     * Get <is_replay> value
     *
     * @return boolean
     */
    public function getIsReplay(){
      return $this->_get(5);
    }
    
    /**
     * Set <is_replay> value
     *
     * @param boolean $value
     * @return \CSVCMsg_ServerInfo
     */
    public function setIsReplay( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <c_os> has a value
     *
     * @return boolean
     */
    public function hasCOs(){
      return $this->_has(6);
    }
    
    /**
     * Clear <c_os> value
     *
     * @return \CSVCMsg_ServerInfo
     */
    public function clearCOs(){
      return $this->_clear(6);
    }
    
    /**
     * Get <c_os> value
     *
     * @return int
     */
    public function getCOs(){
      return $this->_get(6);
    }
    
    /**
     * Set <c_os> value
     *
     * @param int $value
     * @return \CSVCMsg_ServerInfo
     */
    public function setCOs( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <map_crc> has a value
     *
     * @return boolean
     */
    public function hasMapCrc(){
      return $this->_has(7);
    }
    
    /**
     * Clear <map_crc> value
     *
     * @return \CSVCMsg_ServerInfo
     */
    public function clearMapCrc(){
      return $this->_clear(7);
    }
    
    /**
     * Get <map_crc> value
     *
     * @return int
     */
    public function getMapCrc(){
      return $this->_get(7);
    }
    
    /**
     * Set <map_crc> value
     *
     * @param int $value
     * @return \CSVCMsg_ServerInfo
     */
    public function setMapCrc( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <client_crc> has a value
     *
     * @return boolean
     */
    public function hasClientCrc(){
      return $this->_has(8);
    }
    
    /**
     * Clear <client_crc> value
     *
     * @return \CSVCMsg_ServerInfo
     */
    public function clearClientCrc(){
      return $this->_clear(8);
    }
    
    /**
     * Get <client_crc> value
     *
     * @return int
     */
    public function getClientCrc(){
      return $this->_get(8);
    }
    
    /**
     * Set <client_crc> value
     *
     * @param int $value
     * @return \CSVCMsg_ServerInfo
     */
    public function setClientCrc( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <string_table_crc> has a value
     *
     * @return boolean
     */
    public function hasStringTableCrc(){
      return $this->_has(9);
    }
    
    /**
     * Clear <string_table_crc> value
     *
     * @return \CSVCMsg_ServerInfo
     */
    public function clearStringTableCrc(){
      return $this->_clear(9);
    }
    
    /**
     * Get <string_table_crc> value
     *
     * @return int
     */
    public function getStringTableCrc(){
      return $this->_get(9);
    }
    
    /**
     * Set <string_table_crc> value
     *
     * @param int $value
     * @return \CSVCMsg_ServerInfo
     */
    public function setStringTableCrc( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <max_clients> has a value
     *
     * @return boolean
     */
    public function hasMaxClients(){
      return $this->_has(10);
    }
    
    /**
     * Clear <max_clients> value
     *
     * @return \CSVCMsg_ServerInfo
     */
    public function clearMaxClients(){
      return $this->_clear(10);
    }
    
    /**
     * Get <max_clients> value
     *
     * @return int
     */
    public function getMaxClients(){
      return $this->_get(10);
    }
    
    /**
     * Set <max_clients> value
     *
     * @param int $value
     * @return \CSVCMsg_ServerInfo
     */
    public function setMaxClients( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <max_classes> has a value
     *
     * @return boolean
     */
    public function hasMaxClasses(){
      return $this->_has(11);
    }
    
    /**
     * Clear <max_classes> value
     *
     * @return \CSVCMsg_ServerInfo
     */
    public function clearMaxClasses(){
      return $this->_clear(11);
    }
    
    /**
     * Get <max_classes> value
     *
     * @return int
     */
    public function getMaxClasses(){
      return $this->_get(11);
    }
    
    /**
     * Set <max_classes> value
     *
     * @param int $value
     * @return \CSVCMsg_ServerInfo
     */
    public function setMaxClasses( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <player_slot> has a value
     *
     * @return boolean
     */
    public function hasPlayerSlot(){
      return $this->_has(12);
    }
    
    /**
     * Clear <player_slot> value
     *
     * @return \CSVCMsg_ServerInfo
     */
    public function clearPlayerSlot(){
      return $this->_clear(12);
    }
    
    /**
     * Get <player_slot> value
     *
     * @return int
     */
    public function getPlayerSlot(){
      return $this->_get(12);
    }
    
    /**
     * Set <player_slot> value
     *
     * @param int $value
     * @return \CSVCMsg_ServerInfo
     */
    public function setPlayerSlot( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <tick_interval> has a value
     *
     * @return boolean
     */
    public function hasTickInterval(){
      return $this->_has(13);
    }
    
    /**
     * Clear <tick_interval> value
     *
     * @return \CSVCMsg_ServerInfo
     */
    public function clearTickInterval(){
      return $this->_clear(13);
    }
    
    /**
     * Get <tick_interval> value
     *
     * @return float
     */
    public function getTickInterval(){
      return $this->_get(13);
    }
    
    /**
     * Set <tick_interval> value
     *
     * @param float $value
     * @return \CSVCMsg_ServerInfo
     */
    public function setTickInterval( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <game_dir> has a value
     *
     * @return boolean
     */
    public function hasGameDir(){
      return $this->_has(14);
    }
    
    /**
     * Clear <game_dir> value
     *
     * @return \CSVCMsg_ServerInfo
     */
    public function clearGameDir(){
      return $this->_clear(14);
    }
    
    /**
     * Get <game_dir> value
     *
     * @return string
     */
    public function getGameDir(){
      return $this->_get(14);
    }
    
    /**
     * Set <game_dir> value
     *
     * @param string $value
     * @return \CSVCMsg_ServerInfo
     */
    public function setGameDir( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <map_name> has a value
     *
     * @return boolean
     */
    public function hasMapName(){
      return $this->_has(15);
    }
    
    /**
     * Clear <map_name> value
     *
     * @return \CSVCMsg_ServerInfo
     */
    public function clearMapName(){
      return $this->_clear(15);
    }
    
    /**
     * Get <map_name> value
     *
     * @return string
     */
    public function getMapName(){
      return $this->_get(15);
    }
    
    /**
     * Set <map_name> value
     *
     * @param string $value
     * @return \CSVCMsg_ServerInfo
     */
    public function setMapName( $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <sky_name> has a value
     *
     * @return boolean
     */
    public function hasSkyName(){
      return $this->_has(16);
    }
    
    /**
     * Clear <sky_name> value
     *
     * @return \CSVCMsg_ServerInfo
     */
    public function clearSkyName(){
      return $this->_clear(16);
    }
    
    /**
     * Get <sky_name> value
     *
     * @return string
     */
    public function getSkyName(){
      return $this->_get(16);
    }
    
    /**
     * Set <sky_name> value
     *
     * @param string $value
     * @return \CSVCMsg_ServerInfo
     */
    public function setSkyName( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <host_name> has a value
     *
     * @return boolean
     */
    public function hasHostName(){
      return $this->_has(17);
    }
    
    /**
     * Clear <host_name> value
     *
     * @return \CSVCMsg_ServerInfo
     */
    public function clearHostName(){
      return $this->_clear(17);
    }
    
    /**
     * Get <host_name> value
     *
     * @return string
     */
    public function getHostName(){
      return $this->_get(17);
    }
    
    /**
     * Set <host_name> value
     *
     * @param string $value
     * @return \CSVCMsg_ServerInfo
     */
    public function setHostName( $value){
      return $this->_set(17, $value);
    }
  }
}

namespace CSVCMsg_ClassInfo {

  class class_t extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $class_id = null;
    
    /**  @var string */
    public $data_table_name = null;
    
    /**  @var string */
    public $class_name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CSVCMsg_ClassInfo.class_t');

      // OPTIONAL INT32 class_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "class_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING data_table_name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "data_table_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING class_name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "class_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <class_id> has a value
     *
     * @return boolean
     */
    public function hasClassId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <class_id> value
     *
     * @return \CSVCMsg_ClassInfo\class_t
     */
    public function clearClassId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <class_id> value
     *
     * @return int
     */
    public function getClassId(){
      return $this->_get(1);
    }
    
    /**
     * Set <class_id> value
     *
     * @param int $value
     * @return \CSVCMsg_ClassInfo\class_t
     */
    public function setClassId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <data_table_name> has a value
     *
     * @return boolean
     */
    public function hasDataTableName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <data_table_name> value
     *
     * @return \CSVCMsg_ClassInfo\class_t
     */
    public function clearDataTableName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <data_table_name> value
     *
     * @return string
     */
    public function getDataTableName(){
      return $this->_get(2);
    }
    
    /**
     * Set <data_table_name> value
     *
     * @param string $value
     * @return \CSVCMsg_ClassInfo\class_t
     */
    public function setDataTableName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <class_name> has a value
     *
     * @return boolean
     */
    public function hasClassName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <class_name> value
     *
     * @return \CSVCMsg_ClassInfo\class_t
     */
    public function clearClassName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <class_name> value
     *
     * @return string
     */
    public function getClassName(){
      return $this->_get(3);
    }
    
    /**
     * Set <class_name> value
     *
     * @param string $value
     * @return \CSVCMsg_ClassInfo\class_t
     */
    public function setClassName( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace  {

  class CSVCMsg_ClassInfo extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $create_on_client = null;
    
    /**  @var \CSVCMsg_ClassInfo\class_t[]  */
    public $classes = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CSVCMsg_ClassInfo');

      // OPTIONAL BOOL create_on_client = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "create_on_client";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE classes = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "classes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\CSVCMsg_ClassInfo\class_t';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <create_on_client> has a value
     *
     * @return boolean
     */
    public function hasCreateOnClient(){
      return $this->_has(1);
    }
    
    /**
     * Clear <create_on_client> value
     *
     * @return \CSVCMsg_ClassInfo
     */
    public function clearCreateOnClient(){
      return $this->_clear(1);
    }
    
    /**
     * Get <create_on_client> value
     *
     * @return boolean
     */
    public function getCreateOnClient(){
      return $this->_get(1);
    }
    
    /**
     * Set <create_on_client> value
     *
     * @param boolean $value
     * @return \CSVCMsg_ClassInfo
     */
    public function setCreateOnClient( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <classes> has a value
     *
     * @return boolean
     */
    public function hasClasses(){
      return $this->_has(2);
    }
    
    /**
     * Clear <classes> value
     *
     * @return \CSVCMsg_ClassInfo
     */
    public function clearClasses(){
      return $this->_clear(2);
    }
    
    /**
     * Get <classes> value
     *
     * @param int $idx
     * @return \CSVCMsg_ClassInfo\class_t
     */
    public function getClasses($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <classes> value
     *
     * @param \CSVCMsg_ClassInfo\class_t $value
     * @return \CSVCMsg_ClassInfo
     */
    public function setClasses(\CSVCMsg_ClassInfo\class_t $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <classes>
     *
     * @return \CSVCMsg_ClassInfo\class_t[]
     */
    public function getClassesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <classes>
     *
     * @param \CSVCMsg_ClassInfo\class_t $value
     * @return \CSVCMsg_ClassInfo
     */
    public function addClasses(\CSVCMsg_ClassInfo\class_t $value){
     return $this->_add(2, $value);
    }
  }
}

namespace  {

  class CSVCMsg_SetPause extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $paused = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CSVCMsg_SetPause');

      // OPTIONAL BOOL paused = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "paused";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <paused> has a value
     *
     * @return boolean
     */
    public function hasPaused(){
      return $this->_has(1);
    }
    
    /**
     * Clear <paused> value
     *
     * @return \CSVCMsg_SetPause
     */
    public function clearPaused(){
      return $this->_clear(1);
    }
    
    /**
     * Get <paused> value
     *
     * @return boolean
     */
    public function getPaused(){
      return $this->_get(1);
    }
    
    /**
     * Set <paused> value
     *
     * @param boolean $value
     * @return \CSVCMsg_SetPause
     */
    public function setPaused( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace  {

  class CSVCMsg_VoiceInit extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $quality = null;
    
    /**  @var string */
    public $codec = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CSVCMsg_VoiceInit');

      // OPTIONAL INT32 quality = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "quality";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING codec = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "codec";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <quality> has a value
     *
     * @return boolean
     */
    public function hasQuality(){
      return $this->_has(1);
    }
    
    /**
     * Clear <quality> value
     *
     * @return \CSVCMsg_VoiceInit
     */
    public function clearQuality(){
      return $this->_clear(1);
    }
    
    /**
     * Get <quality> value
     *
     * @return int
     */
    public function getQuality(){
      return $this->_get(1);
    }
    
    /**
     * Set <quality> value
     *
     * @param int $value
     * @return \CSVCMsg_VoiceInit
     */
    public function setQuality( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <codec> has a value
     *
     * @return boolean
     */
    public function hasCodec(){
      return $this->_has(2);
    }
    
    /**
     * Clear <codec> value
     *
     * @return \CSVCMsg_VoiceInit
     */
    public function clearCodec(){
      return $this->_clear(2);
    }
    
    /**
     * Get <codec> value
     *
     * @return string
     */
    public function getCodec(){
      return $this->_get(2);
    }
    
    /**
     * Set <codec> value
     *
     * @param string $value
     * @return \CSVCMsg_VoiceInit
     */
    public function setCodec( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace  {

  class CSVCMsg_Print extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $text = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CSVCMsg_Print');

      // OPTIONAL STRING text = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "text";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <text> has a value
     *
     * @return boolean
     */
    public function hasText(){
      return $this->_has(1);
    }
    
    /**
     * Clear <text> value
     *
     * @return \CSVCMsg_Print
     */
    public function clearText(){
      return $this->_clear(1);
    }
    
    /**
     * Get <text> value
     *
     * @return string
     */
    public function getText(){
      return $this->_get(1);
    }
    
    /**
     * Set <text> value
     *
     * @param string $value
     * @return \CSVCMsg_Print
     */
    public function setText( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace CSVCMsg_Sounds {

  class sounddata_t extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $origin_x = null;
    
    /**  @var int */
    public $origin_y = null;
    
    /**  @var int */
    public $origin_z = null;
    
    /**  @var int */
    public $volume = null;
    
    /**  @var float */
    public $delay_value = null;
    
    /**  @var int */
    public $sequence_number = null;
    
    /**  @var int */
    public $entity_index = null;
    
    /**  @var int */
    public $channel = null;
    
    /**  @var int */
    public $pitch = null;
    
    /**  @var int */
    public $flags = null;
    
    /**  @var int */
    public $sound_num = null;
    
    /**  @var int */
    public $sound_num_handle = null;
    
    /**  @var int */
    public $speaker_entity = null;
    
    /**  @var int */
    public $random_seed = null;
    
    /**  @var int */
    public $sound_level = null;
    
    /**  @var boolean */
    public $is_sentence = null;
    
    /**  @var boolean */
    public $is_ambient = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CSVCMsg_Sounds.sounddata_t');

      // OPTIONAL SINT32 origin_x = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "origin_x";
      $f->type      = \DrSlump\Protobuf::TYPE_SINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL SINT32 origin_y = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "origin_y";
      $f->type      = \DrSlump\Protobuf::TYPE_SINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL SINT32 origin_z = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "origin_z";
      $f->type      = \DrSlump\Protobuf::TYPE_SINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 volume = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "volume";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT delay_value = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "delay_value";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 sequence_number = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "sequence_number";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 entity_index = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "entity_index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 channel = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "channel";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 pitch = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "pitch";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 flags = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "flags";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 sound_num = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "sound_num";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FIXED32 sound_num_handle = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "sound_num_handle";
      $f->type      = \DrSlump\Protobuf::TYPE_FIXED32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 speaker_entity = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "speaker_entity";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 random_seed = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "random_seed";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 sound_level = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "sound_level";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL is_sentence = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "is_sentence";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL is_ambient = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "is_ambient";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <origin_x> has a value
     *
     * @return boolean
     */
    public function hasOriginX(){
      return $this->_has(1);
    }
    
    /**
     * Clear <origin_x> value
     *
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function clearOriginX(){
      return $this->_clear(1);
    }
    
    /**
     * Get <origin_x> value
     *
     * @return int
     */
    public function getOriginX(){
      return $this->_get(1);
    }
    
    /**
     * Set <origin_x> value
     *
     * @param int $value
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function setOriginX( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <origin_y> has a value
     *
     * @return boolean
     */
    public function hasOriginY(){
      return $this->_has(2);
    }
    
    /**
     * Clear <origin_y> value
     *
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function clearOriginY(){
      return $this->_clear(2);
    }
    
    /**
     * Get <origin_y> value
     *
     * @return int
     */
    public function getOriginY(){
      return $this->_get(2);
    }
    
    /**
     * Set <origin_y> value
     *
     * @param int $value
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function setOriginY( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <origin_z> has a value
     *
     * @return boolean
     */
    public function hasOriginZ(){
      return $this->_has(3);
    }
    
    /**
     * Clear <origin_z> value
     *
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function clearOriginZ(){
      return $this->_clear(3);
    }
    
    /**
     * Get <origin_z> value
     *
     * @return int
     */
    public function getOriginZ(){
      return $this->_get(3);
    }
    
    /**
     * Set <origin_z> value
     *
     * @param int $value
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function setOriginZ( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <volume> has a value
     *
     * @return boolean
     */
    public function hasVolume(){
      return $this->_has(4);
    }
    
    /**
     * Clear <volume> value
     *
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function clearVolume(){
      return $this->_clear(4);
    }
    
    /**
     * Get <volume> value
     *
     * @return int
     */
    public function getVolume(){
      return $this->_get(4);
    }
    
    /**
     * Set <volume> value
     *
     * @param int $value
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function setVolume( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <delay_value> has a value
     *
     * @return boolean
     */
    public function hasDelayValue(){
      return $this->_has(5);
    }
    
    /**
     * Clear <delay_value> value
     *
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function clearDelayValue(){
      return $this->_clear(5);
    }
    
    /**
     * Get <delay_value> value
     *
     * @return float
     */
    public function getDelayValue(){
      return $this->_get(5);
    }
    
    /**
     * Set <delay_value> value
     *
     * @param float $value
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function setDelayValue( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <sequence_number> has a value
     *
     * @return boolean
     */
    public function hasSequenceNumber(){
      return $this->_has(6);
    }
    
    /**
     * Clear <sequence_number> value
     *
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function clearSequenceNumber(){
      return $this->_clear(6);
    }
    
    /**
     * Get <sequence_number> value
     *
     * @return int
     */
    public function getSequenceNumber(){
      return $this->_get(6);
    }
    
    /**
     * Set <sequence_number> value
     *
     * @param int $value
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function setSequenceNumber( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <entity_index> has a value
     *
     * @return boolean
     */
    public function hasEntityIndex(){
      return $this->_has(7);
    }
    
    /**
     * Clear <entity_index> value
     *
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function clearEntityIndex(){
      return $this->_clear(7);
    }
    
    /**
     * Get <entity_index> value
     *
     * @return int
     */
    public function getEntityIndex(){
      return $this->_get(7);
    }
    
    /**
     * Set <entity_index> value
     *
     * @param int $value
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function setEntityIndex( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <channel> has a value
     *
     * @return boolean
     */
    public function hasChannel(){
      return $this->_has(8);
    }
    
    /**
     * Clear <channel> value
     *
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function clearChannel(){
      return $this->_clear(8);
    }
    
    /**
     * Get <channel> value
     *
     * @return int
     */
    public function getChannel(){
      return $this->_get(8);
    }
    
    /**
     * Set <channel> value
     *
     * @param int $value
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function setChannel( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <pitch> has a value
     *
     * @return boolean
     */
    public function hasPitch(){
      return $this->_has(9);
    }
    
    /**
     * Clear <pitch> value
     *
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function clearPitch(){
      return $this->_clear(9);
    }
    
    /**
     * Get <pitch> value
     *
     * @return int
     */
    public function getPitch(){
      return $this->_get(9);
    }
    
    /**
     * Set <pitch> value
     *
     * @param int $value
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function setPitch( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <flags> has a value
     *
     * @return boolean
     */
    public function hasFlags(){
      return $this->_has(10);
    }
    
    /**
     * Clear <flags> value
     *
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function clearFlags(){
      return $this->_clear(10);
    }
    
    /**
     * Get <flags> value
     *
     * @return int
     */
    public function getFlags(){
      return $this->_get(10);
    }
    
    /**
     * Set <flags> value
     *
     * @param int $value
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function setFlags( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <sound_num> has a value
     *
     * @return boolean
     */
    public function hasSoundNum(){
      return $this->_has(11);
    }
    
    /**
     * Clear <sound_num> value
     *
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function clearSoundNum(){
      return $this->_clear(11);
    }
    
    /**
     * Get <sound_num> value
     *
     * @return int
     */
    public function getSoundNum(){
      return $this->_get(11);
    }
    
    /**
     * Set <sound_num> value
     *
     * @param int $value
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function setSoundNum( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <sound_num_handle> has a value
     *
     * @return boolean
     */
    public function hasSoundNumHandle(){
      return $this->_has(12);
    }
    
    /**
     * Clear <sound_num_handle> value
     *
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function clearSoundNumHandle(){
      return $this->_clear(12);
    }
    
    /**
     * Get <sound_num_handle> value
     *
     * @return int
     */
    public function getSoundNumHandle(){
      return $this->_get(12);
    }
    
    /**
     * Set <sound_num_handle> value
     *
     * @param int $value
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function setSoundNumHandle( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <speaker_entity> has a value
     *
     * @return boolean
     */
    public function hasSpeakerEntity(){
      return $this->_has(13);
    }
    
    /**
     * Clear <speaker_entity> value
     *
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function clearSpeakerEntity(){
      return $this->_clear(13);
    }
    
    /**
     * Get <speaker_entity> value
     *
     * @return int
     */
    public function getSpeakerEntity(){
      return $this->_get(13);
    }
    
    /**
     * Set <speaker_entity> value
     *
     * @param int $value
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function setSpeakerEntity( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <random_seed> has a value
     *
     * @return boolean
     */
    public function hasRandomSeed(){
      return $this->_has(14);
    }
    
    /**
     * Clear <random_seed> value
     *
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function clearRandomSeed(){
      return $this->_clear(14);
    }
    
    /**
     * Get <random_seed> value
     *
     * @return int
     */
    public function getRandomSeed(){
      return $this->_get(14);
    }
    
    /**
     * Set <random_seed> value
     *
     * @param int $value
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function setRandomSeed( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <sound_level> has a value
     *
     * @return boolean
     */
    public function hasSoundLevel(){
      return $this->_has(15);
    }
    
    /**
     * Clear <sound_level> value
     *
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function clearSoundLevel(){
      return $this->_clear(15);
    }
    
    /**
     * Get <sound_level> value
     *
     * @return int
     */
    public function getSoundLevel(){
      return $this->_get(15);
    }
    
    /**
     * Set <sound_level> value
     *
     * @param int $value
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function setSoundLevel( $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <is_sentence> has a value
     *
     * @return boolean
     */
    public function hasIsSentence(){
      return $this->_has(16);
    }
    
    /**
     * Clear <is_sentence> value
     *
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function clearIsSentence(){
      return $this->_clear(16);
    }
    
    /**
     * Get <is_sentence> value
     *
     * @return boolean
     */
    public function getIsSentence(){
      return $this->_get(16);
    }
    
    /**
     * Set <is_sentence> value
     *
     * @param boolean $value
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function setIsSentence( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <is_ambient> has a value
     *
     * @return boolean
     */
    public function hasIsAmbient(){
      return $this->_has(17);
    }
    
    /**
     * Clear <is_ambient> value
     *
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function clearIsAmbient(){
      return $this->_clear(17);
    }
    
    /**
     * Get <is_ambient> value
     *
     * @return boolean
     */
    public function getIsAmbient(){
      return $this->_get(17);
    }
    
    /**
     * Set <is_ambient> value
     *
     * @param boolean $value
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function setIsAmbient( $value){
      return $this->_set(17, $value);
    }
  }
}

namespace  {

  class CSVCMsg_Sounds extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $reliable_sound = null;
    
    /**  @var \CSVCMsg_Sounds\sounddata_t[]  */
    public $sounds = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CSVCMsg_Sounds');

      // OPTIONAL BOOL reliable_sound = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "reliable_sound";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE sounds = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "sounds";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\CSVCMsg_Sounds\sounddata_t';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <reliable_sound> has a value
     *
     * @return boolean
     */
    public function hasReliableSound(){
      return $this->_has(1);
    }
    
    /**
     * Clear <reliable_sound> value
     *
     * @return \CSVCMsg_Sounds
     */
    public function clearReliableSound(){
      return $this->_clear(1);
    }
    
    /**
     * Get <reliable_sound> value
     *
     * @return boolean
     */
    public function getReliableSound(){
      return $this->_get(1);
    }
    
    /**
     * Set <reliable_sound> value
     *
     * @param boolean $value
     * @return \CSVCMsg_Sounds
     */
    public function setReliableSound( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <sounds> has a value
     *
     * @return boolean
     */
    public function hasSounds(){
      return $this->_has(2);
    }
    
    /**
     * Clear <sounds> value
     *
     * @return \CSVCMsg_Sounds
     */
    public function clearSounds(){
      return $this->_clear(2);
    }
    
    /**
     * Get <sounds> value
     *
     * @param int $idx
     * @return \CSVCMsg_Sounds\sounddata_t
     */
    public function getSounds($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <sounds> value
     *
     * @param \CSVCMsg_Sounds\sounddata_t $value
     * @return \CSVCMsg_Sounds
     */
    public function setSounds(\CSVCMsg_Sounds\sounddata_t $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <sounds>
     *
     * @return \CSVCMsg_Sounds\sounddata_t[]
     */
    public function getSoundsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <sounds>
     *
     * @param \CSVCMsg_Sounds\sounddata_t $value
     * @return \CSVCMsg_Sounds
     */
    public function addSounds(\CSVCMsg_Sounds\sounddata_t $value){
     return $this->_add(2, $value);
    }
  }
}

namespace  {

  class CSVCMsg_Prefetch extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $sound_index = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CSVCMsg_Prefetch');

      // OPTIONAL INT32 sound_index = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "sound_index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <sound_index> has a value
     *
     * @return boolean
     */
    public function hasSoundIndex(){
      return $this->_has(1);
    }
    
    /**
     * Clear <sound_index> value
     *
     * @return \CSVCMsg_Prefetch
     */
    public function clearSoundIndex(){
      return $this->_clear(1);
    }
    
    /**
     * Get <sound_index> value
     *
     * @return int
     */
    public function getSoundIndex(){
      return $this->_get(1);
    }
    
    /**
     * Set <sound_index> value
     *
     * @param int $value
     * @return \CSVCMsg_Prefetch
     */
    public function setSoundIndex( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace  {

  class CSVCMsg_SetView extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $entity_index = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CSVCMsg_SetView');

      // OPTIONAL INT32 entity_index = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "entity_index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <entity_index> has a value
     *
     * @return boolean
     */
    public function hasEntityIndex(){
      return $this->_has(1);
    }
    
    /**
     * Clear <entity_index> value
     *
     * @return \CSVCMsg_SetView
     */
    public function clearEntityIndex(){
      return $this->_clear(1);
    }
    
    /**
     * Get <entity_index> value
     *
     * @return int
     */
    public function getEntityIndex(){
      return $this->_get(1);
    }
    
    /**
     * Set <entity_index> value
     *
     * @param int $value
     * @return \CSVCMsg_SetView
     */
    public function setEntityIndex( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace  {

  class CSVCMsg_FixAngle extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $relative = null;
    
    /**  @var \CMsgQAngle */
    public $angle = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CSVCMsg_FixAngle');

      // OPTIONAL BOOL relative = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "relative";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE angle = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "angle";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\CMsgQAngle';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <relative> has a value
     *
     * @return boolean
     */
    public function hasRelative(){
      return $this->_has(1);
    }
    
    /**
     * Clear <relative> value
     *
     * @return \CSVCMsg_FixAngle
     */
    public function clearRelative(){
      return $this->_clear(1);
    }
    
    /**
     * Get <relative> value
     *
     * @return boolean
     */
    public function getRelative(){
      return $this->_get(1);
    }
    
    /**
     * Set <relative> value
     *
     * @param boolean $value
     * @return \CSVCMsg_FixAngle
     */
    public function setRelative( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <angle> has a value
     *
     * @return boolean
     */
    public function hasAngle(){
      return $this->_has(2);
    }
    
    /**
     * Clear <angle> value
     *
     * @return \CSVCMsg_FixAngle
     */
    public function clearAngle(){
      return $this->_clear(2);
    }
    
    /**
     * Get <angle> value
     *
     * @return \CMsgQAngle
     */
    public function getAngle(){
      return $this->_get(2);
    }
    
    /**
     * Set <angle> value
     *
     * @param \CMsgQAngle $value
     * @return \CSVCMsg_FixAngle
     */
    public function setAngle(\CMsgQAngle $value){
      return $this->_set(2, $value);
    }
  }
}

namespace  {

  class CSVCMsg_CrosshairAngle extends \DrSlump\Protobuf\Message {

    /**  @var \CMsgQAngle */
    public $angle = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CSVCMsg_CrosshairAngle');

      // OPTIONAL MESSAGE angle = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "angle";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\CMsgQAngle';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <angle> has a value
     *
     * @return boolean
     */
    public function hasAngle(){
      return $this->_has(1);
    }
    
    /**
     * Clear <angle> value
     *
     * @return \CSVCMsg_CrosshairAngle
     */
    public function clearAngle(){
      return $this->_clear(1);
    }
    
    /**
     * Get <angle> value
     *
     * @return \CMsgQAngle
     */
    public function getAngle(){
      return $this->_get(1);
    }
    
    /**
     * Set <angle> value
     *
     * @param \CMsgQAngle $value
     * @return \CSVCMsg_CrosshairAngle
     */
    public function setAngle(\CMsgQAngle $value){
      return $this->_set(1, $value);
    }
  }
}

namespace  {

  class CSVCMsg_BSPDecal extends \DrSlump\Protobuf\Message {

    /**  @var \CMsgVector */
    public $pos = null;
    
    /**  @var int */
    public $decal_texture_index = null;
    
    /**  @var int */
    public $entity_index = null;
    
    /**  @var int */
    public $model_index = null;
    
    /**  @var boolean */
    public $low_priority = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CSVCMsg_BSPDecal');

      // OPTIONAL MESSAGE pos = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "pos";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\CMsgVector';
      $descriptor->addField($f);

      // OPTIONAL INT32 decal_texture_index = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "decal_texture_index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 entity_index = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "entity_index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 model_index = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "model_index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL low_priority = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "low_priority";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <pos> has a value
     *
     * @return boolean
     */
    public function hasPos(){
      return $this->_has(1);
    }
    
    /**
     * Clear <pos> value
     *
     * @return \CSVCMsg_BSPDecal
     */
    public function clearPos(){
      return $this->_clear(1);
    }
    
    /**
     * Get <pos> value
     *
     * @return \CMsgVector
     */
    public function getPos(){
      return $this->_get(1);
    }
    
    /**
     * Set <pos> value
     *
     * @param \CMsgVector $value
     * @return \CSVCMsg_BSPDecal
     */
    public function setPos(\CMsgVector $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <decal_texture_index> has a value
     *
     * @return boolean
     */
    public function hasDecalTextureIndex(){
      return $this->_has(2);
    }
    
    /**
     * Clear <decal_texture_index> value
     *
     * @return \CSVCMsg_BSPDecal
     */
    public function clearDecalTextureIndex(){
      return $this->_clear(2);
    }
    
    /**
     * Get <decal_texture_index> value
     *
     * @return int
     */
    public function getDecalTextureIndex(){
      return $this->_get(2);
    }
    
    /**
     * Set <decal_texture_index> value
     *
     * @param int $value
     * @return \CSVCMsg_BSPDecal
     */
    public function setDecalTextureIndex( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <entity_index> has a value
     *
     * @return boolean
     */
    public function hasEntityIndex(){
      return $this->_has(3);
    }
    
    /**
     * Clear <entity_index> value
     *
     * @return \CSVCMsg_BSPDecal
     */
    public function clearEntityIndex(){
      return $this->_clear(3);
    }
    
    /**
     * Get <entity_index> value
     *
     * @return int
     */
    public function getEntityIndex(){
      return $this->_get(3);
    }
    
    /**
     * Set <entity_index> value
     *
     * @param int $value
     * @return \CSVCMsg_BSPDecal
     */
    public function setEntityIndex( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <model_index> has a value
     *
     * @return boolean
     */
    public function hasModelIndex(){
      return $this->_has(4);
    }
    
    /**
     * Clear <model_index> value
     *
     * @return \CSVCMsg_BSPDecal
     */
    public function clearModelIndex(){
      return $this->_clear(4);
    }
    
    /**
     * Get <model_index> value
     *
     * @return int
     */
    public function getModelIndex(){
      return $this->_get(4);
    }
    
    /**
     * Set <model_index> value
     *
     * @param int $value
     * @return \CSVCMsg_BSPDecal
     */
    public function setModelIndex( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <low_priority> has a value
     *
     * @return boolean
     */
    public function hasLowPriority(){
      return $this->_has(5);
    }
    
    /**
     * Clear <low_priority> value
     *
     * @return \CSVCMsg_BSPDecal
     */
    public function clearLowPriority(){
      return $this->_clear(5);
    }
    
    /**
     * Get <low_priority> value
     *
     * @return boolean
     */
    public function getLowPriority(){
      return $this->_get(5);
    }
    
    /**
     * Set <low_priority> value
     *
     * @param boolean $value
     * @return \CSVCMsg_BSPDecal
     */
    public function setLowPriority( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace  {

  class CSVCMsg_SplitScreen extends \DrSlump\Protobuf\Message {

    /**  @var int - \ESplitScreenMessageType */
    public $type = null;
    
    /**  @var int */
    public $slot = null;
    
    /**  @var int */
    public $player_index = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CSVCMsg_SplitScreen');

      // OPTIONAL ENUM type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\ESplitScreenMessageType';
      $descriptor->addField($f);

      // OPTIONAL INT32 slot = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "slot";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 player_index = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "player_index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <type> value
     *
     * @return \CSVCMsg_SplitScreen
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \ESplitScreenMessageType
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \ESplitScreenMessageType $value
     * @return \CSVCMsg_SplitScreen
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <slot> has a value
     *
     * @return boolean
     */
    public function hasSlot(){
      return $this->_has(2);
    }
    
    /**
     * Clear <slot> value
     *
     * @return \CSVCMsg_SplitScreen
     */
    public function clearSlot(){
      return $this->_clear(2);
    }
    
    /**
     * Get <slot> value
     *
     * @return int
     */
    public function getSlot(){
      return $this->_get(2);
    }
    
    /**
     * Set <slot> value
     *
     * @param int $value
     * @return \CSVCMsg_SplitScreen
     */
    public function setSlot( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <player_index> has a value
     *
     * @return boolean
     */
    public function hasPlayerIndex(){
      return $this->_has(3);
    }
    
    /**
     * Clear <player_index> value
     *
     * @return \CSVCMsg_SplitScreen
     */
    public function clearPlayerIndex(){
      return $this->_clear(3);
    }
    
    /**
     * Get <player_index> value
     *
     * @return int
     */
    public function getPlayerIndex(){
      return $this->_get(3);
    }
    
    /**
     * Set <player_index> value
     *
     * @param int $value
     * @return \CSVCMsg_SplitScreen
     */
    public function setPlayerIndex( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace  {

  class CSVCMsg_GetCvarValue extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $cookie = null;
    
    /**  @var string */
    public $cvar_name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CSVCMsg_GetCvarValue');

      // OPTIONAL INT32 cookie = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cookie";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING cvar_name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "cvar_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cookie> has a value
     *
     * @return boolean
     */
    public function hasCookie(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cookie> value
     *
     * @return \CSVCMsg_GetCvarValue
     */
    public function clearCookie(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cookie> value
     *
     * @return int
     */
    public function getCookie(){
      return $this->_get(1);
    }
    
    /**
     * Set <cookie> value
     *
     * @param int $value
     * @return \CSVCMsg_GetCvarValue
     */
    public function setCookie( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <cvar_name> has a value
     *
     * @return boolean
     */
    public function hasCvarName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <cvar_name> value
     *
     * @return \CSVCMsg_GetCvarValue
     */
    public function clearCvarName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <cvar_name> value
     *
     * @return string
     */
    public function getCvarName(){
      return $this->_get(2);
    }
    
    /**
     * Set <cvar_name> value
     *
     * @param string $value
     * @return \CSVCMsg_GetCvarValue
     */
    public function setCvarName( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace  {

  class CSVCMsg_Menu extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $dialog_type = null;
    
    /**  @var string */
    public $menu_key_values = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CSVCMsg_Menu');

      // OPTIONAL INT32 dialog_type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "dialog_type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES menu_key_values = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "menu_key_values";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <dialog_type> has a value
     *
     * @return boolean
     */
    public function hasDialogType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <dialog_type> value
     *
     * @return \CSVCMsg_Menu
     */
    public function clearDialogType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <dialog_type> value
     *
     * @return int
     */
    public function getDialogType(){
      return $this->_get(1);
    }
    
    /**
     * Set <dialog_type> value
     *
     * @param int $value
     * @return \CSVCMsg_Menu
     */
    public function setDialogType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <menu_key_values> has a value
     *
     * @return boolean
     */
    public function hasMenuKeyValues(){
      return $this->_has(2);
    }
    
    /**
     * Clear <menu_key_values> value
     *
     * @return \CSVCMsg_Menu
     */
    public function clearMenuKeyValues(){
      return $this->_clear(2);
    }
    
    /**
     * Get <menu_key_values> value
     *
     * @return string
     */
    public function getMenuKeyValues(){
      return $this->_get(2);
    }
    
    /**
     * Set <menu_key_values> value
     *
     * @param string $value
     * @return \CSVCMsg_Menu
     */
    public function setMenuKeyValues( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace CSVCMsg_SendTable {

  class sendprop_t extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $type = null;
    
    /**  @var string */
    public $var_name = null;
    
    /**  @var int */
    public $flags = null;
    
    /**  @var int */
    public $priority = null;
    
    /**  @var string */
    public $dt_name = null;
    
    /**  @var int */
    public $num_elements = null;
    
    /**  @var float */
    public $low_value = null;
    
    /**  @var float */
    public $high_value = null;
    
    /**  @var int */
    public $num_bits = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CSVCMsg_SendTable.sendprop_t');

      // OPTIONAL INT32 type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING var_name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "var_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 flags = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "flags";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 priority = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "priority";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING dt_name = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "dt_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 num_elements = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "num_elements";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT low_value = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "low_value";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT high_value = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "high_value";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 num_bits = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "num_bits";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <type> value
     *
     * @return \CSVCMsg_SendTable\sendprop_t
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \CSVCMsg_SendTable\sendprop_t
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <var_name> has a value
     *
     * @return boolean
     */
    public function hasVarName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <var_name> value
     *
     * @return \CSVCMsg_SendTable\sendprop_t
     */
    public function clearVarName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <var_name> value
     *
     * @return string
     */
    public function getVarName(){
      return $this->_get(2);
    }
    
    /**
     * Set <var_name> value
     *
     * @param string $value
     * @return \CSVCMsg_SendTable\sendprop_t
     */
    public function setVarName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <flags> has a value
     *
     * @return boolean
     */
    public function hasFlags(){
      return $this->_has(3);
    }
    
    /**
     * Clear <flags> value
     *
     * @return \CSVCMsg_SendTable\sendprop_t
     */
    public function clearFlags(){
      return $this->_clear(3);
    }
    
    /**
     * Get <flags> value
     *
     * @return int
     */
    public function getFlags(){
      return $this->_get(3);
    }
    
    /**
     * Set <flags> value
     *
     * @param int $value
     * @return \CSVCMsg_SendTable\sendprop_t
     */
    public function setFlags( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <priority> has a value
     *
     * @return boolean
     */
    public function hasPriority(){
      return $this->_has(4);
    }
    
    /**
     * Clear <priority> value
     *
     * @return \CSVCMsg_SendTable\sendprop_t
     */
    public function clearPriority(){
      return $this->_clear(4);
    }
    
    /**
     * Get <priority> value
     *
     * @return int
     */
    public function getPriority(){
      return $this->_get(4);
    }
    
    /**
     * Set <priority> value
     *
     * @param int $value
     * @return \CSVCMsg_SendTable\sendprop_t
     */
    public function setPriority( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <dt_name> has a value
     *
     * @return boolean
     */
    public function hasDtName(){
      return $this->_has(5);
    }
    
    /**
     * Clear <dt_name> value
     *
     * @return \CSVCMsg_SendTable\sendprop_t
     */
    public function clearDtName(){
      return $this->_clear(5);
    }
    
    /**
     * Get <dt_name> value
     *
     * @return string
     */
    public function getDtName(){
      return $this->_get(5);
    }
    
    /**
     * Set <dt_name> value
     *
     * @param string $value
     * @return \CSVCMsg_SendTable\sendprop_t
     */
    public function setDtName( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <num_elements> has a value
     *
     * @return boolean
     */
    public function hasNumElements(){
      return $this->_has(6);
    }
    
    /**
     * Clear <num_elements> value
     *
     * @return \CSVCMsg_SendTable\sendprop_t
     */
    public function clearNumElements(){
      return $this->_clear(6);
    }
    
    /**
     * Get <num_elements> value
     *
     * @return int
     */
    public function getNumElements(){
      return $this->_get(6);
    }
    
    /**
     * Set <num_elements> value
     *
     * @param int $value
     * @return \CSVCMsg_SendTable\sendprop_t
     */
    public function setNumElements( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <low_value> has a value
     *
     * @return boolean
     */
    public function hasLowValue(){
      return $this->_has(7);
    }
    
    /**
     * Clear <low_value> value
     *
     * @return \CSVCMsg_SendTable\sendprop_t
     */
    public function clearLowValue(){
      return $this->_clear(7);
    }
    
    /**
     * Get <low_value> value
     *
     * @return float
     */
    public function getLowValue(){
      return $this->_get(7);
    }
    
    /**
     * Set <low_value> value
     *
     * @param float $value
     * @return \CSVCMsg_SendTable\sendprop_t
     */
    public function setLowValue( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <high_value> has a value
     *
     * @return boolean
     */
    public function hasHighValue(){
      return $this->_has(8);
    }
    
    /**
     * Clear <high_value> value
     *
     * @return \CSVCMsg_SendTable\sendprop_t
     */
    public function clearHighValue(){
      return $this->_clear(8);
    }
    
    /**
     * Get <high_value> value
     *
     * @return float
     */
    public function getHighValue(){
      return $this->_get(8);
    }
    
    /**
     * Set <high_value> value
     *
     * @param float $value
     * @return \CSVCMsg_SendTable\sendprop_t
     */
    public function setHighValue( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <num_bits> has a value
     *
     * @return boolean
     */
    public function hasNumBits(){
      return $this->_has(9);
    }
    
    /**
     * Clear <num_bits> value
     *
     * @return \CSVCMsg_SendTable\sendprop_t
     */
    public function clearNumBits(){
      return $this->_clear(9);
    }
    
    /**
     * Get <num_bits> value
     *
     * @return int
     */
    public function getNumBits(){
      return $this->_get(9);
    }
    
    /**
     * Set <num_bits> value
     *
     * @param int $value
     * @return \CSVCMsg_SendTable\sendprop_t
     */
    public function setNumBits( $value){
      return $this->_set(9, $value);
    }
  }
}

namespace  {

  class CSVCMsg_SendTable extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $is_end = null;
    
    /**  @var string */
    public $net_table_name = null;
    
    /**  @var boolean */
    public $needs_decoder = null;
    
    /**  @var \CSVCMsg_SendTable\sendprop_t[]  */
    public $props = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CSVCMsg_SendTable');

      // OPTIONAL BOOL is_end = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "is_end";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING net_table_name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "net_table_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL needs_decoder = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "needs_decoder";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE props = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "props";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\CSVCMsg_SendTable\sendprop_t';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <is_end> has a value
     *
     * @return boolean
     */
    public function hasIsEnd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <is_end> value
     *
     * @return \CSVCMsg_SendTable
     */
    public function clearIsEnd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <is_end> value
     *
     * @return boolean
     */
    public function getIsEnd(){
      return $this->_get(1);
    }
    
    /**
     * Set <is_end> value
     *
     * @param boolean $value
     * @return \CSVCMsg_SendTable
     */
    public function setIsEnd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <net_table_name> has a value
     *
     * @return boolean
     */
    public function hasNetTableName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <net_table_name> value
     *
     * @return \CSVCMsg_SendTable
     */
    public function clearNetTableName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <net_table_name> value
     *
     * @return string
     */
    public function getNetTableName(){
      return $this->_get(2);
    }
    
    /**
     * Set <net_table_name> value
     *
     * @param string $value
     * @return \CSVCMsg_SendTable
     */
    public function setNetTableName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <needs_decoder> has a value
     *
     * @return boolean
     */
    public function hasNeedsDecoder(){
      return $this->_has(3);
    }
    
    /**
     * Clear <needs_decoder> value
     *
     * @return \CSVCMsg_SendTable
     */
    public function clearNeedsDecoder(){
      return $this->_clear(3);
    }
    
    /**
     * Get <needs_decoder> value
     *
     * @return boolean
     */
    public function getNeedsDecoder(){
      return $this->_get(3);
    }
    
    /**
     * Set <needs_decoder> value
     *
     * @param boolean $value
     * @return \CSVCMsg_SendTable
     */
    public function setNeedsDecoder( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <props> has a value
     *
     * @return boolean
     */
    public function hasProps(){
      return $this->_has(4);
    }
    
    /**
     * Clear <props> value
     *
     * @return \CSVCMsg_SendTable
     */
    public function clearProps(){
      return $this->_clear(4);
    }
    
    /**
     * Get <props> value
     *
     * @param int $idx
     * @return \CSVCMsg_SendTable\sendprop_t
     */
    public function getProps($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <props> value
     *
     * @param \CSVCMsg_SendTable\sendprop_t $value
     * @return \CSVCMsg_SendTable
     */
    public function setProps(\CSVCMsg_SendTable\sendprop_t $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <props>
     *
     * @return \CSVCMsg_SendTable\sendprop_t[]
     */
    public function getPropsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <props>
     *
     * @param \CSVCMsg_SendTable\sendprop_t $value
     * @return \CSVCMsg_SendTable
     */
    public function addProps(\CSVCMsg_SendTable\sendprop_t $value){
     return $this->_add(4, $value);
    }
  }
}

namespace CSVCMsg_GameEvent {

  class key_t extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $type = null;
    
    /**  @var string */
    public $val_string = null;
    
    /**  @var float */
    public $val_float = null;
    
    /**  @var int */
    public $val_long = null;
    
    /**  @var int */
    public $val_short = null;
    
    /**  @var int */
    public $val_byte = null;
    
    /**  @var boolean */
    public $val_bool = null;
    
    /**  @var int */
    public $val_uint64 = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CSVCMsg_GameEvent.key_t');

      // OPTIONAL INT32 type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING val_string = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "val_string";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT val_float = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "val_float";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 val_long = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "val_long";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 val_short = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "val_short";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 val_byte = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "val_byte";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL val_bool = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "val_bool";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 val_uint64 = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "val_uint64";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <type> value
     *
     * @return \CSVCMsg_GameEvent\key_t
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \CSVCMsg_GameEvent\key_t
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <val_string> has a value
     *
     * @return boolean
     */
    public function hasValString(){
      return $this->_has(2);
    }
    
    /**
     * Clear <val_string> value
     *
     * @return \CSVCMsg_GameEvent\key_t
     */
    public function clearValString(){
      return $this->_clear(2);
    }
    
    /**
     * Get <val_string> value
     *
     * @return string
     */
    public function getValString(){
      return $this->_get(2);
    }
    
    /**
     * Set <val_string> value
     *
     * @param string $value
     * @return \CSVCMsg_GameEvent\key_t
     */
    public function setValString( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <val_float> has a value
     *
     * @return boolean
     */
    public function hasValFloat(){
      return $this->_has(3);
    }
    
    /**
     * Clear <val_float> value
     *
     * @return \CSVCMsg_GameEvent\key_t
     */
    public function clearValFloat(){
      return $this->_clear(3);
    }
    
    /**
     * Get <val_float> value
     *
     * @return float
     */
    public function getValFloat(){
      return $this->_get(3);
    }
    
    /**
     * Set <val_float> value
     *
     * @param float $value
     * @return \CSVCMsg_GameEvent\key_t
     */
    public function setValFloat( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <val_long> has a value
     *
     * @return boolean
     */
    public function hasValLong(){
      return $this->_has(4);
    }
    
    /**
     * Clear <val_long> value
     *
     * @return \CSVCMsg_GameEvent\key_t
     */
    public function clearValLong(){
      return $this->_clear(4);
    }
    
    /**
     * Get <val_long> value
     *
     * @return int
     */
    public function getValLong(){
      return $this->_get(4);
    }
    
    /**
     * Set <val_long> value
     *
     * @param int $value
     * @return \CSVCMsg_GameEvent\key_t
     */
    public function setValLong( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <val_short> has a value
     *
     * @return boolean
     */
    public function hasValShort(){
      return $this->_has(5);
    }
    
    /**
     * Clear <val_short> value
     *
     * @return \CSVCMsg_GameEvent\key_t
     */
    public function clearValShort(){
      return $this->_clear(5);
    }
    
    /**
     * Get <val_short> value
     *
     * @return int
     */
    public function getValShort(){
      return $this->_get(5);
    }
    
    /**
     * Set <val_short> value
     *
     * @param int $value
     * @return \CSVCMsg_GameEvent\key_t
     */
    public function setValShort( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <val_byte> has a value
     *
     * @return boolean
     */
    public function hasValByte(){
      return $this->_has(6);
    }
    
    /**
     * Clear <val_byte> value
     *
     * @return \CSVCMsg_GameEvent\key_t
     */
    public function clearValByte(){
      return $this->_clear(6);
    }
    
    /**
     * Get <val_byte> value
     *
     * @return int
     */
    public function getValByte(){
      return $this->_get(6);
    }
    
    /**
     * Set <val_byte> value
     *
     * @param int $value
     * @return \CSVCMsg_GameEvent\key_t
     */
    public function setValByte( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <val_bool> has a value
     *
     * @return boolean
     */
    public function hasValBool(){
      return $this->_has(7);
    }
    
    /**
     * Clear <val_bool> value
     *
     * @return \CSVCMsg_GameEvent\key_t
     */
    public function clearValBool(){
      return $this->_clear(7);
    }
    
    /**
     * Get <val_bool> value
     *
     * @return boolean
     */
    public function getValBool(){
      return $this->_get(7);
    }
    
    /**
     * Set <val_bool> value
     *
     * @param boolean $value
     * @return \CSVCMsg_GameEvent\key_t
     */
    public function setValBool( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <val_uint64> has a value
     *
     * @return boolean
     */
    public function hasValUint64(){
      return $this->_has(8);
    }
    
    /**
     * Clear <val_uint64> value
     *
     * @return \CSVCMsg_GameEvent\key_t
     */
    public function clearValUint64(){
      return $this->_clear(8);
    }
    
    /**
     * Get <val_uint64> value
     *
     * @return int
     */
    public function getValUint64(){
      return $this->_get(8);
    }
    
    /**
     * Set <val_uint64> value
     *
     * @param int $value
     * @return \CSVCMsg_GameEvent\key_t
     */
    public function setValUint64( $value){
      return $this->_set(8, $value);
    }
  }
}

namespace  {

  class CSVCMsg_GameEvent extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $event_name = null;
    
    /**  @var int */
    public $eventid = null;
    
    /**  @var \CSVCMsg_GameEvent\key_t[]  */
    public $keys = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CSVCMsg_GameEvent');

      // OPTIONAL STRING event_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "event_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 eventid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "eventid";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE keys = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "keys";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\CSVCMsg_GameEvent\key_t';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <event_name> has a value
     *
     * @return boolean
     */
    public function hasEventName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <event_name> value
     *
     * @return \CSVCMsg_GameEvent
     */
    public function clearEventName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <event_name> value
     *
     * @return string
     */
    public function getEventName(){
      return $this->_get(1);
    }
    
    /**
     * Set <event_name> value
     *
     * @param string $value
     * @return \CSVCMsg_GameEvent
     */
    public function setEventName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <eventid> has a value
     *
     * @return boolean
     */
    public function hasEventid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <eventid> value
     *
     * @return \CSVCMsg_GameEvent
     */
    public function clearEventid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <eventid> value
     *
     * @return int
     */
    public function getEventid(){
      return $this->_get(2);
    }
    
    /**
     * Set <eventid> value
     *
     * @param int $value
     * @return \CSVCMsg_GameEvent
     */
    public function setEventid( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <keys> has a value
     *
     * @return boolean
     */
    public function hasKeys(){
      return $this->_has(3);
    }
    
    /**
     * Clear <keys> value
     *
     * @return \CSVCMsg_GameEvent
     */
    public function clearKeys(){
      return $this->_clear(3);
    }
    
    /**
     * Get <keys> value
     *
     * @param int $idx
     * @return \CSVCMsg_GameEvent\key_t
     */
    public function getKeys($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <keys> value
     *
     * @param \CSVCMsg_GameEvent\key_t $value
     * @return \CSVCMsg_GameEvent
     */
    public function setKeys(\CSVCMsg_GameEvent\key_t $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <keys>
     *
     * @return \CSVCMsg_GameEvent\key_t[]
     */
    public function getKeysList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <keys>
     *
     * @param \CSVCMsg_GameEvent\key_t $value
     * @return \CSVCMsg_GameEvent
     */
    public function addKeys(\CSVCMsg_GameEvent\key_t $value){
     return $this->_add(3, $value);
    }
  }
}

namespace CSVCMsg_GameEventList {

  class key_t extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $type = null;
    
    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CSVCMsg_GameEventList.key_t');

      // OPTIONAL INT32 type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <type> value
     *
     * @return \CSVCMsg_GameEventList\key_t
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \CSVCMsg_GameEventList\key_t
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \CSVCMsg_GameEventList\key_t
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \CSVCMsg_GameEventList\key_t
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace CSVCMsg_GameEventList {

  class descriptor_t extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $eventid = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var \CSVCMsg_GameEventList\key_t[]  */
    public $keys = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CSVCMsg_GameEventList.descriptor_t');

      // OPTIONAL INT32 eventid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "eventid";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE keys = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "keys";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\CSVCMsg_GameEventList\key_t';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <eventid> has a value
     *
     * @return boolean
     */
    public function hasEventid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <eventid> value
     *
     * @return \CSVCMsg_GameEventList\descriptor_t
     */
    public function clearEventid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <eventid> value
     *
     * @return int
     */
    public function getEventid(){
      return $this->_get(1);
    }
    
    /**
     * Set <eventid> value
     *
     * @param int $value
     * @return \CSVCMsg_GameEventList\descriptor_t
     */
    public function setEventid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \CSVCMsg_GameEventList\descriptor_t
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \CSVCMsg_GameEventList\descriptor_t
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <keys> has a value
     *
     * @return boolean
     */
    public function hasKeys(){
      return $this->_has(3);
    }
    
    /**
     * Clear <keys> value
     *
     * @return \CSVCMsg_GameEventList\descriptor_t
     */
    public function clearKeys(){
      return $this->_clear(3);
    }
    
    /**
     * Get <keys> value
     *
     * @param int $idx
     * @return \CSVCMsg_GameEventList\key_t
     */
    public function getKeys($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <keys> value
     *
     * @param \CSVCMsg_GameEventList\key_t $value
     * @return \CSVCMsg_GameEventList\descriptor_t
     */
    public function setKeys(\CSVCMsg_GameEventList\key_t $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <keys>
     *
     * @return \CSVCMsg_GameEventList\key_t[]
     */
    public function getKeysList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <keys>
     *
     * @param \CSVCMsg_GameEventList\key_t $value
     * @return \CSVCMsg_GameEventList\descriptor_t
     */
    public function addKeys(\CSVCMsg_GameEventList\key_t $value){
     return $this->_add(3, $value);
    }
  }
}

namespace  {

  class CSVCMsg_GameEventList extends \DrSlump\Protobuf\Message {

    /**  @var \CSVCMsg_GameEventList\descriptor_t[]  */
    public $descriptors = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CSVCMsg_GameEventList');

      // REPEATED MESSAGE descriptors = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "descriptors";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\CSVCMsg_GameEventList\descriptor_t';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <descriptors> has a value
     *
     * @return boolean
     */
    public function hasDescriptors(){
      return $this->_has(1);
    }
    
    /**
     * Clear <descriptors> value
     *
     * @return \CSVCMsg_GameEventList
     */
    public function clearDescriptors(){
      return $this->_clear(1);
    }
    
    /**
     * Get <descriptors> value
     *
     * @param int $idx
     * @return \CSVCMsg_GameEventList\descriptor_t
     */
    public function getDescriptors($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <descriptors> value
     *
     * @param \CSVCMsg_GameEventList\descriptor_t $value
     * @return \CSVCMsg_GameEventList
     */
    public function setDescriptors(\CSVCMsg_GameEventList\descriptor_t $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <descriptors>
     *
     * @return \CSVCMsg_GameEventList\descriptor_t[]
     */
    public function getDescriptorsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <descriptors>
     *
     * @param \CSVCMsg_GameEventList\descriptor_t $value
     * @return \CSVCMsg_GameEventList
     */
    public function addDescriptors(\CSVCMsg_GameEventList\descriptor_t $value){
     return $this->_add(1, $value);
    }
  }
}

namespace  {

  class CSVCMsg_PacketEntities extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $max_entries = null;
    
    /**  @var int */
    public $updated_entries = null;
    
    /**  @var boolean */
    public $is_delta = null;
    
    /**  @var boolean */
    public $update_baseline = null;
    
    /**  @var int */
    public $baseline = null;
    
    /**  @var int */
    public $delta_from = null;
    
    /**  @var string */
    public $entity_data = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CSVCMsg_PacketEntities');

      // OPTIONAL INT32 max_entries = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "max_entries";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 updated_entries = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "updated_entries";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL is_delta = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "is_delta";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL update_baseline = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "update_baseline";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 baseline = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "baseline";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 delta_from = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "delta_from";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES entity_data = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "entity_data";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <max_entries> has a value
     *
     * @return boolean
     */
    public function hasMaxEntries(){
      return $this->_has(1);
    }
    
    /**
     * Clear <max_entries> value
     *
     * @return \CSVCMsg_PacketEntities
     */
    public function clearMaxEntries(){
      return $this->_clear(1);
    }
    
    /**
     * Get <max_entries> value
     *
     * @return int
     */
    public function getMaxEntries(){
      return $this->_get(1);
    }
    
    /**
     * Set <max_entries> value
     *
     * @param int $value
     * @return \CSVCMsg_PacketEntities
     */
    public function setMaxEntries( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <updated_entries> has a value
     *
     * @return boolean
     */
    public function hasUpdatedEntries(){
      return $this->_has(2);
    }
    
    /**
     * Clear <updated_entries> value
     *
     * @return \CSVCMsg_PacketEntities
     */
    public function clearUpdatedEntries(){
      return $this->_clear(2);
    }
    
    /**
     * Get <updated_entries> value
     *
     * @return int
     */
    public function getUpdatedEntries(){
      return $this->_get(2);
    }
    
    /**
     * Set <updated_entries> value
     *
     * @param int $value
     * @return \CSVCMsg_PacketEntities
     */
    public function setUpdatedEntries( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <is_delta> has a value
     *
     * @return boolean
     */
    public function hasIsDelta(){
      return $this->_has(3);
    }
    
    /**
     * Clear <is_delta> value
     *
     * @return \CSVCMsg_PacketEntities
     */
    public function clearIsDelta(){
      return $this->_clear(3);
    }
    
    /**
     * Get <is_delta> value
     *
     * @return boolean
     */
    public function getIsDelta(){
      return $this->_get(3);
    }
    
    /**
     * Set <is_delta> value
     *
     * @param boolean $value
     * @return \CSVCMsg_PacketEntities
     */
    public function setIsDelta( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <update_baseline> has a value
     *
     * @return boolean
     */
    public function hasUpdateBaseline(){
      return $this->_has(4);
    }
    
    /**
     * Clear <update_baseline> value
     *
     * @return \CSVCMsg_PacketEntities
     */
    public function clearUpdateBaseline(){
      return $this->_clear(4);
    }
    
    /**
     * Get <update_baseline> value
     *
     * @return boolean
     */
    public function getUpdateBaseline(){
      return $this->_get(4);
    }
    
    /**
     * Set <update_baseline> value
     *
     * @param boolean $value
     * @return \CSVCMsg_PacketEntities
     */
    public function setUpdateBaseline( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <baseline> has a value
     *
     * @return boolean
     */
    public function hasBaseline(){
      return $this->_has(5);
    }
    
    /**
     * Clear <baseline> value
     *
     * @return \CSVCMsg_PacketEntities
     */
    public function clearBaseline(){
      return $this->_clear(5);
    }
    
    /**
     * Get <baseline> value
     *
     * @return int
     */
    public function getBaseline(){
      return $this->_get(5);
    }
    
    /**
     * Set <baseline> value
     *
     * @param int $value
     * @return \CSVCMsg_PacketEntities
     */
    public function setBaseline( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <delta_from> has a value
     *
     * @return boolean
     */
    public function hasDeltaFrom(){
      return $this->_has(6);
    }
    
    /**
     * Clear <delta_from> value
     *
     * @return \CSVCMsg_PacketEntities
     */
    public function clearDeltaFrom(){
      return $this->_clear(6);
    }
    
    /**
     * Get <delta_from> value
     *
     * @return int
     */
    public function getDeltaFrom(){
      return $this->_get(6);
    }
    
    /**
     * Set <delta_from> value
     *
     * @param int $value
     * @return \CSVCMsg_PacketEntities
     */
    public function setDeltaFrom( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <entity_data> has a value
     *
     * @return boolean
     */
    public function hasEntityData(){
      return $this->_has(7);
    }
    
    /**
     * Clear <entity_data> value
     *
     * @return \CSVCMsg_PacketEntities
     */
    public function clearEntityData(){
      return $this->_clear(7);
    }
    
    /**
     * Get <entity_data> value
     *
     * @return string
     */
    public function getEntityData(){
      return $this->_get(7);
    }
    
    /**
     * Set <entity_data> value
     *
     * @param string $value
     * @return \CSVCMsg_PacketEntities
     */
    public function setEntityData( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace  {

  class CSVCMsg_TempEntities extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $reliable = null;
    
    /**  @var int */
    public $num_entries = null;
    
    /**  @var string */
    public $entity_data = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CSVCMsg_TempEntities');

      // OPTIONAL BOOL reliable = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "reliable";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 num_entries = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "num_entries";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES entity_data = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "entity_data";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <reliable> has a value
     *
     * @return boolean
     */
    public function hasReliable(){
      return $this->_has(1);
    }
    
    /**
     * Clear <reliable> value
     *
     * @return \CSVCMsg_TempEntities
     */
    public function clearReliable(){
      return $this->_clear(1);
    }
    
    /**
     * Get <reliable> value
     *
     * @return boolean
     */
    public function getReliable(){
      return $this->_get(1);
    }
    
    /**
     * Set <reliable> value
     *
     * @param boolean $value
     * @return \CSVCMsg_TempEntities
     */
    public function setReliable( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <num_entries> has a value
     *
     * @return boolean
     */
    public function hasNumEntries(){
      return $this->_has(2);
    }
    
    /**
     * Clear <num_entries> value
     *
     * @return \CSVCMsg_TempEntities
     */
    public function clearNumEntries(){
      return $this->_clear(2);
    }
    
    /**
     * Get <num_entries> value
     *
     * @return int
     */
    public function getNumEntries(){
      return $this->_get(2);
    }
    
    /**
     * Set <num_entries> value
     *
     * @param int $value
     * @return \CSVCMsg_TempEntities
     */
    public function setNumEntries( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <entity_data> has a value
     *
     * @return boolean
     */
    public function hasEntityData(){
      return $this->_has(3);
    }
    
    /**
     * Clear <entity_data> value
     *
     * @return \CSVCMsg_TempEntities
     */
    public function clearEntityData(){
      return $this->_clear(3);
    }
    
    /**
     * Get <entity_data> value
     *
     * @return string
     */
    public function getEntityData(){
      return $this->_get(3);
    }
    
    /**
     * Set <entity_data> value
     *
     * @param string $value
     * @return \CSVCMsg_TempEntities
     */
    public function setEntityData( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace  {

  class CSVCMsg_CreateStringTable extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $max_entries = null;
    
    /**  @var int */
    public $num_entries = null;
    
    /**  @var boolean */
    public $user_data_fixed_size = null;
    
    /**  @var int */
    public $user_data_size = null;
    
    /**  @var int */
    public $user_data_size_bits = null;
    
    /**  @var int */
    public $flags = null;
    
    /**  @var string */
    public $string_data = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CSVCMsg_CreateStringTable');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 max_entries = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "max_entries";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 num_entries = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "num_entries";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL user_data_fixed_size = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "user_data_fixed_size";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 user_data_size = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "user_data_size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 user_data_size_bits = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "user_data_size_bits";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 flags = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "flags";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES string_data = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "string_data";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \CSVCMsg_CreateStringTable
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \CSVCMsg_CreateStringTable
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <max_entries> has a value
     *
     * @return boolean
     */
    public function hasMaxEntries(){
      return $this->_has(2);
    }
    
    /**
     * Clear <max_entries> value
     *
     * @return \CSVCMsg_CreateStringTable
     */
    public function clearMaxEntries(){
      return $this->_clear(2);
    }
    
    /**
     * Get <max_entries> value
     *
     * @return int
     */
    public function getMaxEntries(){
      return $this->_get(2);
    }
    
    /**
     * Set <max_entries> value
     *
     * @param int $value
     * @return \CSVCMsg_CreateStringTable
     */
    public function setMaxEntries( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <num_entries> has a value
     *
     * @return boolean
     */
    public function hasNumEntries(){
      return $this->_has(3);
    }
    
    /**
     * Clear <num_entries> value
     *
     * @return \CSVCMsg_CreateStringTable
     */
    public function clearNumEntries(){
      return $this->_clear(3);
    }
    
    /**
     * Get <num_entries> value
     *
     * @return int
     */
    public function getNumEntries(){
      return $this->_get(3);
    }
    
    /**
     * Set <num_entries> value
     *
     * @param int $value
     * @return \CSVCMsg_CreateStringTable
     */
    public function setNumEntries( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <user_data_fixed_size> has a value
     *
     * @return boolean
     */
    public function hasUserDataFixedSize(){
      return $this->_has(4);
    }
    
    /**
     * Clear <user_data_fixed_size> value
     *
     * @return \CSVCMsg_CreateStringTable
     */
    public function clearUserDataFixedSize(){
      return $this->_clear(4);
    }
    
    /**
     * Get <user_data_fixed_size> value
     *
     * @return boolean
     */
    public function getUserDataFixedSize(){
      return $this->_get(4);
    }
    
    /**
     * Set <user_data_fixed_size> value
     *
     * @param boolean $value
     * @return \CSVCMsg_CreateStringTable
     */
    public function setUserDataFixedSize( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <user_data_size> has a value
     *
     * @return boolean
     */
    public function hasUserDataSize(){
      return $this->_has(5);
    }
    
    /**
     * Clear <user_data_size> value
     *
     * @return \CSVCMsg_CreateStringTable
     */
    public function clearUserDataSize(){
      return $this->_clear(5);
    }
    
    /**
     * Get <user_data_size> value
     *
     * @return int
     */
    public function getUserDataSize(){
      return $this->_get(5);
    }
    
    /**
     * Set <user_data_size> value
     *
     * @param int $value
     * @return \CSVCMsg_CreateStringTable
     */
    public function setUserDataSize( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <user_data_size_bits> has a value
     *
     * @return boolean
     */
    public function hasUserDataSizeBits(){
      return $this->_has(6);
    }
    
    /**
     * Clear <user_data_size_bits> value
     *
     * @return \CSVCMsg_CreateStringTable
     */
    public function clearUserDataSizeBits(){
      return $this->_clear(6);
    }
    
    /**
     * Get <user_data_size_bits> value
     *
     * @return int
     */
    public function getUserDataSizeBits(){
      return $this->_get(6);
    }
    
    /**
     * Set <user_data_size_bits> value
     *
     * @param int $value
     * @return \CSVCMsg_CreateStringTable
     */
    public function setUserDataSizeBits( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <flags> has a value
     *
     * @return boolean
     */
    public function hasFlags(){
      return $this->_has(7);
    }
    
    /**
     * Clear <flags> value
     *
     * @return \CSVCMsg_CreateStringTable
     */
    public function clearFlags(){
      return $this->_clear(7);
    }
    
    /**
     * Get <flags> value
     *
     * @return int
     */
    public function getFlags(){
      return $this->_get(7);
    }
    
    /**
     * Set <flags> value
     *
     * @param int $value
     * @return \CSVCMsg_CreateStringTable
     */
    public function setFlags( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <string_data> has a value
     *
     * @return boolean
     */
    public function hasStringData(){
      return $this->_has(8);
    }
    
    /**
     * Clear <string_data> value
     *
     * @return \CSVCMsg_CreateStringTable
     */
    public function clearStringData(){
      return $this->_clear(8);
    }
    
    /**
     * Get <string_data> value
     *
     * @return string
     */
    public function getStringData(){
      return $this->_get(8);
    }
    
    /**
     * Set <string_data> value
     *
     * @param string $value
     * @return \CSVCMsg_CreateStringTable
     */
    public function setStringData( $value){
      return $this->_set(8, $value);
    }
  }
}

namespace  {

  class CSVCMsg_UpdateStringTable extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $table_id = null;
    
    /**  @var int */
    public $num_changed_entries = null;
    
    /**  @var string */
    public $string_data = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CSVCMsg_UpdateStringTable');

      // OPTIONAL INT32 table_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "table_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 num_changed_entries = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "num_changed_entries";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES string_data = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "string_data";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <table_id> has a value
     *
     * @return boolean
     */
    public function hasTableId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <table_id> value
     *
     * @return \CSVCMsg_UpdateStringTable
     */
    public function clearTableId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <table_id> value
     *
     * @return int
     */
    public function getTableId(){
      return $this->_get(1);
    }
    
    /**
     * Set <table_id> value
     *
     * @param int $value
     * @return \CSVCMsg_UpdateStringTable
     */
    public function setTableId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <num_changed_entries> has a value
     *
     * @return boolean
     */
    public function hasNumChangedEntries(){
      return $this->_has(2);
    }
    
    /**
     * Clear <num_changed_entries> value
     *
     * @return \CSVCMsg_UpdateStringTable
     */
    public function clearNumChangedEntries(){
      return $this->_clear(2);
    }
    
    /**
     * Get <num_changed_entries> value
     *
     * @return int
     */
    public function getNumChangedEntries(){
      return $this->_get(2);
    }
    
    /**
     * Set <num_changed_entries> value
     *
     * @param int $value
     * @return \CSVCMsg_UpdateStringTable
     */
    public function setNumChangedEntries( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <string_data> has a value
     *
     * @return boolean
     */
    public function hasStringData(){
      return $this->_has(3);
    }
    
    /**
     * Clear <string_data> value
     *
     * @return \CSVCMsg_UpdateStringTable
     */
    public function clearStringData(){
      return $this->_clear(3);
    }
    
    /**
     * Get <string_data> value
     *
     * @return string
     */
    public function getStringData(){
      return $this->_get(3);
    }
    
    /**
     * Set <string_data> value
     *
     * @param string $value
     * @return \CSVCMsg_UpdateStringTable
     */
    public function setStringData( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace  {

  class CSVCMsg_UserMessage extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $msg_type = null;
    
    /**  @var string */
    public $msg_data = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CSVCMsg_UserMessage');

      // OPTIONAL INT32 msg_type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "msg_type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES msg_data = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "msg_data";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <msg_type> has a value
     *
     * @return boolean
     */
    public function hasMsgType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <msg_type> value
     *
     * @return \CSVCMsg_UserMessage
     */
    public function clearMsgType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <msg_type> value
     *
     * @return int
     */
    public function getMsgType(){
      return $this->_get(1);
    }
    
    /**
     * Set <msg_type> value
     *
     * @param int $value
     * @return \CSVCMsg_UserMessage
     */
    public function setMsgType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <msg_data> has a value
     *
     * @return boolean
     */
    public function hasMsgData(){
      return $this->_has(2);
    }
    
    /**
     * Clear <msg_data> value
     *
     * @return \CSVCMsg_UserMessage
     */
    public function clearMsgData(){
      return $this->_clear(2);
    }
    
    /**
     * Get <msg_data> value
     *
     * @return string
     */
    public function getMsgData(){
      return $this->_get(2);
    }
    
    /**
     * Set <msg_data> value
     *
     * @param string $value
     * @return \CSVCMsg_UserMessage
     */
    public function setMsgData( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace  {

  class CSVCMsg_VoiceData extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $client = null;
    
    /**  @var boolean */
    public $proximity = null;
    
    /**  @var int */
    public $xuid = null;
    
    /**  @var int */
    public $audible_mask = null;
    
    /**  @var string */
    public $voice_data = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CSVCMsg_VoiceData');

      // OPTIONAL INT32 client = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "client";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL proximity = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "proximity";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FIXED64 xuid = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "xuid";
      $f->type      = \DrSlump\Protobuf::TYPE_FIXED64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 audible_mask = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "audible_mask";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES voice_data = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "voice_data";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <client> has a value
     *
     * @return boolean
     */
    public function hasClient(){
      return $this->_has(1);
    }
    
    /**
     * Clear <client> value
     *
     * @return \CSVCMsg_VoiceData
     */
    public function clearClient(){
      return $this->_clear(1);
    }
    
    /**
     * Get <client> value
     *
     * @return int
     */
    public function getClient(){
      return $this->_get(1);
    }
    
    /**
     * Set <client> value
     *
     * @param int $value
     * @return \CSVCMsg_VoiceData
     */
    public function setClient( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <proximity> has a value
     *
     * @return boolean
     */
    public function hasProximity(){
      return $this->_has(2);
    }
    
    /**
     * Clear <proximity> value
     *
     * @return \CSVCMsg_VoiceData
     */
    public function clearProximity(){
      return $this->_clear(2);
    }
    
    /**
     * Get <proximity> value
     *
     * @return boolean
     */
    public function getProximity(){
      return $this->_get(2);
    }
    
    /**
     * Set <proximity> value
     *
     * @param boolean $value
     * @return \CSVCMsg_VoiceData
     */
    public function setProximity( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <xuid> has a value
     *
     * @return boolean
     */
    public function hasXuid(){
      return $this->_has(3);
    }
    
    /**
     * Clear <xuid> value
     *
     * @return \CSVCMsg_VoiceData
     */
    public function clearXuid(){
      return $this->_clear(3);
    }
    
    /**
     * Get <xuid> value
     *
     * @return int
     */
    public function getXuid(){
      return $this->_get(3);
    }
    
    /**
     * Set <xuid> value
     *
     * @param int $value
     * @return \CSVCMsg_VoiceData
     */
    public function setXuid( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <audible_mask> has a value
     *
     * @return boolean
     */
    public function hasAudibleMask(){
      return $this->_has(4);
    }
    
    /**
     * Clear <audible_mask> value
     *
     * @return \CSVCMsg_VoiceData
     */
    public function clearAudibleMask(){
      return $this->_clear(4);
    }
    
    /**
     * Get <audible_mask> value
     *
     * @return int
     */
    public function getAudibleMask(){
      return $this->_get(4);
    }
    
    /**
     * Set <audible_mask> value
     *
     * @param int $value
     * @return \CSVCMsg_VoiceData
     */
    public function setAudibleMask( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <voice_data> has a value
     *
     * @return boolean
     */
    public function hasVoiceData(){
      return $this->_has(5);
    }
    
    /**
     * Clear <voice_data> value
     *
     * @return \CSVCMsg_VoiceData
     */
    public function clearVoiceData(){
      return $this->_clear(5);
    }
    
    /**
     * Get <voice_data> value
     *
     * @return string
     */
    public function getVoiceData(){
      return $this->_get(5);
    }
    
    /**
     * Set <voice_data> value
     *
     * @param string $value
     * @return \CSVCMsg_VoiceData
     */
    public function setVoiceData( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace CSVCMsgList_GameEvents {

  class event_t extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $tick = null;
    
    /**  @var \CSVCMsg_GameEvent */
    public $event = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CSVCMsgList_GameEvents.event_t');

      // OPTIONAL INT32 tick = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "tick";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE event = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "event";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\CSVCMsg_GameEvent';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <tick> has a value
     *
     * @return boolean
     */
    public function hasTick(){
      return $this->_has(1);
    }
    
    /**
     * Clear <tick> value
     *
     * @return \CSVCMsgList_GameEvents\event_t
     */
    public function clearTick(){
      return $this->_clear(1);
    }
    
    /**
     * Get <tick> value
     *
     * @return int
     */
    public function getTick(){
      return $this->_get(1);
    }
    
    /**
     * Set <tick> value
     *
     * @param int $value
     * @return \CSVCMsgList_GameEvents\event_t
     */
    public function setTick( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <event> has a value
     *
     * @return boolean
     */
    public function hasEvent(){
      return $this->_has(2);
    }
    
    /**
     * Clear <event> value
     *
     * @return \CSVCMsgList_GameEvents\event_t
     */
    public function clearEvent(){
      return $this->_clear(2);
    }
    
    /**
     * Get <event> value
     *
     * @return \CSVCMsg_GameEvent
     */
    public function getEvent(){
      return $this->_get(2);
    }
    
    /**
     * Set <event> value
     *
     * @param \CSVCMsg_GameEvent $value
     * @return \CSVCMsgList_GameEvents\event_t
     */
    public function setEvent(\CSVCMsg_GameEvent $value){
      return $this->_set(2, $value);
    }
  }
}

namespace  {

  class CSVCMsgList_GameEvents extends \DrSlump\Protobuf\Message {

    /**  @var \CSVCMsgList_GameEvents\event_t[]  */
    public $events = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CSVCMsgList_GameEvents');

      // REPEATED MESSAGE events = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "events";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\CSVCMsgList_GameEvents\event_t';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <events> has a value
     *
     * @return boolean
     */
    public function hasEvents(){
      return $this->_has(1);
    }
    
    /**
     * Clear <events> value
     *
     * @return \CSVCMsgList_GameEvents
     */
    public function clearEvents(){
      return $this->_clear(1);
    }
    
    /**
     * Get <events> value
     *
     * @param int $idx
     * @return \CSVCMsgList_GameEvents\event_t
     */
    public function getEvents($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <events> value
     *
     * @param \CSVCMsgList_GameEvents\event_t $value
     * @return \CSVCMsgList_GameEvents
     */
    public function setEvents(\CSVCMsgList_GameEvents\event_t $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <events>
     *
     * @return \CSVCMsgList_GameEvents\event_t[]
     */
    public function getEventsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <events>
     *
     * @param \CSVCMsgList_GameEvents\event_t $value
     * @return \CSVCMsgList_GameEvents
     */
    public function addEvents(\CSVCMsgList_GameEvents\event_t $value){
     return $this->_add(1, $value);
    }
  }
}

namespace CSVCMsgList_UserMessages {

  class usermsg_t extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $tick = null;
    
    /**  @var \CSVCMsg_UserMessage */
    public $msg = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CSVCMsgList_UserMessages.usermsg_t');

      // OPTIONAL INT32 tick = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "tick";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE msg = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "msg";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\CSVCMsg_UserMessage';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <tick> has a value
     *
     * @return boolean
     */
    public function hasTick(){
      return $this->_has(1);
    }
    
    /**
     * Clear <tick> value
     *
     * @return \CSVCMsgList_UserMessages\usermsg_t
     */
    public function clearTick(){
      return $this->_clear(1);
    }
    
    /**
     * Get <tick> value
     *
     * @return int
     */
    public function getTick(){
      return $this->_get(1);
    }
    
    /**
     * Set <tick> value
     *
     * @param int $value
     * @return \CSVCMsgList_UserMessages\usermsg_t
     */
    public function setTick( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <msg> has a value
     *
     * @return boolean
     */
    public function hasMsg(){
      return $this->_has(2);
    }
    
    /**
     * Clear <msg> value
     *
     * @return \CSVCMsgList_UserMessages\usermsg_t
     */
    public function clearMsg(){
      return $this->_clear(2);
    }
    
    /**
     * Get <msg> value
     *
     * @return \CSVCMsg_UserMessage
     */
    public function getMsg(){
      return $this->_get(2);
    }
    
    /**
     * Set <msg> value
     *
     * @param \CSVCMsg_UserMessage $value
     * @return \CSVCMsgList_UserMessages\usermsg_t
     */
    public function setMsg(\CSVCMsg_UserMessage $value){
      return $this->_set(2, $value);
    }
  }
}

namespace  {

  class CSVCMsgList_UserMessages extends \DrSlump\Protobuf\Message {

    /**  @var \CSVCMsgList_UserMessages\usermsg_t[]  */
    public $usermsgs = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CSVCMsgList_UserMessages');

      // REPEATED MESSAGE usermsgs = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "usermsgs";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\CSVCMsgList_UserMessages\usermsg_t';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <usermsgs> has a value
     *
     * @return boolean
     */
    public function hasUsermsgs(){
      return $this->_has(1);
    }
    
    /**
     * Clear <usermsgs> value
     *
     * @return \CSVCMsgList_UserMessages
     */
    public function clearUsermsgs(){
      return $this->_clear(1);
    }
    
    /**
     * Get <usermsgs> value
     *
     * @param int $idx
     * @return \CSVCMsgList_UserMessages\usermsg_t
     */
    public function getUsermsgs($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <usermsgs> value
     *
     * @param \CSVCMsgList_UserMessages\usermsg_t $value
     * @return \CSVCMsgList_UserMessages
     */
    public function setUsermsgs(\CSVCMsgList_UserMessages\usermsg_t $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <usermsgs>
     *
     * @return \CSVCMsgList_UserMessages\usermsg_t[]
     */
    public function getUsermsgsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <usermsgs>
     *
     * @param \CSVCMsgList_UserMessages\usermsg_t $value
     * @return \CSVCMsgList_UserMessages
     */
    public function addUsermsgs(\CSVCMsgList_UserMessages\usermsg_t $value){
     return $this->_add(1, $value);
    }
  }
}

