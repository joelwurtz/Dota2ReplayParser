<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: demo.proto
//   Date: 2012-04-27 16:14:29

namespace  {

  class EDemoCommands extends \DrSlump\Protobuf\Enum {
    const DEM_Error = -1;
    const DEM_Stop = 0;
    const DEM_FileHeader = 1;
    const DEM_FileInfo = 2;
    const DEM_SyncTick = 3;
    const DEM_SendTables = 4;
    const DEM_ClassInfo = 5;
    const DEM_StringTables = 6;
    const DEM_Packet = 7;
    const DEM_SignonPacket = 8;
    const DEM_ConsoleCmd = 9;
    const DEM_CustomData = 10;
    const DEM_CustomDataCallbacks = 11;
    const DEM_UserCmd = 12;
    const DEM_FullPacket = 13;
    const DEM_Max = 14;
    const DEM_IsCompressed = 112;
  }
}
namespace  {

  class CDemoFileHeader extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $demo_file_stamp = null;
    
    /**  @var int */
    public $network_protocol = null;
    
    /**  @var string */
    public $server_name = null;
    
    /**  @var string */
    public $client_name = null;
    
    /**  @var string */
    public $map_name = null;
    
    /**  @var string */
    public $game_directory = null;
    
    /**  @var int */
    public $fullpackets_version = null;
    
    /**  @var boolean */
    public $allow_clientside_entities = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CDemoFileHeader');

      // REQUIRED STRING demo_file_stamp = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "demo_file_stamp";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 network_protocol = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "network_protocol";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING server_name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "server_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING client_name = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "client_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING map_name = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "map_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING game_directory = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "game_directory";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 fullpackets_version = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "fullpackets_version";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL allow_clientside_entities = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "allow_clientside_entities";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <demo_file_stamp> has a value
     *
     * @return boolean
     */
    public function hasDemoFileStamp(){
      return $this->_has(1);
    }
    
    /**
     * Clear <demo_file_stamp> value
     *
     * @return \CDemoFileHeader
     */
    public function clearDemoFileStamp(){
      return $this->_clear(1);
    }
    
    /**
     * Get <demo_file_stamp> value
     *
     * @return string
     */
    public function getDemoFileStamp(){
      return $this->_get(1);
    }
    
    /**
     * Set <demo_file_stamp> value
     *
     * @param string $value
     * @return \CDemoFileHeader
     */
    public function setDemoFileStamp( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <network_protocol> has a value
     *
     * @return boolean
     */
    public function hasNetworkProtocol(){
      return $this->_has(2);
    }
    
    /**
     * Clear <network_protocol> value
     *
     * @return \CDemoFileHeader
     */
    public function clearNetworkProtocol(){
      return $this->_clear(2);
    }
    
    /**
     * Get <network_protocol> value
     *
     * @return int
     */
    public function getNetworkProtocol(){
      return $this->_get(2);
    }
    
    /**
     * Set <network_protocol> value
     *
     * @param int $value
     * @return \CDemoFileHeader
     */
    public function setNetworkProtocol( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <server_name> has a value
     *
     * @return boolean
     */
    public function hasServerName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <server_name> value
     *
     * @return \CDemoFileHeader
     */
    public function clearServerName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <server_name> value
     *
     * @return string
     */
    public function getServerName(){
      return $this->_get(3);
    }
    
    /**
     * Set <server_name> value
     *
     * @param string $value
     * @return \CDemoFileHeader
     */
    public function setServerName( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <client_name> has a value
     *
     * @return boolean
     */
    public function hasClientName(){
      return $this->_has(4);
    }
    
    /**
     * Clear <client_name> value
     *
     * @return \CDemoFileHeader
     */
    public function clearClientName(){
      return $this->_clear(4);
    }
    
    /**
     * Get <client_name> value
     *
     * @return string
     */
    public function getClientName(){
      return $this->_get(4);
    }
    
    /**
     * Set <client_name> value
     *
     * @param string $value
     * @return \CDemoFileHeader
     */
    public function setClientName( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <map_name> has a value
     *
     * @return boolean
     */
    public function hasMapName(){
      return $this->_has(5);
    }
    
    /**
     * Clear <map_name> value
     *
     * @return \CDemoFileHeader
     */
    public function clearMapName(){
      return $this->_clear(5);
    }
    
    /**
     * Get <map_name> value
     *
     * @return string
     */
    public function getMapName(){
      return $this->_get(5);
    }
    
    /**
     * Set <map_name> value
     *
     * @param string $value
     * @return \CDemoFileHeader
     */
    public function setMapName( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <game_directory> has a value
     *
     * @return boolean
     */
    public function hasGameDirectory(){
      return $this->_has(6);
    }
    
    /**
     * Clear <game_directory> value
     *
     * @return \CDemoFileHeader
     */
    public function clearGameDirectory(){
      return $this->_clear(6);
    }
    
    /**
     * Get <game_directory> value
     *
     * @return string
     */
    public function getGameDirectory(){
      return $this->_get(6);
    }
    
    /**
     * Set <game_directory> value
     *
     * @param string $value
     * @return \CDemoFileHeader
     */
    public function setGameDirectory( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <fullpackets_version> has a value
     *
     * @return boolean
     */
    public function hasFullpacketsVersion(){
      return $this->_has(7);
    }
    
    /**
     * Clear <fullpackets_version> value
     *
     * @return \CDemoFileHeader
     */
    public function clearFullpacketsVersion(){
      return $this->_clear(7);
    }
    
    /**
     * Get <fullpackets_version> value
     *
     * @return int
     */
    public function getFullpacketsVersion(){
      return $this->_get(7);
    }
    
    /**
     * Set <fullpackets_version> value
     *
     * @param int $value
     * @return \CDemoFileHeader
     */
    public function setFullpacketsVersion( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <allow_clientside_entities> has a value
     *
     * @return boolean
     */
    public function hasAllowClientsideEntities(){
      return $this->_has(8);
    }
    
    /**
     * Clear <allow_clientside_entities> value
     *
     * @return \CDemoFileHeader
     */
    public function clearAllowClientsideEntities(){
      return $this->_clear(8);
    }
    
    /**
     * Get <allow_clientside_entities> value
     *
     * @return boolean
     */
    public function getAllowClientsideEntities(){
      return $this->_get(8);
    }
    
    /**
     * Set <allow_clientside_entities> value
     *
     * @param boolean $value
     * @return \CDemoFileHeader
     */
    public function setAllowClientsideEntities( $value){
      return $this->_set(8, $value);
    }
  }
}

namespace CGameInfo\CDotaGameInfo {

  class CPlayerInfo extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $hero_name = null;
    
    /**  @var string */
    public $player_name = null;
    
    /**  @var boolean */
    public $is_fake_client = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CGameInfo.CDotaGameInfo.CPlayerInfo');

      // OPTIONAL STRING hero_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "hero_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING player_name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "player_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL is_fake_client = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "is_fake_client";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <hero_name> has a value
     *
     * @return boolean
     */
    public function hasHeroName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <hero_name> value
     *
     * @return \CGameInfo\CDotaGameInfo\CPlayerInfo
     */
    public function clearHeroName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <hero_name> value
     *
     * @return string
     */
    public function getHeroName(){
      return $this->_get(1);
    }
    
    /**
     * Set <hero_name> value
     *
     * @param string $value
     * @return \CGameInfo\CDotaGameInfo\CPlayerInfo
     */
    public function setHeroName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <player_name> has a value
     *
     * @return boolean
     */
    public function hasPlayerName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <player_name> value
     *
     * @return \CGameInfo\CDotaGameInfo\CPlayerInfo
     */
    public function clearPlayerName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <player_name> value
     *
     * @return string
     */
    public function getPlayerName(){
      return $this->_get(2);
    }
    
    /**
     * Set <player_name> value
     *
     * @param string $value
     * @return \CGameInfo\CDotaGameInfo\CPlayerInfo
     */
    public function setPlayerName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <is_fake_client> has a value
     *
     * @return boolean
     */
    public function hasIsFakeClient(){
      return $this->_has(3);
    }
    
    /**
     * Clear <is_fake_client> value
     *
     * @return \CGameInfo\CDotaGameInfo\CPlayerInfo
     */
    public function clearIsFakeClient(){
      return $this->_clear(3);
    }
    
    /**
     * Get <is_fake_client> value
     *
     * @return boolean
     */
    public function getIsFakeClient(){
      return $this->_get(3);
    }
    
    /**
     * Set <is_fake_client> value
     *
     * @param boolean $value
     * @return \CGameInfo\CDotaGameInfo\CPlayerInfo
     */
    public function setIsFakeClient( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace CGameInfo {

  class CDotaGameInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $match_id = null;
    
    /**  @var int */
    public $game_mode = null;
    
    /**  @var int */
    public $game_winner = null;
    
    /**  @var \CGameInfo\CDotaGameInfo\CPlayerInfo[]  */
    public $player_info = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CGameInfo.CDotaGameInfo');

      // OPTIONAL UINT32 match_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "match_id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 game_mode = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "game_mode";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 game_winner = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "game_winner";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE player_info = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "player_info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\CGameInfo\CDotaGameInfo\CPlayerInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <match_id> has a value
     *
     * @return boolean
     */
    public function hasMatchId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <match_id> value
     *
     * @return \CGameInfo\CDotaGameInfo
     */
    public function clearMatchId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <match_id> value
     *
     * @return int
     */
    public function getMatchId(){
      return $this->_get(1);
    }
    
    /**
     * Set <match_id> value
     *
     * @param int $value
     * @return \CGameInfo\CDotaGameInfo
     */
    public function setMatchId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <game_mode> has a value
     *
     * @return boolean
     */
    public function hasGameMode(){
      return $this->_has(2);
    }
    
    /**
     * Clear <game_mode> value
     *
     * @return \CGameInfo\CDotaGameInfo
     */
    public function clearGameMode(){
      return $this->_clear(2);
    }
    
    /**
     * Get <game_mode> value
     *
     * @return int
     */
    public function getGameMode(){
      return $this->_get(2);
    }
    
    /**
     * Set <game_mode> value
     *
     * @param int $value
     * @return \CGameInfo\CDotaGameInfo
     */
    public function setGameMode( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <game_winner> has a value
     *
     * @return boolean
     */
    public function hasGameWinner(){
      return $this->_has(3);
    }
    
    /**
     * Clear <game_winner> value
     *
     * @return \CGameInfo\CDotaGameInfo
     */
    public function clearGameWinner(){
      return $this->_clear(3);
    }
    
    /**
     * Get <game_winner> value
     *
     * @return int
     */
    public function getGameWinner(){
      return $this->_get(3);
    }
    
    /**
     * Set <game_winner> value
     *
     * @param int $value
     * @return \CGameInfo\CDotaGameInfo
     */
    public function setGameWinner( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <player_info> has a value
     *
     * @return boolean
     */
    public function hasPlayerInfo(){
      return $this->_has(4);
    }
    
    /**
     * Clear <player_info> value
     *
     * @return \CGameInfo\CDotaGameInfo
     */
    public function clearPlayerInfo(){
      return $this->_clear(4);
    }
    
    /**
     * Get <player_info> value
     *
     * @param int $idx
     * @return \CGameInfo\CDotaGameInfo\CPlayerInfo
     */
    public function getPlayerInfo($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <player_info> value
     *
     * @param \CGameInfo\CDotaGameInfo\CPlayerInfo $value
     * @return \CGameInfo\CDotaGameInfo
     */
    public function setPlayerInfo(\CGameInfo\CDotaGameInfo\CPlayerInfo $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <player_info>
     *
     * @return \CGameInfo\CDotaGameInfo\CPlayerInfo[]
     */
    public function getPlayerInfoList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <player_info>
     *
     * @param \CGameInfo\CDotaGameInfo\CPlayerInfo $value
     * @return \CGameInfo\CDotaGameInfo
     */
    public function addPlayerInfo(\CGameInfo\CDotaGameInfo\CPlayerInfo $value){
     return $this->_add(4, $value);
    }
  }
}

namespace  {

  class CGameInfo extends \DrSlump\Protobuf\Message {

    /**  @var \CGameInfo\CDotaGameInfo */
    public $dota = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CGameInfo');

      // OPTIONAL MESSAGE dota = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "dota";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\CGameInfo\CDotaGameInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <dota> has a value
     *
     * @return boolean
     */
    public function hasDota(){
      return $this->_has(4);
    }
    
    /**
     * Clear <dota> value
     *
     * @return \CGameInfo
     */
    public function clearDota(){
      return $this->_clear(4);
    }
    
    /**
     * Get <dota> value
     *
     * @return \CGameInfo\CDotaGameInfo
     */
    public function getDota(){
      return $this->_get(4);
    }
    
    /**
     * Set <dota> value
     *
     * @param \CGameInfo\CDotaGameInfo $value
     * @return \CGameInfo
     */
    public function setDota(\CGameInfo\CDotaGameInfo $value){
      return $this->_set(4, $value);
    }
  }
}

namespace  {

  class CDemoFileInfo extends \DrSlump\Protobuf\Message {

    /**  @var float */
    public $playback_time = null;
    
    /**  @var int */
    public $playback_ticks = null;
    
    /**  @var int */
    public $playback_frames = null;
    
    /**  @var \CGameInfo */
    public $game_info = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CDemoFileInfo');

      // OPTIONAL FLOAT playback_time = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "playback_time";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 playback_ticks = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "playback_ticks";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 playback_frames = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "playback_frames";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE game_info = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "game_info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\CGameInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <playback_time> has a value
     *
     * @return boolean
     */
    public function hasPlaybackTime(){
      return $this->_has(1);
    }
    
    /**
     * Clear <playback_time> value
     *
     * @return \CDemoFileInfo
     */
    public function clearPlaybackTime(){
      return $this->_clear(1);
    }
    
    /**
     * Get <playback_time> value
     *
     * @return float
     */
    public function getPlaybackTime(){
      return $this->_get(1);
    }
    
    /**
     * Set <playback_time> value
     *
     * @param float $value
     * @return \CDemoFileInfo
     */
    public function setPlaybackTime( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <playback_ticks> has a value
     *
     * @return boolean
     */
    public function hasPlaybackTicks(){
      return $this->_has(2);
    }
    
    /**
     * Clear <playback_ticks> value
     *
     * @return \CDemoFileInfo
     */
    public function clearPlaybackTicks(){
      return $this->_clear(2);
    }
    
    /**
     * Get <playback_ticks> value
     *
     * @return int
     */
    public function getPlaybackTicks(){
      return $this->_get(2);
    }
    
    /**
     * Set <playback_ticks> value
     *
     * @param int $value
     * @return \CDemoFileInfo
     */
    public function setPlaybackTicks( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <playback_frames> has a value
     *
     * @return boolean
     */
    public function hasPlaybackFrames(){
      return $this->_has(3);
    }
    
    /**
     * Clear <playback_frames> value
     *
     * @return \CDemoFileInfo
     */
    public function clearPlaybackFrames(){
      return $this->_clear(3);
    }
    
    /**
     * Get <playback_frames> value
     *
     * @return int
     */
    public function getPlaybackFrames(){
      return $this->_get(3);
    }
    
    /**
     * Set <playback_frames> value
     *
     * @param int $value
     * @return \CDemoFileInfo
     */
    public function setPlaybackFrames( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <game_info> has a value
     *
     * @return boolean
     */
    public function hasGameInfo(){
      return $this->_has(4);
    }
    
    /**
     * Clear <game_info> value
     *
     * @return \CDemoFileInfo
     */
    public function clearGameInfo(){
      return $this->_clear(4);
    }
    
    /**
     * Get <game_info> value
     *
     * @return \CGameInfo
     */
    public function getGameInfo(){
      return $this->_get(4);
    }
    
    /**
     * Set <game_info> value
     *
     * @param \CGameInfo $value
     * @return \CDemoFileInfo
     */
    public function setGameInfo(\CGameInfo $value){
      return $this->_set(4, $value);
    }
  }
}

namespace  {

  class CDemoPacket extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $sequence_in = null;
    
    /**  @var int */
    public $sequence_out_ack = null;
    
    /**  @var string */
    public $data = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CDemoPacket');

      // OPTIONAL INT32 sequence_in = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "sequence_in";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 sequence_out_ack = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "sequence_out_ack";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES data = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "data";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <sequence_in> has a value
     *
     * @return boolean
     */
    public function hasSequenceIn(){
      return $this->_has(1);
    }
    
    /**
     * Clear <sequence_in> value
     *
     * @return \CDemoPacket
     */
    public function clearSequenceIn(){
      return $this->_clear(1);
    }
    
    /**
     * Get <sequence_in> value
     *
     * @return int
     */
    public function getSequenceIn(){
      return $this->_get(1);
    }
    
    /**
     * Set <sequence_in> value
     *
     * @param int $value
     * @return \CDemoPacket
     */
    public function setSequenceIn( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <sequence_out_ack> has a value
     *
     * @return boolean
     */
    public function hasSequenceOutAck(){
      return $this->_has(2);
    }
    
    /**
     * Clear <sequence_out_ack> value
     *
     * @return \CDemoPacket
     */
    public function clearSequenceOutAck(){
      return $this->_clear(2);
    }
    
    /**
     * Get <sequence_out_ack> value
     *
     * @return int
     */
    public function getSequenceOutAck(){
      return $this->_get(2);
    }
    
    /**
     * Set <sequence_out_ack> value
     *
     * @param int $value
     * @return \CDemoPacket
     */
    public function setSequenceOutAck( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <data> has a value
     *
     * @return boolean
     */
    public function hasData(){
      return $this->_has(3);
    }
    
    /**
     * Clear <data> value
     *
     * @return \CDemoPacket
     */
    public function clearData(){
      return $this->_clear(3);
    }
    
    /**
     * Get <data> value
     *
     * @return string
     */
    public function getData(){
      return $this->_get(3);
    }
    
    /**
     * Set <data> value
     *
     * @param string $value
     * @return \CDemoPacket
     */
    public function setData( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace  {

  class CDemoFullPacket extends \DrSlump\Protobuf\Message {

    /**  @var \CDemoStringTables */
    public $string_table = null;
    
    /**  @var \CDemoPacket */
    public $packet = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CDemoFullPacket');

      // OPTIONAL MESSAGE string_table = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "string_table";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\CDemoStringTables';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE packet = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "packet";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\CDemoPacket';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <string_table> has a value
     *
     * @return boolean
     */
    public function hasStringTable(){
      return $this->_has(1);
    }
    
    /**
     * Clear <string_table> value
     *
     * @return \CDemoFullPacket
     */
    public function clearStringTable(){
      return $this->_clear(1);
    }
    
    /**
     * Get <string_table> value
     *
     * @return \CDemoStringTables
     */
    public function getStringTable(){
      return $this->_get(1);
    }
    
    /**
     * Set <string_table> value
     *
     * @param \CDemoStringTables $value
     * @return \CDemoFullPacket
     */
    public function setStringTable(\CDemoStringTables $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <packet> has a value
     *
     * @return boolean
     */
    public function hasPacket(){
      return $this->_has(2);
    }
    
    /**
     * Clear <packet> value
     *
     * @return \CDemoFullPacket
     */
    public function clearPacket(){
      return $this->_clear(2);
    }
    
    /**
     * Get <packet> value
     *
     * @return \CDemoPacket
     */
    public function getPacket(){
      return $this->_get(2);
    }
    
    /**
     * Set <packet> value
     *
     * @param \CDemoPacket $value
     * @return \CDemoFullPacket
     */
    public function setPacket(\CDemoPacket $value){
      return $this->_set(2, $value);
    }
  }
}

namespace  {

  class CDemoSyncTick extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CDemoSyncTick');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace  {

  class CDemoConsoleCmd extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $cmdstring = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CDemoConsoleCmd');

      // OPTIONAL STRING cmdstring = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmdstring";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmdstring> has a value
     *
     * @return boolean
     */
    public function hasCmdstring(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmdstring> value
     *
     * @return \CDemoConsoleCmd
     */
    public function clearCmdstring(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmdstring> value
     *
     * @return string
     */
    public function getCmdstring(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmdstring> value
     *
     * @param string $value
     * @return \CDemoConsoleCmd
     */
    public function setCmdstring( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace  {

  class CDemoSendTables extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $data = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CDemoSendTables');

      // OPTIONAL BYTES data = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "data";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <data> has a value
     *
     * @return boolean
     */
    public function hasData(){
      return $this->_has(1);
    }
    
    /**
     * Clear <data> value
     *
     * @return \CDemoSendTables
     */
    public function clearData(){
      return $this->_clear(1);
    }
    
    /**
     * Get <data> value
     *
     * @return string
     */
    public function getData(){
      return $this->_get(1);
    }
    
    /**
     * Set <data> value
     *
     * @param string $value
     * @return \CDemoSendTables
     */
    public function setData( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace CDemoClassInfo {

  class class_t extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $class_id = null;
    
    /**  @var string */
    public $network_name = null;
    
    /**  @var string */
    public $table_name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CDemoClassInfo.class_t');

      // OPTIONAL INT32 class_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "class_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING network_name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "network_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING table_name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "table_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <class_id> has a value
     *
     * @return boolean
     */
    public function hasClassId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <class_id> value
     *
     * @return \CDemoClassInfo\class_t
     */
    public function clearClassId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <class_id> value
     *
     * @return int
     */
    public function getClassId(){
      return $this->_get(1);
    }
    
    /**
     * Set <class_id> value
     *
     * @param int $value
     * @return \CDemoClassInfo\class_t
     */
    public function setClassId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <network_name> has a value
     *
     * @return boolean
     */
    public function hasNetworkName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <network_name> value
     *
     * @return \CDemoClassInfo\class_t
     */
    public function clearNetworkName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <network_name> value
     *
     * @return string
     */
    public function getNetworkName(){
      return $this->_get(2);
    }
    
    /**
     * Set <network_name> value
     *
     * @param string $value
     * @return \CDemoClassInfo\class_t
     */
    public function setNetworkName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <table_name> has a value
     *
     * @return boolean
     */
    public function hasTableName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <table_name> value
     *
     * @return \CDemoClassInfo\class_t
     */
    public function clearTableName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <table_name> value
     *
     * @return string
     */
    public function getTableName(){
      return $this->_get(3);
    }
    
    /**
     * Set <table_name> value
     *
     * @param string $value
     * @return \CDemoClassInfo\class_t
     */
    public function setTableName( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace  {

  class CDemoClassInfo extends \DrSlump\Protobuf\Message {

    /**  @var \CDemoClassInfo\class_t[]  */
    public $classes = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CDemoClassInfo');

      // REPEATED MESSAGE classes = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "classes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\CDemoClassInfo\class_t';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <classes> has a value
     *
     * @return boolean
     */
    public function hasClasses(){
      return $this->_has(1);
    }
    
    /**
     * Clear <classes> value
     *
     * @return \CDemoClassInfo
     */
    public function clearClasses(){
      return $this->_clear(1);
    }
    
    /**
     * Get <classes> value
     *
     * @param int $idx
     * @return \CDemoClassInfo\class_t
     */
    public function getClasses($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <classes> value
     *
     * @param \CDemoClassInfo\class_t $value
     * @return \CDemoClassInfo
     */
    public function setClasses(\CDemoClassInfo\class_t $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <classes>
     *
     * @return \CDemoClassInfo\class_t[]
     */
    public function getClassesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <classes>
     *
     * @param \CDemoClassInfo\class_t $value
     * @return \CDemoClassInfo
     */
    public function addClasses(\CDemoClassInfo\class_t $value){
     return $this->_add(1, $value);
    }
  }
}

namespace  {

  class CDemoCustomData extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $callback_index = null;
    
    /**  @var string */
    public $data = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CDemoCustomData');

      // OPTIONAL INT32 callback_index = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "callback_index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES data = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "data";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <callback_index> has a value
     *
     * @return boolean
     */
    public function hasCallbackIndex(){
      return $this->_has(1);
    }
    
    /**
     * Clear <callback_index> value
     *
     * @return \CDemoCustomData
     */
    public function clearCallbackIndex(){
      return $this->_clear(1);
    }
    
    /**
     * Get <callback_index> value
     *
     * @return int
     */
    public function getCallbackIndex(){
      return $this->_get(1);
    }
    
    /**
     * Set <callback_index> value
     *
     * @param int $value
     * @return \CDemoCustomData
     */
    public function setCallbackIndex( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <data> has a value
     *
     * @return boolean
     */
    public function hasData(){
      return $this->_has(2);
    }
    
    /**
     * Clear <data> value
     *
     * @return \CDemoCustomData
     */
    public function clearData(){
      return $this->_clear(2);
    }
    
    /**
     * Get <data> value
     *
     * @return string
     */
    public function getData(){
      return $this->_get(2);
    }
    
    /**
     * Set <data> value
     *
     * @param string $value
     * @return \CDemoCustomData
     */
    public function setData( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace  {

  class CDemoCustomDataCallbacks extends \DrSlump\Protobuf\Message {

    /**  @var string[]  */
    public $save_id = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CDemoCustomDataCallbacks');

      // REPEATED STRING save_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "save_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <save_id> has a value
     *
     * @return boolean
     */
    public function hasSaveId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <save_id> value
     *
     * @return \CDemoCustomDataCallbacks
     */
    public function clearSaveId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <save_id> value
     *
     * @param int $idx
     * @return string
     */
    public function getSaveId($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <save_id> value
     *
     * @param string $value
     * @return \CDemoCustomDataCallbacks
     */
    public function setSaveId( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <save_id>
     *
     * @return string[]
     */
    public function getSaveIdList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <save_id>
     *
     * @param string $value
     * @return \CDemoCustomDataCallbacks
     */
    public function addSaveId( $value){
     return $this->_add(1, $value);
    }
  }
}

namespace CDemoStringTables {

  class items_t extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $str = null;
    
    /**  @var string */
    public $data = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CDemoStringTables.items_t');

      // OPTIONAL STRING str = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "str";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES data = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "data";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <str> has a value
     *
     * @return boolean
     */
    public function hasStr(){
      return $this->_has(1);
    }
    
    /**
     * Clear <str> value
     *
     * @return \CDemoStringTables\items_t
     */
    public function clearStr(){
      return $this->_clear(1);
    }
    
    /**
     * Get <str> value
     *
     * @return string
     */
    public function getStr(){
      return $this->_get(1);
    }
    
    /**
     * Set <str> value
     *
     * @param string $value
     * @return \CDemoStringTables\items_t
     */
    public function setStr( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <data> has a value
     *
     * @return boolean
     */
    public function hasData(){
      return $this->_has(2);
    }
    
    /**
     * Clear <data> value
     *
     * @return \CDemoStringTables\items_t
     */
    public function clearData(){
      return $this->_clear(2);
    }
    
    /**
     * Get <data> value
     *
     * @return string
     */
    public function getData(){
      return $this->_get(2);
    }
    
    /**
     * Set <data> value
     *
     * @param string $value
     * @return \CDemoStringTables\items_t
     */
    public function setData( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace CDemoStringTables {

  class table_t extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $table_name = null;
    
    /**  @var \CDemoStringTables\items_t[]  */
    public $items = array();
    
    /**  @var \CDemoStringTables\items_t[]  */
    public $items_clientside = array();
    
    /**  @var int */
    public $table_flags = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CDemoStringTables.table_t');

      // OPTIONAL STRING table_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "table_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE items = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "items";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\CDemoStringTables\items_t';
      $descriptor->addField($f);

      // REPEATED MESSAGE items_clientside = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "items_clientside";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\CDemoStringTables\items_t';
      $descriptor->addField($f);

      // OPTIONAL INT32 table_flags = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "table_flags";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <table_name> has a value
     *
     * @return boolean
     */
    public function hasTableName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <table_name> value
     *
     * @return \CDemoStringTables\table_t
     */
    public function clearTableName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <table_name> value
     *
     * @return string
     */
    public function getTableName(){
      return $this->_get(1);
    }
    
    /**
     * Set <table_name> value
     *
     * @param string $value
     * @return \CDemoStringTables\table_t
     */
    public function setTableName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <items> has a value
     *
     * @return boolean
     */
    public function hasItems(){
      return $this->_has(2);
    }
    
    /**
     * Clear <items> value
     *
     * @return \CDemoStringTables\table_t
     */
    public function clearItems(){
      return $this->_clear(2);
    }
    
    /**
     * Get <items> value
     *
     * @param int $idx
     * @return \CDemoStringTables\items_t
     */
    public function getItems($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <items> value
     *
     * @param \CDemoStringTables\items_t $value
     * @return \CDemoStringTables\table_t
     */
    public function setItems(\CDemoStringTables\items_t $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <items>
     *
     * @return \CDemoStringTables\items_t[]
     */
    public function getItemsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <items>
     *
     * @param \CDemoStringTables\items_t $value
     * @return \CDemoStringTables\table_t
     */
    public function addItems(\CDemoStringTables\items_t $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <items_clientside> has a value
     *
     * @return boolean
     */
    public function hasItemsClientside(){
      return $this->_has(3);
    }
    
    /**
     * Clear <items_clientside> value
     *
     * @return \CDemoStringTables\table_t
     */
    public function clearItemsClientside(){
      return $this->_clear(3);
    }
    
    /**
     * Get <items_clientside> value
     *
     * @param int $idx
     * @return \CDemoStringTables\items_t
     */
    public function getItemsClientside($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <items_clientside> value
     *
     * @param \CDemoStringTables\items_t $value
     * @return \CDemoStringTables\table_t
     */
    public function setItemsClientside(\CDemoStringTables\items_t $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <items_clientside>
     *
     * @return \CDemoStringTables\items_t[]
     */
    public function getItemsClientsideList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <items_clientside>
     *
     * @param \CDemoStringTables\items_t $value
     * @return \CDemoStringTables\table_t
     */
    public function addItemsClientside(\CDemoStringTables\items_t $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <table_flags> has a value
     *
     * @return boolean
     */
    public function hasTableFlags(){
      return $this->_has(4);
    }
    
    /**
     * Clear <table_flags> value
     *
     * @return \CDemoStringTables\table_t
     */
    public function clearTableFlags(){
      return $this->_clear(4);
    }
    
    /**
     * Get <table_flags> value
     *
     * @return int
     */
    public function getTableFlags(){
      return $this->_get(4);
    }
    
    /**
     * Set <table_flags> value
     *
     * @param int $value
     * @return \CDemoStringTables\table_t
     */
    public function setTableFlags( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace  {

  class CDemoStringTables extends \DrSlump\Protobuf\Message {

    /**  @var \CDemoStringTables\table_t[]  */
    public $tables = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CDemoStringTables');

      // REPEATED MESSAGE tables = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "tables";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\CDemoStringTables\table_t';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <tables> has a value
     *
     * @return boolean
     */
    public function hasTables(){
      return $this->_has(1);
    }
    
    /**
     * Clear <tables> value
     *
     * @return \CDemoStringTables
     */
    public function clearTables(){
      return $this->_clear(1);
    }
    
    /**
     * Get <tables> value
     *
     * @param int $idx
     * @return \CDemoStringTables\table_t
     */
    public function getTables($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <tables> value
     *
     * @param \CDemoStringTables\table_t $value
     * @return \CDemoStringTables
     */
    public function setTables(\CDemoStringTables\table_t $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <tables>
     *
     * @return \CDemoStringTables\table_t[]
     */
    public function getTablesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <tables>
     *
     * @param \CDemoStringTables\table_t $value
     * @return \CDemoStringTables
     */
    public function addTables(\CDemoStringTables\table_t $value){
     return $this->_add(1, $value);
    }
  }
}

namespace  {

  class CDemoStop extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CDemoStop');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace  {

  class CDemoUserCmd extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $cmd_number = null;
    
    /**  @var string */
    public $data = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CDemoUserCmd');

      // OPTIONAL INT32 cmd_number = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd_number";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES data = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "data";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd_number> has a value
     *
     * @return boolean
     */
    public function hasCmdNumber(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd_number> value
     *
     * @return \CDemoUserCmd
     */
    public function clearCmdNumber(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd_number> value
     *
     * @return int
     */
    public function getCmdNumber(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd_number> value
     *
     * @param int $value
     * @return \CDemoUserCmd
     */
    public function setCmdNumber( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <data> has a value
     *
     * @return boolean
     */
    public function hasData(){
      return $this->_has(2);
    }
    
    /**
     * Clear <data> value
     *
     * @return \CDemoUserCmd
     */
    public function clearData(){
      return $this->_clear(2);
    }
    
    /**
     * Get <data> value
     *
     * @return string
     */
    public function getData(){
      return $this->_get(2);
    }
    
    /**
     * Set <data> value
     *
     * @param string $value
     * @return \CDemoUserCmd
     */
    public function setData( $value){
      return $this->_set(2, $value);
    }
  }
}

