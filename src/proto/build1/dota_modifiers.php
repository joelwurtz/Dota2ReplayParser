<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: dota_modifiers.proto
//   Date: 2012-04-27 16:14:30

namespace  {

  class DOTA_MODIFIER_ENTRY_TYPE extends \DrSlump\Protobuf\Enum {
    const DOTA_MODIFIER_ENTRY_TYPE_ACTIVE = 1;
    const DOTA_MODIFIER_ENTRY_TYPE_REMOVED = 2;
  }
}
namespace  {

  class CDOTAModifierBuffTableEntry extends \DrSlump\Protobuf\Message {

    /**  @var int - \DOTA_MODIFIER_ENTRY_TYPE */
    public $entry_type = null;
    
    /**  @var int */
    public $parent = null;
    
    /**  @var int */
    public $index = null;
    
    /**  @var int */
    public $serial_num = null;
    
    /**  @var int */
    public $name = null;
    
    /**  @var int */
    public $ability_level = null;
    
    /**  @var int */
    public $stack_count = null;
    
    /**  @var float */
    public $creation_time = null;
    
    /**  @var float */
    public $duration = -1;
    
    /**  @var int */
    public $caster = null;
    
    /**  @var int */
    public $ability = null;
    
    /**  @var int */
    public $armor = null;
    
    /**  @var float */
    public $fade_time = null;
    
    /**  @var boolean */
    public $subtle = null;
    
    /**  @var float */
    public $channel_time = null;
    
    /**  @var \CMsgVector */
    public $v_start = null;
    
    /**  @var \CMsgVector */
    public $v_end = null;
    
    /**  @var string */
    public $portal_loop_appear = null;
    
    /**  @var string */
    public $portal_loop_disappear = null;
    
    /**  @var string */
    public $hero_loop_appear = null;
    
    /**  @var string */
    public $hero_loop_disappear = null;
    
    /**  @var int */
    public $movement_speed = null;
    
    /**  @var boolean */
    public $aura = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.CDOTAModifierBuffTableEntry');

      // REQUIRED ENUM entry_type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "entry_type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\DOTA_MODIFIER_ENTRY_TYPE';
      $descriptor->addField($f);

      // REQUIRED INT32 parent = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "parent";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 index = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 serial_num = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "serial_num";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 name = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 ability_level = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "ability_level";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 stack_count = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "stack_count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT creation_time = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "creation_time";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT duration = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "duration";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = -1;
      $descriptor->addField($f);

      // OPTIONAL INT32 caster = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "caster";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 ability = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "ability";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 armor = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "armor";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT fade_time = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "fade_time";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL subtle = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "subtle";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT channel_time = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "channel_time";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE v_start = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "v_start";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\CMsgVector';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE v_end = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "v_end";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\CMsgVector';
      $descriptor->addField($f);

      // OPTIONAL STRING portal_loop_appear = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "portal_loop_appear";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING portal_loop_disappear = 19
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 19;
      $f->name      = "portal_loop_disappear";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING hero_loop_appear = 20
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20;
      $f->name      = "hero_loop_appear";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING hero_loop_disappear = 21
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 21;
      $f->name      = "hero_loop_disappear";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 movement_speed = 22
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 22;
      $f->name      = "movement_speed";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL aura = 23
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 23;
      $f->name      = "aura";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <entry_type> has a value
     *
     * @return boolean
     */
    public function hasEntryType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <entry_type> value
     *
     * @return \CDOTAModifierBuffTableEntry
     */
    public function clearEntryType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <entry_type> value
     *
     * @return int - \DOTA_MODIFIER_ENTRY_TYPE
     */
    public function getEntryType(){
      return $this->_get(1);
    }
    
    /**
     * Set <entry_type> value
     *
     * @param int - \DOTA_MODIFIER_ENTRY_TYPE $value
     * @return \CDOTAModifierBuffTableEntry
     */
    public function setEntryType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <parent> has a value
     *
     * @return boolean
     */
    public function hasParent(){
      return $this->_has(2);
    }
    
    /**
     * Clear <parent> value
     *
     * @return \CDOTAModifierBuffTableEntry
     */
    public function clearParent(){
      return $this->_clear(2);
    }
    
    /**
     * Get <parent> value
     *
     * @return int
     */
    public function getParent(){
      return $this->_get(2);
    }
    
    /**
     * Set <parent> value
     *
     * @param int $value
     * @return \CDOTAModifierBuffTableEntry
     */
    public function setParent( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(3);
    }
    
    /**
     * Clear <index> value
     *
     * @return \CDOTAModifierBuffTableEntry
     */
    public function clearIndex(){
      return $this->_clear(3);
    }
    
    /**
     * Get <index> value
     *
     * @return int
     */
    public function getIndex(){
      return $this->_get(3);
    }
    
    /**
     * Set <index> value
     *
     * @param int $value
     * @return \CDOTAModifierBuffTableEntry
     */
    public function setIndex( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <serial_num> has a value
     *
     * @return boolean
     */
    public function hasSerialNum(){
      return $this->_has(4);
    }
    
    /**
     * Clear <serial_num> value
     *
     * @return \CDOTAModifierBuffTableEntry
     */
    public function clearSerialNum(){
      return $this->_clear(4);
    }
    
    /**
     * Get <serial_num> value
     *
     * @return int
     */
    public function getSerialNum(){
      return $this->_get(4);
    }
    
    /**
     * Set <serial_num> value
     *
     * @param int $value
     * @return \CDOTAModifierBuffTableEntry
     */
    public function setSerialNum( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(5);
    }
    
    /**
     * Clear <name> value
     *
     * @return \CDOTAModifierBuffTableEntry
     */
    public function clearName(){
      return $this->_clear(5);
    }
    
    /**
     * Get <name> value
     *
     * @return int
     */
    public function getName(){
      return $this->_get(5);
    }
    
    /**
     * Set <name> value
     *
     * @param int $value
     * @return \CDOTAModifierBuffTableEntry
     */
    public function setName( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <ability_level> has a value
     *
     * @return boolean
     */
    public function hasAbilityLevel(){
      return $this->_has(6);
    }
    
    /**
     * Clear <ability_level> value
     *
     * @return \CDOTAModifierBuffTableEntry
     */
    public function clearAbilityLevel(){
      return $this->_clear(6);
    }
    
    /**
     * Get <ability_level> value
     *
     * @return int
     */
    public function getAbilityLevel(){
      return $this->_get(6);
    }
    
    /**
     * Set <ability_level> value
     *
     * @param int $value
     * @return \CDOTAModifierBuffTableEntry
     */
    public function setAbilityLevel( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <stack_count> has a value
     *
     * @return boolean
     */
    public function hasStackCount(){
      return $this->_has(7);
    }
    
    /**
     * Clear <stack_count> value
     *
     * @return \CDOTAModifierBuffTableEntry
     */
    public function clearStackCount(){
      return $this->_clear(7);
    }
    
    /**
     * Get <stack_count> value
     *
     * @return int
     */
    public function getStackCount(){
      return $this->_get(7);
    }
    
    /**
     * Set <stack_count> value
     *
     * @param int $value
     * @return \CDOTAModifierBuffTableEntry
     */
    public function setStackCount( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <creation_time> has a value
     *
     * @return boolean
     */
    public function hasCreationTime(){
      return $this->_has(8);
    }
    
    /**
     * Clear <creation_time> value
     *
     * @return \CDOTAModifierBuffTableEntry
     */
    public function clearCreationTime(){
      return $this->_clear(8);
    }
    
    /**
     * Get <creation_time> value
     *
     * @return float
     */
    public function getCreationTime(){
      return $this->_get(8);
    }
    
    /**
     * Set <creation_time> value
     *
     * @param float $value
     * @return \CDOTAModifierBuffTableEntry
     */
    public function setCreationTime( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <duration> has a value
     *
     * @return boolean
     */
    public function hasDuration(){
      return $this->_has(9);
    }
    
    /**
     * Clear <duration> value
     *
     * @return \CDOTAModifierBuffTableEntry
     */
    public function clearDuration(){
      return $this->_clear(9);
    }
    
    /**
     * Get <duration> value
     *
     * @return float
     */
    public function getDuration(){
      return $this->_get(9);
    }
    
    /**
     * Set <duration> value
     *
     * @param float $value
     * @return \CDOTAModifierBuffTableEntry
     */
    public function setDuration( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <caster> has a value
     *
     * @return boolean
     */
    public function hasCaster(){
      return $this->_has(10);
    }
    
    /**
     * Clear <caster> value
     *
     * @return \CDOTAModifierBuffTableEntry
     */
    public function clearCaster(){
      return $this->_clear(10);
    }
    
    /**
     * Get <caster> value
     *
     * @return int
     */
    public function getCaster(){
      return $this->_get(10);
    }
    
    /**
     * Set <caster> value
     *
     * @param int $value
     * @return \CDOTAModifierBuffTableEntry
     */
    public function setCaster( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <ability> has a value
     *
     * @return boolean
     */
    public function hasAbility(){
      return $this->_has(11);
    }
    
    /**
     * Clear <ability> value
     *
     * @return \CDOTAModifierBuffTableEntry
     */
    public function clearAbility(){
      return $this->_clear(11);
    }
    
    /**
     * Get <ability> value
     *
     * @return int
     */
    public function getAbility(){
      return $this->_get(11);
    }
    
    /**
     * Set <ability> value
     *
     * @param int $value
     * @return \CDOTAModifierBuffTableEntry
     */
    public function setAbility( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <armor> has a value
     *
     * @return boolean
     */
    public function hasArmor(){
      return $this->_has(12);
    }
    
    /**
     * Clear <armor> value
     *
     * @return \CDOTAModifierBuffTableEntry
     */
    public function clearArmor(){
      return $this->_clear(12);
    }
    
    /**
     * Get <armor> value
     *
     * @return int
     */
    public function getArmor(){
      return $this->_get(12);
    }
    
    /**
     * Set <armor> value
     *
     * @param int $value
     * @return \CDOTAModifierBuffTableEntry
     */
    public function setArmor( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <fade_time> has a value
     *
     * @return boolean
     */
    public function hasFadeTime(){
      return $this->_has(13);
    }
    
    /**
     * Clear <fade_time> value
     *
     * @return \CDOTAModifierBuffTableEntry
     */
    public function clearFadeTime(){
      return $this->_clear(13);
    }
    
    /**
     * Get <fade_time> value
     *
     * @return float
     */
    public function getFadeTime(){
      return $this->_get(13);
    }
    
    /**
     * Set <fade_time> value
     *
     * @param float $value
     * @return \CDOTAModifierBuffTableEntry
     */
    public function setFadeTime( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <subtle> has a value
     *
     * @return boolean
     */
    public function hasSubtle(){
      return $this->_has(14);
    }
    
    /**
     * Clear <subtle> value
     *
     * @return \CDOTAModifierBuffTableEntry
     */
    public function clearSubtle(){
      return $this->_clear(14);
    }
    
    /**
     * Get <subtle> value
     *
     * @return boolean
     */
    public function getSubtle(){
      return $this->_get(14);
    }
    
    /**
     * Set <subtle> value
     *
     * @param boolean $value
     * @return \CDOTAModifierBuffTableEntry
     */
    public function setSubtle( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <channel_time> has a value
     *
     * @return boolean
     */
    public function hasChannelTime(){
      return $this->_has(15);
    }
    
    /**
     * Clear <channel_time> value
     *
     * @return \CDOTAModifierBuffTableEntry
     */
    public function clearChannelTime(){
      return $this->_clear(15);
    }
    
    /**
     * Get <channel_time> value
     *
     * @return float
     */
    public function getChannelTime(){
      return $this->_get(15);
    }
    
    /**
     * Set <channel_time> value
     *
     * @param float $value
     * @return \CDOTAModifierBuffTableEntry
     */
    public function setChannelTime( $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <v_start> has a value
     *
     * @return boolean
     */
    public function hasVStart(){
      return $this->_has(16);
    }
    
    /**
     * Clear <v_start> value
     *
     * @return \CDOTAModifierBuffTableEntry
     */
    public function clearVStart(){
      return $this->_clear(16);
    }
    
    /**
     * Get <v_start> value
     *
     * @return \CMsgVector
     */
    public function getVStart(){
      return $this->_get(16);
    }
    
    /**
     * Set <v_start> value
     *
     * @param \CMsgVector $value
     * @return \CDOTAModifierBuffTableEntry
     */
    public function setVStart(\CMsgVector $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <v_end> has a value
     *
     * @return boolean
     */
    public function hasVEnd(){
      return $this->_has(17);
    }
    
    /**
     * Clear <v_end> value
     *
     * @return \CDOTAModifierBuffTableEntry
     */
    public function clearVEnd(){
      return $this->_clear(17);
    }
    
    /**
     * Get <v_end> value
     *
     * @return \CMsgVector
     */
    public function getVEnd(){
      return $this->_get(17);
    }
    
    /**
     * Set <v_end> value
     *
     * @param \CMsgVector $value
     * @return \CDOTAModifierBuffTableEntry
     */
    public function setVEnd(\CMsgVector $value){
      return $this->_set(17, $value);
    }
    
    /**
     * Check if <portal_loop_appear> has a value
     *
     * @return boolean
     */
    public function hasPortalLoopAppear(){
      return $this->_has(18);
    }
    
    /**
     * Clear <portal_loop_appear> value
     *
     * @return \CDOTAModifierBuffTableEntry
     */
    public function clearPortalLoopAppear(){
      return $this->_clear(18);
    }
    
    /**
     * Get <portal_loop_appear> value
     *
     * @return string
     */
    public function getPortalLoopAppear(){
      return $this->_get(18);
    }
    
    /**
     * Set <portal_loop_appear> value
     *
     * @param string $value
     * @return \CDOTAModifierBuffTableEntry
     */
    public function setPortalLoopAppear( $value){
      return $this->_set(18, $value);
    }
    
    /**
     * Check if <portal_loop_disappear> has a value
     *
     * @return boolean
     */
    public function hasPortalLoopDisappear(){
      return $this->_has(19);
    }
    
    /**
     * Clear <portal_loop_disappear> value
     *
     * @return \CDOTAModifierBuffTableEntry
     */
    public function clearPortalLoopDisappear(){
      return $this->_clear(19);
    }
    
    /**
     * Get <portal_loop_disappear> value
     *
     * @return string
     */
    public function getPortalLoopDisappear(){
      return $this->_get(19);
    }
    
    /**
     * Set <portal_loop_disappear> value
     *
     * @param string $value
     * @return \CDOTAModifierBuffTableEntry
     */
    public function setPortalLoopDisappear( $value){
      return $this->_set(19, $value);
    }
    
    /**
     * Check if <hero_loop_appear> has a value
     *
     * @return boolean
     */
    public function hasHeroLoopAppear(){
      return $this->_has(20);
    }
    
    /**
     * Clear <hero_loop_appear> value
     *
     * @return \CDOTAModifierBuffTableEntry
     */
    public function clearHeroLoopAppear(){
      return $this->_clear(20);
    }
    
    /**
     * Get <hero_loop_appear> value
     *
     * @return string
     */
    public function getHeroLoopAppear(){
      return $this->_get(20);
    }
    
    /**
     * Set <hero_loop_appear> value
     *
     * @param string $value
     * @return \CDOTAModifierBuffTableEntry
     */
    public function setHeroLoopAppear( $value){
      return $this->_set(20, $value);
    }
    
    /**
     * Check if <hero_loop_disappear> has a value
     *
     * @return boolean
     */
    public function hasHeroLoopDisappear(){
      return $this->_has(21);
    }
    
    /**
     * Clear <hero_loop_disappear> value
     *
     * @return \CDOTAModifierBuffTableEntry
     */
    public function clearHeroLoopDisappear(){
      return $this->_clear(21);
    }
    
    /**
     * Get <hero_loop_disappear> value
     *
     * @return string
     */
    public function getHeroLoopDisappear(){
      return $this->_get(21);
    }
    
    /**
     * Set <hero_loop_disappear> value
     *
     * @param string $value
     * @return \CDOTAModifierBuffTableEntry
     */
    public function setHeroLoopDisappear( $value){
      return $this->_set(21, $value);
    }
    
    /**
     * Check if <movement_speed> has a value
     *
     * @return boolean
     */
    public function hasMovementSpeed(){
      return $this->_has(22);
    }
    
    /**
     * Clear <movement_speed> value
     *
     * @return \CDOTAModifierBuffTableEntry
     */
    public function clearMovementSpeed(){
      return $this->_clear(22);
    }
    
    /**
     * Get <movement_speed> value
     *
     * @return int
     */
    public function getMovementSpeed(){
      return $this->_get(22);
    }
    
    /**
     * Set <movement_speed> value
     *
     * @param int $value
     * @return \CDOTAModifierBuffTableEntry
     */
    public function setMovementSpeed( $value){
      return $this->_set(22, $value);
    }
    
    /**
     * Check if <aura> has a value
     *
     * @return boolean
     */
    public function hasAura(){
      return $this->_has(23);
    }
    
    /**
     * Clear <aura> value
     *
     * @return \CDOTAModifierBuffTableEntry
     */
    public function clearAura(){
      return $this->_clear(23);
    }
    
    /**
     * Get <aura> value
     *
     * @return boolean
     */
    public function getAura(){
      return $this->_get(23);
    }
    
    /**
     * Set <aura> value
     *
     * @param boolean $value
     * @return \CDOTAModifierBuffTableEntry
     */
    public function setAura( $value){
      return $this->_set(23, $value);
    }
  }
}

